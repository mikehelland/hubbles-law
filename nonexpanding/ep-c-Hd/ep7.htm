<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>nonexpanding</title>

		<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

		<meta name="viewport" content="width=device-width, initial-scale=1.0">

		<link rel="stylesheet" href="../reveal/dist/reset.css">
		<link rel="stylesheet" href="../reveal/dist/reveal.css">
		<link rel="stylesheet" href="../reveal/dist/theme/black.css" id="theme">

		<!-- Theme used for syntax highlighting of code -->
		<link rel="stylesheet" href="../reveal/plugin/highlight/zenburn.css">

	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
				<section>
					<h3>Previous Episode</h3>
					<p>Episode 6: Coding the Big Bang in Python</p>
										
					<img src="ep6.png">
					
					<p class="fragment">Light coming from one direction</p>
				</section>

				<section>
					<p>Observer
						<br>
						&darr;
					</p>
					<img src="lightcone1.png">
					<p class="fragment">Light cone in the expanding universe</p>
					
				</section>

				<section id="basiclightcone">
					<h2>Light cone basics</h2>
					<div style="display: flex;">
						<canvas id="lightcone1" width="900" height="800"></canvas>
						<div style="text-align: left; padding-left: 20px;">
							<div id="lc1chunk1">
								<p class="fragment">On a spacetime diagram each point is an event </p>
								<p id="lc1event" class="fragment" style="color:lightblue">Events have coordinates (t, x) </p>
								<p id="lc1observer" class="fragment" style="color:gray;">Observer at the origin (0, 0) </p>
								<p id="lc1vc" class="fragment" style="color:yellow;">Light travels in straight lines at 45 degree angles </p>
								<p class="fragment">Something happening a light year away...<br> is observed a year later</p>
							</div>
							<div class="fragment" id="lc1hidechunk1"></div>
							<p class="fragment" id="lc1vnc" style="color:yellow;">Light from both directions</p>	
							<p id="lc1showcones" class="fragment">Events in the <span style="color:red;">past cone</span> can affect the present</p>
							<p id="lc1showconef" class="fragment">The present can affect events in the <span style="color:blue;">future cone</span></p>
							
						</div>
					</div>
					<script src="lightcone1.js"></script>
				</section>


				<section id="expandinglightcone">
					<h2>Light cone in an expanding universe</h2>
					<div style="display: flex;">
						<canvas id="lightcone1ex" width="900" height="800"></canvas>
						<div style="text-align: left; padding-left: 20px;">
							<p id="lc1hidecones" class="fragment"><br>Zoom waaaay out</p>
								
							<p class="fragment">Space was smaller in the past </p>
							<p class="fragment">... and gets bigger in the future</p>

							<p class="fragment" id="lc1showquad"></p>
						</div>
					</div>
				</section>

				<section id="lcspeed">
					<p>Speed of light in expanding space?</p>
							
					<div style="display: flex; justify-content: center;">
						<canvas id="lightcone2" width="900" height="800"></canvas>
						<div style="width:48%; padding-left: 20px; text-align: left;">
						
							<div id="lc2chunk1">
								<p class="fragment" id="lc2hidecurve">Straight line is <span style="color: yellow; ">$v = c$</span></p>
								<p class="fragment" id="lc2galaxy">Objects in expanding space move at <span style="color: lightblue; ">$v = Hd$</span></p>
								<p class="fragment">
									<span style="color: yellow; ">&rarr;</span> $+$ <span style="color: lightblue; ">&larr;</span>
									relative velocity is
									<span style="color: yellow; ">$c~$</span><span style="color: lightblue; ">$+ Hd$</span>
								</p>
								<p class="fragment">Light has to be moving at <span style="color: yellow; ">$c$</span> relative to <em>all</em> observers!
	
							</div>
							
							<div id="lc2showcurve" class="fragment">
							</div>
							
							<p class="fragment">Curved line is <span style="color: yellow; ">$v = c - Hd$</span></p>							
							
							<p class="fragment" >
								<span style="color: yellow; ">&rarr;</span> $+$ <span style="color: lightblue; ">&larr;</span>
								relative velocity is
								<span style="color: yellow; ">$c - Hd~$</span><span style="color: lightblue; ">$+ Hd$</span>
							</p>
							<p class="fragment">Light <em>is</em> moving at <span style="color: yellow; ">$c$</span> relative to <em>all</em> observers!</p>
							<p class="fragment" id="lc2moveg">This distance is observed farther back in time</p>
						</div>
						
					</div>
					<script src="lightcone2.js"></script>
				</section>


				<section data-auto-animate>
					<div style="display: flex; align-items: center;">
					<pre style="height:886px;" data-id="code-animation"><code class="hljs python" data-line-numbers="">data = []
		
# Hubble's constant
H0 = 70 # km/s/Mpc
H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
H = H0
Ωm = 0.3
ΩΛ = 0.7

c = 1  # the speed of light
p = 0  # a photon's distance
p2 = 0.1

t = 0

while z < 10:
	t += -1 # million years

	# photon speed is v = c - Hd
	p += c - H * p
	p2 += c - H * p2

	# calculate redshift
	z = 0.1 / (p2 - p) - 1

	H = H0 * (Ωm * (1 + z)**3 + ΩΛ)**(1/2)

	data.append({
		"z": z, "dEmit": p,
		"dNow": p * (1 + z),
		"dLight": c * -t
	})
						</code></pre>
						<img src="ep6.png" height="913px" width="1093px">
					</div>
				</section>
		
				<section data-auto-animate>
					<div style="display: flex; align-items: center;">
					<pre style="height:886px;" data-id="code-animation"><code class="hljs python" data-line-numbers="19-21">data = []
		
# Hubble's constant
H0 = 70 # km/s/Mpc
H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
H = H0
Ωm = 0.3
ΩΛ = 0.7

c = 1  # the speed of light
p = 0  # a photon's distance
p2 = 0.1

t = 0

while z < 10:
	t += -1 # million years

	# photon speed is v = c - Hd
	p += c - H * p
	p2 += c - H * p2

	# calculate redshift
	z = 0.1 / (p2 - p) - 1

	H = H0 * (Ωm * (1 + z)**3 + ΩΛ)**(1/2)

	data.append({
		"z": z, "dEmit": p,
		"dNow": p * (1 + z),
		"dLight": c * -t
	})
						</code></pre>
						<img src="ep6.png" height="913px" width="1093px">
					</div>
				</section>

				<section>
					<p>There's an important part of the algorithm I haven't fully explained...</p>
				</section>

				<section id="wl1">
					<p>Forward in time, expanding, $v = c + Hd$</p>
					<div style="display: flex; align-items: center;">
						<canvas id="wavelengths1" width="900" height="800"></canvas>
					<pre style="height:800px;" data-id="code-animation"><code class="hljs python" data-line-numbers="">λemit = 0.1

x  = 0
xλ = x + λemit

while z < 10:

	# photon speed is v = c + Hx
	x  += c + H * x
	xλ += c + H * xλ

	# calculate redshift
	z = (xλ - x) / λemit  - 1

						</code></pre>
					</div>
				</section>
				<script src="wavelengths1.js"></script>

				<section id="wl2">
					<p>In reverse, $v = c - Hd$</p>
					<div style="display: flex; align-items: center;">
						<canvas id="wavelengths2" width="900" height="800"></canvas>
					<pre style="height:800px;" data-id="code-animation"><code class="hljs python" data-line-numbers="">λobs = 0.1

x  = 0
xλ = x + λobs

while z < 10:

	# photon speed is v = c - Hx
	x  += c - H * x
	xλ += c - H * xλ

	# calculate redshift
	z = λobs / (xλ - x)  - 1

						</code></pre>
					</div>
				</section>
				


				<section>
					<h3>Why isn't this equation more well known?</h3>
					<p>$v = c - Hd$</p>
					<ul>
						<li class="fragment">It's not as simple as it looks</li>
						<li class="fragment">$H$ is not constant</li>
						<li class="fragment">$H = H_0 [\Omega_m (1+z)^3 + \Omega_\Lambda]^{1/2}$</li>
						<li class="fragment" style="color:gray;">Technically, that's simplified too (missing $\Omega_k$ and $\Omega_r$)</li>
						<li class="fragment">Other equations</li>
						<li class="fragment">Makes it seem like light isn't moving at $c$</li>
					</ul>
				</section>


				<section>
					<h3>On the other hand:</h3>
					<p>$v = c - Hd$</p>
					<ul>
						<li class="fragment">If light is $c$ for all observers...</li>
						<li class="fragment">its speed <em>has</em> to be 
							<span style="color: yellow; "> $~c - Hd~$ </span> since all observers move at 
							<span style="color: lightblue; "> $~Hd~$ </span>
						</li>
						<li class="fragment">It's super simple to implement in an algorithm</li>
						<li class="fragment">Calculates all observables <span style="color: gray;">(distance, time, redshift)</span> for FLRW</li>
					</ul>
				</section>



				<section>
					<h2>FLRW</h2>
					<p>Friedmann–Lemaître–Robertson–Walker metric</p>
					<p class="fragment" style="color: gray;">(simplified)</p>
					<ul>
						<li class="fragment">$\Omega_m$, how much of the universe is matter</li>
						<li class="fragment">$\Omega_\Lambda$, how much of the universe is dark energy</li>
						<li class="fragment">When $\Omega_m + \Omega_\Lambda = 1$, it's "flat"</li>
						<li class="fragment">That means triangles have 180 degrees </li>
						<li class="fragment">If $\Omega_m + \Omega_\Lambda \neq 1$, it's "open" or "closed"</li>
						
					</ul>
					
				</section>

				<section data-auto-animate>
					<div style="display: flex; align-items: center;">
					<pre style="height:886px;" data-id="code-animation"><code class="hljs python" data-line-numbers="">data = []

H0 = 70
ΩΛ = 0.7
Ωm = 0.3

H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
H = H0
c = 1
z = 0
t = 0
x1 = 0.1
x2 = 0

while z < 10:
    t -= 1
    x1 += c - H * x1
    x2 += c - H * x2
    z = 0.1 / (x1 - x2) - 1
    H = H0 * (Ωm * (1+z)**3 + ΩΛ)**0.5
    
    data.append([z, -t, x, x2 * (1 + z)])

						</code></pre>
						<p style="width: 50%;">Flat Only</p>
					</div>
				</section>

				<section data-auto-animate>
					<div style="display: flex; align-items: center;">
					<pre style="height:886px;" data-id="code-animation"><code class="hljs python" data-line-numbers="6">data = []

H0 = 70
ΩΛ = 0.7
Ωm = 0.3
Ωk = 1 - ΩΛ - Ωm

H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
H = H0
c = 1
z = 0
t = 0
x1 = 0.1
x2 = 0

while z < 10:
    t -= 1
    x1 += c - H * x1
    x2 += c - H * x2
    z = 0.1 / (x1 - x2) - 1
    H = H0 * (Ωm * (1+z)**3 + ΩΛ)**0.5
    
    data.append([z, -t, x, x2 * (1 + z)])

						</code></pre>
						<p style="width: 50%;">$\Omega_k$ is the curvature parameter</p>
					</div>
				</section>
				
				<section data-auto-animate>
					<div style="display: flex; align-items: center;">
					<pre style="height:886px;" data-id="code-animation"><code class="hljs python" data-line-numbers="21">data = []

H0 = 70
ΩΛ = 0.7
Ωm = 0.3
Ωk = 1 - ΩΛ - Ωm

H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
H = H0
c = 1
z = 0
t = 0
x1 = 0.1
x2 = 0

while z < 10:
    t -= 1
    x1 += c - H * x1
    x2 += c - H * x2
    z = 0.1 / (x1 - x2) - 1
    H = H0 * (Ωm * (1+z)**3 + ΩΛ + Ωk * (1+z)**2)**0.5
    
    data.append([z, -t, x, x2 * (1 + z)])

						</code></pre>
						<p style="width: 50%;">$\Omega_k (1+z)^2$</p>
					</div>
				</section>

				<section data-auto-animate>
					<div style="display: flex; align-items: center;">
					<pre style="height:886px;" data-id="code-animation"><code class="hljs python" data-line-numbers="24-30">import math
data = []

H0 = 70
ΩΛ = 0.7
Ωm = 0.3
Ωk = 1 - ΩΛ - Ωm

H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
H = H0
c = 1
z = 0
t = 0
x1 = 0.1
x2 = 0

while z < 10:
    t -= 1
    x1 += c - H * x1
    x2 += c - H * x2
    z = 0.1 / (x1 - x2) - 1
    H = H0 * (Ωm * (1+z)**3 + ΩΛ + Ωk * (1+z)**2)**0.5

    xx = abs(Ωk)**0.5 * x2 * (1+z)
    if Ωk == 0:
        x = x2
    elif Ωk < 0:
        x = 1/H0 * math.sin(xx * H0) / xx * x2 
    else:
        x = 1/H0 * math.sinh(xx * H0) / xx * x2 

    
    data.append([z, -t, x, x2 * (1 + z)])

						</code></pre>
						<p style="width: 50%;">Flat, Open, and Closed</p>
					</div>
				</section>

			
			

				<section data-auto-animate>
					<div style="display: flex; align-items: center;">
					<pre style="height:886px;" data-id="code-animation"><code class="hljs python" data-line-numbers="19-20">import math
data = []

H0 = 70
ΩΛ = 0.7
Ωm = 0.3
Ωk = 1 - ΩΛ - Ωm

H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
H = H0
c = 1
z = 0
t = 0
x1 = 0.1
x2 = 0

while z < 10:
    t -= 1
    x1 += c - H * x1
    x2 += c - H * x2
    z = 0.1 / (x1 - x2) - 1
    H = H0 * (Ωm * (1+z)**3 + ΩΛ + Ωk * (1+z)**2)**0.5

    xx = abs(Ωk)**0.5 * x2 * (1+z)
    if Ωk == 0:
        x = x2
    elif Ωk < 0:
        x = 1/H0 * math.sin(xx * H0) / xx * x2 
    else:
        x = 1/H0 * math.sinh(xx * H0) / xx * x2 

    
    data.append([z, -t, x, x2 * (1 + z)])

						</code></pre>
						<p style="width: 50%;">$v=c-Hd$</p>
					</div>
				</section>			
	


				<section>
					<p>Calculating distances with CosmoloPy</p>
					<!--
					<div style="display: flex; align-items: center;">
					<pre style="height:886px;"><code class="hljs python" >data = []
		
# Hubble's constant
H0 = 70 # km/s/Mpc
H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
H = H0
Ωm = 0.3
ΩΛ = 0.7

c = 1     # the speed of light
x1 = 0.1  # a photon's wavelength
x2 = 0    # a photon's distance

t = 0

while z < 10:
	t += -1 # million years

	# photon speed is v = c - Hd
	x1 += c - H * x1
	x2 += c - H * x2

	# calculate redshift
	z = 0.1 / (x1 - x2) - 1

	H = H0 * (Ωm * (1 + z)**3 + ΩΛ)**(1/2)

	data.append([z, -t, x2, x2 * (1 + z)])
						</code></pre>
						<div class="fragment" style="padding: 30px;">vs</div>
					-->
					<pre style="height:746px; width:1000px;"><code class="hljs python" data-line-numbers="">import cosmolopy.distance as cd

cosmo = {
	'omega_M_0' : Ωm, 
	'omega_lambda_0' : ΩΛ, 
	'h' : H0km/100
}
cosmo = cd.set_omega_k_0(cosmo)

data2 = []

# Parsec to lightyear
pc2ly = 3.261564

z = 0

while z < 10:
    d_C = cd.comoving_distance(z, **cosmo)  * pc2ly
    d_A = cd.angular_diameter_distance(z, **cosmo)  * pc2ly
    d_T = cd.lookback_time(z, **cosmo) / 60 / 60 / 24 / 365 / 1e6
    
    data2.append([z, d_T, d_A, d_C])
    
    z += 0.1
						</code></pre>

						
					<!--</div>-->
				</section>

				<section>
					<p>The algorithm compared to CosmoloPy</p>
					
					<img src="../../other/python/cp4.png" height="913px" width="1093px">
				</section>
		
			
				<section>
					<h3>Did I discover the <em>REAL</em> speed of light?</h3>
					<ul>
						<li class="fragment"><span style="color:gray;">Argument:</span>: This is the coordinate speed of light, not the real speed of light</li>
						<li class="fragment">These coordinates are proper distance and cosmic time, which are considered physical time and space</li><br>						
						<li class="fragment"><span style="color:gray;">Argument:</span>: This assumes no "peculiar velocity," the only motion is due to the expansion of space</li>
						<li class="fragment">Pretty much</li><br>						
						<li class="fragment"><span style="color:gray;">Argument:</span>: Obviously someone else has pointed out photons move at $v=c-Hd$.</li>
						<li class="fragment">Not that I know of.</li>
						
					</ul>
				</section>

				<section>
					<img src="cunningham.png">

					<p class="fragment">Know of any examples of the useful equation/algorithm?</p>

					<p class="fragment">Got a problem with something I just said?</p>
					<p class="fragment">Leave a comment!</p>
					
				</section>
			</div>

		</div>

		<script src="../reveal/dist/reveal.js"></script>
		<script src="../reveal/plugin/math/math.js"></script>
		<script src="../reveal/plugin/zoom/zoom.js"></script>
		<script src="../reveal/plugin/notes/notes.js"></script>
		<script src="../reveal/plugin/search/search.js"></script>
		<script src="../reveal/plugin/markdown/markdown.js"></script>
		<script src="../reveal/plugin/highlight/highlight.js"></script>
		<script>

			// Also available as an ES module, see:
			// https://revealjs.com/initialization/
			Reveal.initialize({
				controls: true,
				progress: true,
				center: true,
				hash: true,

				width: 1920,
  				height: 1080,

				// Learn about plugins: https://revealjs.com/plugins/
				plugins: [ RevealZoom, RevealNotes, RevealSearch, RevealMarkdown, RevealHighlight, RevealMath.KaTeX ]
			});

			var lc1 = demoLightcone1(lightcone1)
			var lc1ex = demoLightcone1(lightcone1ex)
			var lc2 = demoLightcone2()
			var wl1 = demoWavelengths1(wavelengths1, 1)
			var wl2 = demoWavelengths1(wavelengths2, -1)

			Reveal.on('fragmentshown', event => {
				console.log(event.fragment.id)
				if (event.fragment.id === "lc1event") {
					lc1.showEvent()
				}
				if (event.fragment.id === "lc1observer") {
					lc1.showObserver()
				}
				if (event.fragment.id === "lc1vc") {
					lc1.showVC()
				}
				if (event.fragment.id === "lc1vnc") {
					lc1.showVnC()
				}
				if (event.fragment.id === "lc1showcones") {
					lc1.showCones()
				}
				if (event.fragment.id === "lc1showconef") {
					lc1.showFutureCone()
				}
				if (event.fragment.id === "lc1hidechunk1") {
					lc1chunk1.style.display = "none"
					Reveal.next()
				}
				

				if (event.fragment.id === "lc1hidecones") {
					lc1ex.zoomOut()
				}
				if (event.fragment.id === "lc1showquad") {
					lc1ex.showQuad()
				}
				

				if (event.fragment.id === "lc2galaxy") {
					lc2.showGalaxy()
				}
				if (event.fragment.id === "lc2hidecurve") {
					lc2.hideCurve()
				}
				if (event.fragment.id === "lc2showarrow") {
					lc2.showArrow()
				}
				if (event.fragment.id === "lc2showcurve") {
					lc2.showCurve()
					lc2chunk1.style.display = "none"
					Reveal.next()
				}
				if (event.fragment.id === "lc2moveg") {
					lc2.moveG()
				}


			});

			Reveal.on('slidechanged', event => {
				if (event.currentSlide.id === "basiclightcone") {
					lc1.draw()
				}		
				if (event.currentSlide.id === "expandinglightcone") {
					lc1ex.expanding()
					lc1ex.draw()
				}		

				if (event.currentSlide.id === "lcspeed") {
					lc2.draw()
				}
				
				if (event.currentSlide.id === "wl1") {
					wl1.draw()
				}
				if (event.currentSlide.id === "wl2") {
					wl2.draw()
				}
			});


		</script>

	</body>
</html>
