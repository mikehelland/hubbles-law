function redshiftDemo() {

    var graph = document.getElementById("expandingspace")
    var graph2 = document.getElementById("expandingtime")

    var ctx = graph.getContext("2d")

    var spectrum = document.getElementById("spectrum")

    var colors = getSpectrum()

    var t = 0
    var spacing = 150
    var sy = 3

    var x0 = graph.width / 20
    var y0 = graph.height / 20

    var scale, sx, cx, color, i

    var cosZoom
    var cosStartX
    var cosStartY

    drawSpacetime(graph)
    drawSpacetime(graph2, 1)

    var animHandle

    setTimeout(() => {
        drawSpacetime(graph)
        
    }, 1000)

    function animateRedshifts() {
        animHandle = setInterval(() => {
            drawSpacetime(graph)
            drawSpacetime(graph2, 1)
            t++
        }, 1000 / 30)
        setTimeout(() => clearInterval(animHandle), 5.12 * 1000)    
    }


    function drawSpacetime(graph, version) {
        ctx = graph.getContext("2d")
        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, graph.width, graph.height)

        ctx.strokeStyle = "White"
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.moveTo(0, y0)
        ctx.lineTo(graph.width, y0)
        ctx.stroke()
        ctx.beginPath()
        ctx.moveTo(x0, 0)
        ctx.lineTo(x0, graph.height - 68)
        ctx.stroke()

        ctx.font = "14pt Sans"
        ctx.fillStyle = "white"
        ctx.textAlign = "right"
        ctx.fillText("Time", 86, graph.height - 80)
        ctx.fillText("Space", graph.width - 5, 18)

        scale = (-Math.cos(t / 10) + 1) * 25/2

        ctx.drawImage(spectrum, 40, graph.height - 60, graph.width - 80, 50)
        
        //var sx = graph.width / 4 * 3 - scale * 18
        sx = (1 - scale / 25)
        cx = Math.floor(sx * (colors.length / 3 - 1))
        sx = 40 + sx * (graph.width - 80)
        color = "#" + ("000000" + rgbToHex(colors[cx * 3], colors[cx * 3 + 1], colors[cx * 3 + 2])).slice(-6);    
        
        ctx.fillStyle = "black"
        ctx.fillRect(sx, graph.height - 64, 10, 60)


        cosZoom = 9
        cosStartX = graph.width * 1/2 
        cosStartY = graph.height * 1/2 
        
        ctx.strokeStyle = "white"
        ctx.lineWidth = 4
        ctx.translate(cosStartX, cosStartY)
        
        if (version === 1) {
            ctx.rotate(Math.PI / 4 + scale/spacing)
        }
        else {
            ctx.rotate(Math.PI / 4 - scale/spacing)
        }
        ctx.beginPath()
        ctx.moveTo(-spacing + -scale , 2 * - cosZoom)
        for (i = -Math.PI*2; i < Math.PI*2; i+=0.1) {
            //ctx.lineTo(cosZoom * i * (1 + scale/50), - cosZoom * Math.cos(i))
            //ctx.lineTo(cosZoom * i * (1 + scale/spacing), - cosZoom * Math.cos(i))
            ctx.lineTo(spacing/(Math.PI*2) * i + i/(Math.PI*2) * scale, - cosZoom * sy * Math.cos(i))
        }
        ctx.stroke()

        ctx.fillStyle = color
        for (i = -1; i < 2; i++) {
            ctx.beginPath()

            if (version === 1) {
                ctx.arc(i * spacing + i * scale, sy * -cosZoom, 16, 0, Math.PI*2)
            }
            else {
                ctx.arc(i * spacing + i * scale, sy * -cosZoom, 16, 0, Math.PI*2)
                //ctx.arc(i * (50 + scale), -40 - i * (40), 8, 0, Math.PI*2)
            }
            ctx.fill()
        }

        ctx.setTransform(1, 0, 0, 1, 0, 0)


        if (version === 1) {
            drawUpArrow(ctx, graph.width / 4, 220 + 2 * scale, cosStartY + 100 + scale)
        }
        else {
            drawRightArrow(ctx, graph.width / 3 - scale, graph.width / 3 * 2 + scale, 
                graph.width / 4 * 3)
        }


    }

    function drawRightArrow(ctx, x1, x2, y) {
        ctx.lineWidth = 4
        ctx.strokeStyle = "yellow"
        ctx.fillStyle = "yellow"
        
        ctx.beginPath()
        ctx.moveTo(x1, y)
        ctx.lineTo(x2, y)
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(x2 - 10, y - 10)
        ctx.lineTo(x2 + 2, y)
        ctx.lineTo(x2 - 10, y + 10)
        ctx.closePath()
        ctx.fill()

        ctx.beginPath()
        ctx.moveTo(x1 + 10, y - 10)
        ctx.lineTo(x1 - 2 , y)
        ctx.lineTo(x1 + 10, y + 10)
        ctx.closePath()
        ctx.fill()
    }

    function drawUpArrow(ctx, x, l, y, justDown) {
        ctx.lineWidth = 4
        ctx.strokeStyle = "yellow"
        ctx.fillStyle = "yellow"
        
        ctx.beginPath()
        ctx.moveTo(x, y)
        ctx.lineTo(x, y - l)
        ctx.stroke()

        if (!justDown) {
            ctx.beginPath()
            ctx.moveTo(x - 10, y - l + 12)
            ctx.lineTo(x , y - l - 2)
            ctx.lineTo(x + 10, y - l + 12)
            ctx.closePath()
            ctx.fill()
        }

        ctx.beginPath()
        ctx.moveTo(x - 10, y - 12)
        ctx.lineTo(x , y + 2)
        ctx.lineTo(x + 10, y - 12)
        ctx.closePath()
        ctx.fill()
    }

        
    function rgbToHex(r, g, b) {
        if (r > 255 || g > 255 || b > 255)
            throw "Invalid color component";
        return ((r << 16) | (g << 8) | b).toString(16);
    }

    function getSpectrum() {
        return [205,0,55,203,0,26,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,202,0,33,200,0,32,203,0,34,204,0,35,202,0,34,202,0,34,199,0,34,200,0,35,203,0,37,201,0,37,202,0,38,201,0,36,199,0,34,197,0,34,201,0,36,202,0,38,201,0,37,201,0,34,201,0,34,201,0,35,201,0,35,203,0,37,203,0,38,199,0,35,197,0,33,201,0,37,201,0,37,201,0,37,200,1,38,200,21,39,199,31,38,199,31,38,197,32,38,201,36,36,199,40,36,199,40,36,199,45,35,199,51,38,200,56,40,197,59,39,196,58,38,198,61,38,199,65,40,200,67,39,200,70,40,198,71,40,196,75,39,196,78,41,197,79,42,196,84,40,195,83,39,192,85,40,193,89,40,196,93,43,196,97,45,194,99,43,193,97,42,195,100,42,196,101,43,195,104,43,194,106,44,192,107,44,191,110,43,193,112,45,194,116,47,192,119,45,192,122,46,192,122,46,193,123,46,192,125,47,193,126,48,191,128,46,192,129,47,191,132,47,190,135,48,191,136,47,189,137,47,189,139,48,188,141,48,188,145,50,190,147,52,189,150,52,188,149,51,186,150,51,186,153,50,185,157,52,185,159,52,185,159,52,181,158,51,187,160,55,187,161,53,185,163,54,185,165,55,184,168,55,181,169,55,180,171,54,180,171,54,180,171,53,182,173,55,185,176,57,183,179,57,183,179,57,181,180,55,182,181,56,182,181,56,184,186,58,184,186,58,181,188,58,182,190,58,180,190,58,181,191,59,178,193,57,178,193,57,175,193,60,178,196,61,179,197,62,174,197,60,173,196,58,174,200,61,175,202,60,175,202,60,176,203,62,176,203,62,172,203,62,170,204,62,169,204,62,167,207,63,168,208,64,166,209,64,167,207,61,165,205,60,166,206,62,166,209,64,167,208,65,161,206,63,160,205,62,162,207,65,159,210,64,159,210,64,156,210,64,154,211,66,151,211,65,149,212,66,149,212,66,147,212,66,143,210,68,143,210,68,141,211,68,141,211,68,138,212,68,138,212,68,136,214,68,136,214,68,134,213,70,131,213,70,130,212,70,128,213,71,125,213,71,123,214,72,121,213,72,121,213,72,116,213,72,116,213,72,113,214,72,109,212,72,108,211,72,107,211,72,105,213,73,106,214,73,99,214,74,97,212,73,93,211,73,90,212,73,89,214,76,86,214,76,84,213,75,80,212,74,77,213,77,77,213,77,73,214,76,70,212,77,63,213,76,61,213,78,60,211,77,53,213,77,49,212,77,49,212,77,46,214,80,37,213,79,26,212,79,0,211,78,1,212,79,0,213,80,0,212,80,0,208,79,0,209,79,0,208,79,0,208,80,0,208,82,0,205,82,0,204,80,0,208,80,0,207,81,0,207,80,0,205,80,0,204,81,0,206,82,0,205,83,0,205,83,0,205,82,0,206,82,0,205,83,0,204,82,0,203,81,0,203,83,0,204,83,0,205,84,0,204,83,0,204,83,0,204,83,0,204,83,0,204,83,0,204,83,0,204,83,0,204,83,0,204,81,0,204,81,0,203,81,0,203,81,0,204,82,0,204,82,0,204,82,0,203,82,0,201,83,0,205,83,0,206,84,0,206,85,0,204,89,0,203,93,0,203,101,0,202,105,0,204,110,0,204,114,0,203,117,0,204,124,0,203,128,0,200,135,0,200,138,0,201,139,0,202,148,0,200,150,0,199,155,0,198,160,0,197,164,0,196,169,0,197,172,0,196,173,0,190,181,0,191,182,0,192,184,0,193,186,0,193,185,0,191,184,0,188,183,0,189,183,0,188,188,0,188,186,0,184,184,0,184,184,0,181,185,0,178,187,0,177,186,0,172,187,0,171,187,0,171,187,0,168,188,0,165,189,0,163,190,0,160,190,0,159,189,0,156,190,0,154,189,0,153,188,0,150,187,0,147,188,0,146,187,0,143,185,0,142,186,0,140,186,0,135,188,0,134,187,0,130,188,0,127,189,0,126,188,0,120,188,0,118,188,0,117,188,0,114,190,0,108,186,10,105,185,23,104,187,30,101,187,35,94,184,39,89,183,40,90,184,44,85,183,45,82,182,45,80,179,47,77,178,50,75,178,50,73,176,53,72,177,53,72,177,55,71,173,59,64,171,62,52,167,66,36,163,69,0,160,70,0,158,70,0,157,69,0,156,71,0,154,71,0,154,70,0,152,69,0,151,68,0,150,68,0,150,68,0,150,68,0,150,69,0,148,69,0,148,69,0,148,71,0,149,71,0,149,72,0,149,72,0,149,72,0,149,74,0,150,74,0,150,74,0,150,74,0,150,74,0,150,74,0,150,74,0,150,74,0,150,74,0,149,75,0,149,76,0,150,76,0,150,78,0,150,78,0,150,79,0,151,79,0,151,81,0,152,81,0,152,81,0,152,83,0,152,83,0,152,85,0,153,85,0,153,85,0,153,86,0,151,86,0,151,87,0,150,88,0,150,91,0,151,91,0,149,94,0,150,94,0,150,96,0,150,96,0,150,97,0,151,100,0,150,100,0,151,100,0,150,102,0,151,102,0,151,106,0,150,106,0,150,106,0,150,107,0,150,107,0,150,110,0,151,110,0,151,110,0,151,113,0,150,113,0,150,114,0,150,114,0,150,116,0,151,116,0,151,118,0,151,118,0,151,119,0,149,122,0,150,122,0,149,123,0,149,125,0,150,128,0,149,129,0,149,129,0,149,131,0,149,132,0,150,133,0,150,133,0,148,134,0,149,137,0,148,138,0,148,138,0,148,140,0,148,141,0,149,143,0,149,143,0,147,146,0,148,148,0,149,148,0,148,150,0,148,152,0,150,152,0,150,153,0,149,155,0,150,157,0,148,158,0,148,160,0,146,160,0,146,162,0,149,162,0,149,163,0,148,164,0,148,164,0,148,166,0,146,167,0,147,167,0,147,169,0,148,169,0,148,171,0,148,171,0,148,172,0,148,173,0,149,173,0,149,174,0,149,174,0,145,179,0,153,167,0,148]
    }

    return {animateRedshifts}
}