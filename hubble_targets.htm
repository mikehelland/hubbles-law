<html>
    <head>
        <style>
            body {
                background-color: #202020;
                color:white;
                padding: 8px;
            }
            td {
                width: 300px;
            }

            p {
                max-width: 800px;
            }

            pre {
                background-color: white;
            }
            
        </style>
    </head>
<body>
    <h1>Expanding Universe Thought Experiment</h1>
    <p>
        Imagine you shoot a laser beam into space, and there is a target placed every 500 million light years from you.
    </p>

    <p>
        In a static universe, the laser beam will reach the first target in 500 million years, the second target after another 500 million years, and so on. 
    </p>

    
    <p>
        But what about in an expanding universe? Because of the expansion of space, the targets will move away from you. 
        It will take more than 500 million years to reach the first target. 
    </p>


    <p>
        To calculate how long it would take the laser beam to reach each target, I wrote this little program. You can see the source below.
    </p>

    
<button id="startButton">Start</button> <button id="pauseButton">Pause</button>
<div id="canvases"></div>

<table>
    <tbody id="resultsTable">
        <tr>
            <td>Target (billion light years)</td>
            <td>Time to Reach (billion years)</td>
        </tr>
    </tbody>
</table>


<h3>Program Code</h3>
<script src="https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js"></script>
<pre class="prettyprint">
    // the unit for distance is 1 million light years
    // the unit for time is 1 million years

    // light moves 1 million light years in 1 million years
    c = 1

    // Hubble's Constant
    // this value let's light hit the target at 13.8 billion light years 
    // after it's moved to 46.5 billion years away
    H = 0.000051

    // make the targets, 
    // place them 500 million light years apart
    // up to 20 billion light years away
    var targets = []
    for (var i = 500; i <= 20000; i += 500) {
        targets.push({
            start: i,
            x: i
        })
    }


    // you are at 0, with your laser
    var photon_x = 0
    var t = 0
    var nextTarget = 0

    // only go for 100 billion years
    while (t < 100000) {
        t++ 

        // move the photon at a velocity of c
        photon_x = photon_x + c

        // move the targets at a velocity of its comoving distance * H
        for (var i = 0; i < targets.length; i++) {
            targets[i].x = targets[i].x + targets[i].start * H
        }

        // if the photon has reached a target, log it, and wait for the next one
        if (targets[nextTarget].x <= photon_x) {
            console.log("Target " + targets[nextTarget].start + " reached at t = " + t)
            nextTarget++
        }
    }

    console.log("Done")

</pre>

<script>

var c = 1

var zoom = 0.01
var wait = 0

var models = [
    {
        name: "Static",
        color: "red", 
        photon: {x: 0},
        next: function () {
            this.photon.x += c
        }
    },
    {
        name: "Expanding",
        color: "green", 
        H: 0.000051,
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                //this is proper distance, don't use this
                //this.targets[i].x += this.targets[i].x * this.H

                //this is comoving distance, us this
                this.targets[i].x += this.targets[i].start * this.H
            }
        },
        log: true
    }
]


models.forEach(model => {

    var div = document.createElement("div")
    div.innerHTML = model.name
    canvases.appendChild(div)

    if (model.H) {
        div.innerHTML += ": H = "
        var hIinput = document.createElement("input")
        hIinput.value = model.H
        div.appendChild(hIinput)

        hIinput.onchange = e => {
            model.H = parseFloat(hIinput.value)
        }
    }

    model.canvas = document.createElement("canvas")
    model.ctx = model.canvas.getContext("2d")
    model.nextTarget = 0

    model.canvas.width = 1800
    model.canvas.height = 60
    canvases.appendChild(model.canvas)

    model.targets = []
})

// make a target every 500 million light years until 20 billion
for (var i = 500; i <= 20000; i += 500) {
    var tr = document.createElement("tr")
    resultsTable.appendChild(tr)
    
    var td = document.createElement("td")
    td.innerHTML = i/1000
    tr.appendChild(td)

    var target
    models.forEach(model => {
        target = {
            label: i / 1000, 
            start: i,
            x: i,
            tdX: document.createElement("td"),
            tdT: document.createElement("td"),
        }

        target.tdX.style.color = model.color
        target.tdT.style.color = model.color
        target.tdT.innerHTML = "-"
        
        if (model.log) {
            //tr.appendChild(target.tdX)
            tr.appendChild(target.tdT)
        }

        model.targets.push(target)
    })
}




function draw(ctx, exp) {

    ctx.fillStyle = "black"
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

    for (var i = 0; i < exp.targets.length; i++) {
        ctx.fillStyle = exp.targets[i].hit ? exp.color : "#888888"
    
        ctx.fillRect(exp.targets[i].x * zoom, 0, 1, ctx.canvas.height)
        ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

        if (exp.targets[i].hit) {
            //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            //ctx.fillText(exp.targets[i].hit / 1000, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
        }
    }

    ctx.fillStyle = "yellow"
    ctx.fillRect(exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
}

function drawGraph() {

    ctxG.fillStyle = "black"
    ctxG.fillRect(0, 0, graph.width, graph.height)

    for (var m = 0; m < models.length; m++) {
        ctxG.fillStyle = models[m].color
        for (var i = 0; i < models[m].targets.length; i++) {
            if (models[m].targets[i].hit) {
                ctxG.fillRect(models[m].targets[i].label * 1000 * zoom, graph.height - models[m].targets[i].hit / 100, 5, 5)
            }
        }
    }
}

var t = 0
var paused = true

function start() {
    models.forEach(model => {
        model.photon.x = 0
        model.nextTarget = 0
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
            target.tdT.innerHTML = "-"
        })
    })

    paused = false
    t = 0
}

var runHandle = setInterval(() => {
    for (var ii = 0; ii < 100; ii++) {
        
        if (paused || t >=  100000000) return
        t++

        for (var m = 0; m < models.length; m++) {
                models[m].next()
                
                var nextTarget = models[m].targets[models[m].nextTarget] 
                if (nextTarget) {
            
                if (nextTarget.x <= models[m].photon.x) {
                    nextTarget.hit = t
                    nextTarget.tdX.innerHTML = Math.trunc(nextTarget.x) / 1000
                    nextTarget.tdT.innerHTML = t / 1000
                    
                    models[m].nextTarget++
                }
            }
        }
    }
}, wait)


setInterval(() => {
    for (var m = 0; m < models.length; m++) {
        draw(models[m].ctx, models[m]) 
    }

    //drawGraph()
}, 1000 / 60)

pauseButton.onclick = e => paused = !paused
startButton.onclick = start
</script>




