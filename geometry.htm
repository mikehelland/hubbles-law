<!DOCTYPE html>
<html>
    <head>
        <meta property="og:image" content="https://mikehelland.github.io/hubbles-law/img/supernovae-all.png"/>
        <meta property="og:description" content="1 + z = (1 + D/L)^2"/>
        <meta property="og:title" content="The Redshift-Distance Relation"/>
        <meta property="og:url" content="https://mikehelland.github.io/hubbles-law/"/>
        <style>
            body {
                background-color: #CCCCCC;
                color:black;
            }
            .maintext {
                background-color: white;
                max-width: 900px;
                font-family: Arial, Helvetica, sans-serif;
                padding: 15px;
                margin:auto;
            }

            .pimg  {
                text-align: center;
            }

            li code, p code {
                background-color: #EEEEEE;
                padding:2px;
                font-weight: bold;
            }

            details {
                border:1px solid #eeeeee;
                margin: 6px;
                padding: 16px;
            }

            summary {
                font-weight: bold;
                cursor: pointer;
            }

            td {padding: 10px;}

        </style>
    </head>

    <body>
        <img style="display: none;" id="e_x_arrow" src="img/e_x_arrow.png">
        <img style="display: none;" id="e_t_arrow" src="img/e_t_arrow.png">
        <img style="display: none;" id="supernova" src="img/supernova.png">
        <!--https://spaceplace.nasa.gov/supernova/en/supernova1.en.jpg-->

        <div class="maintext">

            <h1>Hubble's Constant and the Geometry of Time</h1>


            <h2>Observation</h2>

            <p>
                Hubble's constant, \(H_0\), is the expansion rate of the universe. The most direct pieces of evidence for the expansion of space are the 
                redshifts in light from distant galaxies, and the time dilation of distant supernovae. Light is redshifted
                when its wavelength increases. So the observations include a strethching of time, and a stretching of space. 
            </p>

            <p class="pimg"><canvas width="400" height="350" id="expandingspace"></canvas></p>

            <p>Light, an electromagnetic wave, would also be redshifted were the wave's period to increase somehow. Since the observed duraton of a 
                distant supernovae is stretched, then it would follow that the duration of all similarly distant phenomena would be equally stretched, 
                including the oscillations of electromagnetic waves emitted from that distance.  
            </p>
            
            <p>
                Consider the interpretation that the observed redshifts are a change in the electromagnetic wave's period. 
                The evidence could then be stated as: 
            </p>

            <ul>
                <li>The elongated period of an electromagnetic wave</li>
                <li>The elongated duration of supernovae</li>
            </ul>

            <p class="pimg"><canvas width="400" height="350" id="expandingtime"></canvas></p>

            <p>
                As a consequence of interpretting redshift like this, the two points of evidence appear fundamentally one-in-the-same, 
                with the suggestive hint that it has to do with some kind of dynamic of time, rather than of space.
            </p>

            <h2>Conjecture</h2>

            <p>
                The time dilation of supernovae is traditionally considered to be an effect of the expansion of space. Each photon coming from the supernova will 
                have to travel farther than the one before it, causing its observed duraton to be stretched.
            </p>

            <p>
                The hypothesis developed in this paper asks the reader to consider the possibility that what we are observing to happen, is actually happening. 
                Distant supernovae don't just appear time dilated; they are time dilated. The observed time dilation isn't an effect of expanding space, because 
                the expansion of space won't be necessary in a universe with time that possesses this dynamic characteristic.
                The conjecture can be summarized as <b>"the past is time dilated"</b>, and the hypothesis will be referred to as the 
                "time dilated past" (TDP) hypothesis. 
            </p>

            <p class="pimg"><canvas width="200" height="400" id="justtime"></canvas></p>

            <p>
                The next sections develop the conjecture into a testable hypothesis. Time will be given an unconventional geometrical treatment, from 
                which a redshift-distance relationship is derived. That relationship's predictions will be compared to the Pantheon+SH0ES dataset, 
                and it will be shown to out-perform the current standard model of cosmology's predictions over a broad range of cosmological parameters.
            </p>

            <p>The implications of a non-expanding cosmology are discussed once the hypothesis is developed and its fit to the data is analysed. 
                The possibility that this hypothesis may be relevant to the arrow of time in a fundamental way is also reviewed.
            </p>

            <h2>Hypothesis</h2>

            <h3>The reference frame</h3>

            <p>
                Imagine Isaac Newton has go-kart, and he places a red apple on the track every one second. If he's traveling at a consistent 
                1 m/s, the apples will be evenly spaced 1 m apart. 
            </p>

            <canvas width="800" id="moving"></canvas>

            <p>
                From Newton's frame of reference, the go-kart is not moving, and it appears as if the apples are being propelled backwards from it.
            </p>

            <canvas width="800" id="atrest"></canvas>
    
            <p>
                Both frames of reference are equally valid. If Newton was in a windowless enclosure on the go-kart, would he know if the kart is 
                in motion or at rest? Would he know if he was traveling in a straightline or along a gentle curve? 
            </p>

            <p>
                With those age-old questions in mind, think about the ticks of a stationary clock. On one hand, it is intuitive to think of
                the clock as moving forward in time, leaving behind a trail of spacetime events representing its ticks. The clock moves into the future, 
                leaving the past behind.  
            </p>

            <p>
                Alternatively, and perhaps less intuitively, consider the view from the clock's frame of reference: it is always in the present; 
                it never leaves and the future never arrives; events that occur in the present get pushed into the past, which itself is moving away from the present. 
                To visualize this view of time, it may be helpful to imagine the observer as being on a go-kart that is on a conveyor built moving against it.
            </p>

            <p>
                Is it possible to make a measurement or observation that would distinguish one noton of time from the other, or are they equivalent? 
                Is it possible that cosmic time dilation and redshift are evidence of one view over the other?
            </p>

            <h3>The geometry of time</h3>

            <p>
                To answer the questions of the previous section, and to provide the geometrical foundations for a hypothesis, the unusual step of 
                giving curvature to time will be taken. Note that this is not curvature in the Gaussian sense, which is a product of two principals 
                of curvature. Since time is one dimensional, it only has the opportunity to curve in one direction.
            </p>
            
            <p>
                The desired effect of the hypothesis is to time dilate the past, but the counter example of contracting the duration between events 
                is a simple introduction to the concept of curved time.
                So consider Newton in his go-kart, which is placed on a circular conveyor belt that matches his speed in the opposite direction.
            </p> 
            
            <canvas width="800" height="500" id="circle"></canvas>
            
            <p>
                Were Newton and the conyeor belt to take a break after an appropriate amount of time,  
                he would notice upon surveying the track that the distance to each apple from himself is no longer evenly space. 
                After half a rotation of the track, 
                the apple's begin to bunch together, and then start heading back toward Newton. When Newton resumes his driving, sure enough, 
                he'll see the apple's he had left behind coming toward him from the front.   
            </p>

            <canvas width="800" height="200" id="circle-d"></canvas>

            <p>Typically we would say that time is the real number line, or formally speaking, that \(t\in\mathbb{R}\). 
                Here we are presented with an alternative option, where our dimension of time is on the circumference of a 2-dimensional circle, or
                \(t\in\mathbb{S}^1\), where \( \mathbb{S}^1 = \{ (x, y) \in \mathbb{R}^2 : x^2 + y^2 = r^2 \} \).
            </p>

            <p>
                The distance along the curve is measured in r&theta;, but in the 2-d ambient space, distances are measured by the Pythagorean theorem, 
                which, given the angle &theta; between the two points on the circle we want the distance for, is:
            </p>
            
            <p>\[ d^2 = (r \cos(\theta) - 1)^2 + (r \sin(\theta))^2 \]</p>

            <p>
                With this, the goal is to induce a metric that preserves distance from the ambient space, which we could get with the following formula:
            </p>

            <p>\[ g_{ab}=\partial _{a}X^{\mu }\partial _{b}X^{\nu }g_{\mu \nu }\ \]</p>

            <p>where \( g_{\mu \nu } \) is the Euclidean metric. Well need for \( X^{0} = r \cos t\) and \( X^{1} = r \sin t\), which gives us:</p>

            <p>
                \[  g_{tt} = \partial_t \cos(t) \partial_t \cos(t) +  \partial_t \sin(t) \partial_t \sin(t) \]
                \[  g_{tt} = (- \sin t)^2 + (\cos t)^2  \]
            </p>

            <p>
                As mentioned before, this leads to a time contracted past, which is the opposite of what the evidence describes.
                To get the desired effect, let's make the track a hyperbola: 
            </p>
            
            <canvas width="800" height="500" id="hyperbola"></canvas>
            
            <p>
                Now in the ambient space, the more distant the events, the more spread out they become, which is observed as time dilation and redshift. 
            </p>

            <canvas width="800" height="200" id="hyperbola-d"></canvas>

            <p>The same reasoning applies as before, except now \( X^{0} = r \cosh t\) and \( X^{1} = r \sinh t\).
                The derivative of \( \cosh t\) is \( \sinh t\), which gives us:
            </p>

            <p>
                \[  g_{tt} = \partial_t \cosh(t) \partial_t \cosh(t) +  \partial_t \sinh(t) \partial_t \sinh(t) \]
                \[  g_{tt} = (\sinh t)^2 + (\cosh t)^2  \]
            </p>


            <script src="other/kart.js"></script>


            <p class="pimg"><img src="img/timecircle.png"></p>

            <p>
                But the distance in the ambient space (ambient time?) will be the Pythagorean theorem between the (x, y) coordinates, 
                shown underneath the circle, which is:
            </p>

            
            
            <p class="pimg"><img src="img/timehyperbola.png"></p>
            
            
            
            <p>
                It is important to note that the observer should always exist in the present, <i>t = 0</i>, in this spacetime. The desired effects only 
                occur from a frame of reference in the present.
            </p>
            
            <h2>The metric tensor</h2>

            <p>\[ ds^2 = - (e^{H_0t})^2 c^2 + dx^2 + dy^2 + dz^2 \]</p>

            <h2>Redshift, lookback time, and distance</h2>

            <p>\[ \frac{1}{1+z} = e^{H_0t} \]</p>

            <p>\[ t_L  = - \frac{1}{H_0} log(1+z) \]</p>

            <p>\[ d = \frac{z}{1+z} \frac{c}{H_0} \]</p>

            <h2>Distance modulus</h2>

            <h2>Observational data</h2>

            <p><img src="img/pantheonshoes70.png"></p>

            <p><img src="img/sse.png"></p>

            <h2>The arrow of time</h2>

            <p>
                Imagine a number line representing a dimension of space <i>x</i>. Say that every point on the line has a vector basis 
                <i>e<sub>x</sub> = 1</i>, like this:
            </p>

            <p><img src="img/aot1.png"></p>

            Let's point those up so they are easier to see.

            <p><img src="img/aot2.png"></p>

            <p><img src="img/aot3.png"></p>

            <p><img src="img/aot4.png"></p>


            <h2>Cosmological implications</h2>





            
            


<script>

    var graph = document.getElementById("expandingspace")
    var graph2 = document.getElementById("expandingtime")
    var graph3 = document.getElementById("justtime")
    var imgSN = document.getElementById("supernova")

    var t = 0

    setInterval(() => {
        drawSpacetime(graph)
        drawSpacetime(graph2, 1)
        drawTime(graph3)
        t++
    }, 1000 / 30)


    function drawSpacetime(graph, version) {
        var ctx = graph.getContext("2d")

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, graph.width, graph.height)

        var x0 = graph.width / 20
        var y0 = graph.height / 20
        ctx.strokeStyle = "White"
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.moveTo(0, y0)
        ctx.lineTo(graph.width, y0)
        ctx.stroke()
        ctx.beginPath()
        ctx.moveTo(x0, 0)
        ctx.lineTo(x0, graph.height)
        ctx.stroke()

        ctx.font = "12pt Sans"
        ctx.fillStyle = "white"
        ctx.fillText("Time", 22, graph.height - 20)
        ctx.textAlign = "right"
        ctx.fillText("Space", graph.width - 5, 14)

        var snStart = graph.height / 2 - 30
        ctx.drawImage(imgSN, graph.width / 3 - imgSN.width / 2, snStart - imgSN.height)

        var scale = Math.sin(t / 10) * 5
        ctx.fillStyle = "red"
        ctx.beginPath()
        ctx.arc(graph.width / 3, snStart + scale, 8, 0, Math.PI*2)
        ctx.arc(graph.width / 3, snStart - imgSN.height - scale, 8, 0, Math.PI*2)
        ctx.fill()
        
        ctx.font = "10pt Sans"
        ctx.fillStyle = "white"
        ctx.textAlign = "left"
        
        ctx.fillText("SN start", 8 + graph.width / 3, 4 + snStart)
        ctx.fillText("SN end", 8 + graph.width / 3, 4 + snStart - imgSN.height)

        drawUpArrow(ctx, graph.width / 3 - imgSN.width / 2 - 20, imgSN.height + 2 * scale, snStart + scale)
        
        var cosZoom = 9
        var cosStartX = graph.width * 3/4 
        var cosStartY = graph.height * 3/4 - 20
        
        ctx.strokeStyle = "white"
        ctx.lineWidth = 2
        ctx.translate(cosStartX - 4, cosStartY + 8)
        ctx.rotate(Math.PI / 4)
        ctx.beginPath()
        ctx.moveTo(cosZoom * -Math.PI*2, 0 - cosZoom)
        for (let i = -Math.PI*2; i < Math.PI*2; i+=0.1) {
            ctx.lineTo(cosZoom * i + scale, - cosZoom * Math.cos(i))
        }
        ctx.stroke()
        ctx.setTransform(1, 0, 0, 1, 0, 0)


        if (version === 1) {
            drawUpArrow(ctx, cosStartX - 70, 120 + 2 * scale, cosStartY + 60 + scale)
        }
        else {
            drawRightArrow(ctx, graph.width / 2 + 40 - scale, graph.width / 2 + 160 + 2 * scale, cosStartY + 70)
        }

        ctx.fillStyle = "blue"
        for (let i = -1; i < 2; i++) {
            ctx.beginPath()

            if (version === 1) {
                ctx.arc(cosStartX + i * 40, cosStartY + i * (40 + scale), 8, 0, Math.PI*2)
            }
            else {
                ctx.arc(cosStartX + i * (40 + scale), cosStartY + i * 40, 8, 0, Math.PI*2)
            }
            ctx.fill()
        }


    }

    function drawRightArrow(ctx, x1, x2, y) {
        ctx.lineWidth = 4
        ctx.strokeStyle = "yellow"
        ctx.fillStyle = "yellow"
        
        ctx.beginPath()
        ctx.moveTo(x1, y)
        ctx.lineTo(x2, y)
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(x2 - 10, y - 10)
        ctx.lineTo(x2 + 2, y)
        ctx.lineTo(x2 - 10, y + 10)
        ctx.closePath()
        ctx.fill()

        ctx.beginPath()
        ctx.moveTo(x1 + 10, y - 10)
        ctx.lineTo(x1 - 2 , y)
        ctx.lineTo(x1 + 10, y + 10)
        ctx.closePath()
        ctx.fill()
    }

    function drawUpArrow(ctx, x, l, y) {
        ctx.lineWidth = 4
        ctx.strokeStyle = "yellow"
        ctx.fillStyle = "yellow"
        
        ctx.beginPath()
        ctx.moveTo(x, y)
        ctx.lineTo(x, y - l)
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(x - 10, y - l + 12)
        ctx.lineTo(x , y - l - 2)
        ctx.lineTo(x + 10, y - l + 12)
        ctx.closePath()
        ctx.fill()

        ctx.beginPath()
        ctx.moveTo(x - 10, y - 12)
        ctx.lineTo(x , y + 2)
        ctx.lineTo(x + 10, y - 12)
        ctx.closePath()
        ctx.fill()
    }

    function drawTime(graph) {
        var ctx = graph.getContext("2d")

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, graph.width, graph.height)

        var x0 = graph.width / 2
        var y0 = graph.height / 20
        ctx.strokeStyle = "White"
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.moveTo(x0, 0)
        ctx.lineTo(x0, graph.height)
        ctx.stroke()

        ctx.font = "12pt Sans"
        ctx.fillStyle = "white"
        ctx.fillText("Time", x0 + 4, 20)
        
        var snStart = graph.height / 2 - 30
        ctx.drawImage(imgSN, x0 - imgSN.width / 2, snStart - imgSN.height)

        var scale = Math.sin(t / 10) * 5
        
        ctx.fillStyle = "red"
        ctx.beginPath()
        ctx.arc(x0, snStart + scale, 8, 0, Math.PI*2)
        ctx.arc(x0, snStart - imgSN.height - scale, 8, 0, Math.PI*2)
        ctx.fill()
        
        ctx.font = "10pt Sans"
        ctx.fillStyle = "white"
        ctx.textAlign = "left"
        
        ctx.fillText("SN start", 8 + x0, 4 + snStart)
        ctx.fillText("SN end", 8 + x0, 4 + snStart - imgSN.height)

        drawUpArrow(ctx, graph.width / 2 - imgSN.width / 2 - 20, imgSN.height + 2 * scale, snStart + scale)
        
        var cosZoom = 9
        var cosStartX = graph.width / 2
        var cosStartY = graph.height * 3/4 - 20
        
        ctx.strokeStyle = "white"
        ctx.lineWidth = 2
        ctx.translate(cosStartX - 8, cosStartY)
        ctx.rotate(Math.PI / 2)
        ctx.beginPath()
        ctx.moveTo(cosZoom * -Math.PI*2, 0 - cosZoom)
        for (let i = -Math.PI*2; i < Math.PI*2; i+=0.1) {
            ctx.lineTo((cosZoom) * i + scale * Math.sign(i), -16 + cosZoom * Math.cos(i))
        }
        ctx.stroke()

        ctx.fillStyle = "blue"
        for (let i = -1; i < 2; i++) {
            ctx.beginPath()
            ctx.arc(cosZoom * Math.PI * 2 * i + i * scale, -8, 8, 0, Math.PI*2)
            ctx.fill()
        }

        ctx.setTransform(1, 0, 0, 1, 0, 0)


        drawUpArrow(ctx, graph.width / 2 - imgSN.width / 2 - 20, 120 + 2 * scale, cosStartY + 60 + scale)
        
    }



    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']]
        }
    };
</script>

<script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>
