<!DOCTYPE html>
<html>
    <head><style>
        body {background-color: #808080;}
    </style></head>

<body>

    <span id="dxCaption">50</span>
    <input id="dxInput" type="range"  min="10" max="250" value="50">
    
    <br>
    <canvas height="700" width="900" id="canvas"></canvas>

<script>

    const pi = Math.PI
    const sin = Math.sin
    const cos = Math.cos
    var canvas = document.getElementById("canvas")
    var ctx = canvas.getContext("2d")

    var w = canvas.width
    var h = canvas.height

    const pc2ly = 3.261564
    const pc2km = 3.08e19

    var L // Luminosity of a box
    var Lsol = 3.846e26
    var suns = 2e11 // 200 billion suns in a galaxy

    var R = 140

    // in meters
    var Rm = R/10 / pc2ly * pc2km * 1000 * 1000

    const sbc = 5.67e-8 //Stefan-Boltzman constant

    var temp = () => {
        return (L / (4 * pi * sbc * Rm**2))**(1/4)
    }


    // incremental change in radius to test
    var dx = 50

    var testCircle
    var boxes0 = fillSphere(0, 0, 0, R) 


    dxInput.onchange = () => {
        dx = parseFloat(dxInput.value)
        dxCaption.innerHTML = dx
    
        boxes0 = fillSphere(0, 0, 0, R) 

        update()
    
    }

    update()

    function update() {
        canvas.width = canvas.width
        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, w, h)

        ctx.translate(w / 2, h / 2)

        var inBoxes = 0
        var outBoxes = 0
        var inGradient = 0
        var outGradient = 0
        var onBoxes = 0

        drawCircle(0, -R)
        drawCircle(-R*1.5, R)
        drawCircle(R*1.5, R)

        
        //for (var ib = boxes0.data.length - 1; ib >= 0; ib--) {
        for (var ib = 0; ib < boxes0.data.length; ib++) {
            testCircle = fillSphere(boxes0.data[ib].x, boxes0.data[ib].y, 0, R)
            
            inBoxes += testCircle.inBoxes
            outBoxes += testCircle.outBoxes
            onBoxes += testCircle.onBoxes
            
            drawBoxes(testCircle)

            continue
            for (var jb = 0; jb < boxes0.data[ib].length; jb++) {
                testCircle = fillSphere(boxes0.data[ib][jb].x, boxes0.data[0][jb].y, 0, R)
                
                // don't draw if we're tiny
                if (dx >= 1) {
                    drawBoxes(testCircle)
                }
            }
        }

        ctx.translate(-w / 2, -h / 2)

        ctx.fillStyle = "white"
        ctx.globalAlpha = 1
        ctx.font = "20pt Courier"
        ctx.fillStyle = "white"
        ctx.fillText("inBoxes: " + inBoxes, 
            30, 20)
        ctx.fillText("outBoxes: " + outBoxes, 
            30, 50)
        ctx.fillText("%: " + (outBoxes / (outBoxes + inBoxes) * 100), 
            30, 80)
        ctx.fillText("onBoxes: " + (onBoxes), 
            30, 110)


        L = onBoxes


    }

    function drawCircle(x, y) {

        ctx.lineWidth = 3
        ctx.strokeStyle = "blue"
        ctx.beginPath()
        ctx.arc(x, y, R, 0, Math.PI * 2)
        ctx.stroke()

    }

    var dbi, dbj
    function drawBoxes(sphere) {
        ctx.fillStyle = "white"
        
        //ctx.translate(circle.x, circle.y)
        
        for (dbi = 0; dbi < sphere.data.length; dbi++) {
            //continue            
            ctx.fillStyle = sphere.data[dbi].on ? "green" : sphere.data[dbi].in ? "white" : "red"
            ctx.globalAlpha = sphere.data[dbi].alpha
            ctx.fillRect(
                sphere.data[dbi].x - dx/2, 
                -R + sphere.data[dbi].y - dx/2,
                dx, dx)

            ctx.fillRect(
                R*1.5 + sphere.data[dbi].x - dx/2, 
                R + sphere.data[dbi].z - dx/2,
                dx, dx)

            ctx.fillRect(
                -R*1.5 + sphere.data[dbi].y - dx/2, 
                R + sphere.data[dbi].z - dx/2,
                dx, dx)

        }
                
        //ctx.translate(-circle.x, -circle.y)
    }

    function fillSphere(x, y, z) {
        var boxes = []
        var origin = {x, y, z}
    
        var output = {x, y, z, data: boxes, circles: []}
    
        output.inBoxes = 0
        output.outBoxes = 0
        output.onBoxes = 0
    

        var line = 2 * pi * R
        var boxCount = Math.floor(R - dx/2) / dx //line / dx
        
        fillCircle(x, y, 0, R, origin, output)

        var ir = dx

        while (ir <=  R) {

            var angle = Math.asin(ir / R)
            line = R * cos(angle)

            fillCircle(x, y, ir, line, origin, output)
            fillCircle(x, y, -ir, line, origin, output)
            
            ir += dx
        }


        return output
    }

    function fillCircle(x, y, z, r, origin, output) {
        var ir = r

        var x0 = -x
        var y0 = -y

        var ia
        
        while (ir >= 0) {

            //var boxes = []

            // find the circumfrence
            var line = 2 * pi * ir

            // find how many boxes fit in the cirucumference
            boxCount = line / dx
            boxAngle = 2 * pi / boxCount

            // place boxes along the circumference
            var angle = 0
            
            for (ia = 0; ia < boxCount; ia++) {
                var box = {
                    r: ir, 
                    angle: ia * boxAngle, 
                    alpha: 1 - ir / R, 
                    x: x + ir * cos(ia * boxAngle),
                    y: y + ir * sin(ia * boxAngle),
                    z
                }
                
                var rr = ((box.x - origin.x)**2 +
                        (box.y - origin.y)**2 +
                        (box.z - origin.z)**2)**0.5
                
                box.alpha = 1 * (1 - rr/R) ** 2 // (4 * pi * rr*2)

                var l = ((box.x)**2 + (box.y)**2 + (box.z)**2)**0.5
                box.in = l <= R
                box.on = Math.abs(l - R) < dx / 2

                if (box.in) output.inBoxes++
                else output.outBoxes++
                
                if (box.on) {
                    output.onBoxes += box.alpha
                    output.data.push(box)
                }
            }
             
            ir -= dx

        }

    }


</script>

</body>


</html>