<!DOCTYPE html>
<html>
<head>
<style>
    input[type=number] {font-size: 125%; width: 100px;}
    body {font-size: 125%;}
    #zparams {
        position:absolute;
        top:520px;
        left:350px;
    }
</style>
</head>
<body>

    <form name="form">
    <p>
    hypothesis (black):
    <br> 
    H<sub>0</sub>: <input type="number" value="73" step="0.5" id="H0h">
    </p>
    <p id="params">
    &Lambda;CDM: 
    <br>
    H<sub>0</sub>: <input type="number" value="73" step="0.5" id="H0">
    &Omega;<sub>M</sub>: <input type="number" min="0" value="0.0" step="0.05" id="Omega_M">
    &Omega;<sub>&Lambda;</sub>: <input type="number" min="0" value="0.0" step="0.05" id="Omega_L">
    </p>    
    </form>

    
    <canvas id="canvas" width="800" height="500"></canvas>

    <p>
        Show 2nd derivative: <input type="checkbox" checked="true" id="show-2nd">
    </p>

    <p>The hypothesis being tested is:</p>

    <img src="../presentations/redblue/z-distance-equation.png">

    <p><a href="../presentations/redblue/redblue.htm">Read more...</a></p>

    <p>JavaScript Cosmology Calculator by <a href="http://www.bo.astro.it/~cappi/cosmotools" target="_blank">Alberto Cappi</a>

    <script>
        var data
        const c = 299792.458
        const pc2ly = 3.261564
        
        form.H0h.onchange = e => drawCanvas()        
        form.H0.onchange = e => drawCanvas()
        form.Omega_L.onchange = e => drawCanvas()
        form.Omega_M.onchange = e => drawCanvas()
        

        var maxZ = 3
        var maxD = 40
        var data = []
        var dd = 0.005
        for (var i = 0; i <= maxZ; i=i+dd) {
            data.push({z: i})
        }

        var show2nd = document.getElementById("show-2nd")
        show2nd.onchange = e => drawCanvas()

        var zoomY = 15
        drawCanvas()

        function drawCanvas() {
            console.log("drawing")
            H0h = Number(form.H0h.value);
            H0 = Number(form.H0.value);
            Omega_M = Number(form.Omega_M.value);
            Omega_L = Number(form.Omega_L.value);

            var ctx = canvas.getContext("2d")
            var h = canvas.height
            var w = canvas.width
            canvas.width = w
            ctx.translate(0, h /2 - 10)

            ctx.font = "16px sans-serif"
            ctx.fillStyle = "black"
            ctx.fillText("z", w - 10, -2)

            for (var i = 0; i <= maxZ; i=i+0.5) {
                ctx.fillText(Math.round(i*10)/10, i / maxZ * w, -2)
            }
            for (var i = -maxD; i <= maxD; i=i+5) {
                ctx.fillText(i, 0, -  i * zoomY)
            }
            //ctx.fillText("distance (lookback time x c)", 28, 18)
            //ctx.fillText("billion light years", 28, 38)

            ctx.beginPath()
            ctx.lineWidth = 1
            ctx.strokeStyle = "black"
            ctx.moveTo(0, 0)
            ctx.lineTo(w, 0)
            ctx.stroke()


            ctx.beginPath()
            ctx.lineWidth = 10
            ctx.strokeStyle = "red"
            ctx.moveTo(0, h)

            var lastdp
            data.forEach(dp => {
                dp.dc = zToD(dp.z) * pc2ly / 1000
                ctx.lineTo(w * dp.z / maxZ, h - h * dp.dc / maxD)
                if (lastdp) {
                    lastdp.slope = (dp.dc - lastdp.dc) / dd
                }
                lastdp = dp
            })
            ctx.globalAlpha = 0.4
            //ctx.stroke()

            ctx.globalAlpha = 1
            ctx.lineWidth = 2
            ctx.strokeStyle = "red"
            ctx.beginPath()
            ctx.moveTo(0, - data[0].slope * zoomY)

            lastdp = undefined
            data.forEach(dp => {
                if (lastdp) {
                    lastdp.slope2 = (dp.slope - lastdp.slope) / dd
                }
                ctx.lineTo(w * dp.z / maxZ, - dp.slope * zoomY)
                lastdp = dp
            })
            ctx.stroke()

            ctx.textAlign = "right"
            ctx.fillText("Slope of green line", w - 10, - 74)

            if (show2nd.checked) {

                ctx.strokeStyle = "blue"
                ctx.beginPath()
                ctx.moveTo(0, - data[0].slope2 * zoomY)

                data.forEach(dp => {
                    ctx.lineTo(w * dp.z / maxZ, - dp.slope2 * zoomY)
                })
                ctx.stroke()

                ctx.fillText("Slope of red line", w - 10,  54)
            
            }

            ctx.font = "30px sans-serif"
            ctx.fillStyle = "#111111"
            //ctx.fillText("Past", w - 90, -h/2+54)
            ctx.font = "50px sans-serif"
            //ctx.fillText("‚Üê", w/2, -h/2+72)
            



        }



    // from http://www.bo.astro.it/~cappi/cosmotools

    /* Written by Alberto Cappi (2000); updated November 2005.
    / E-mail: alberto.cappi@oabo.inat.it
    / Cosmological formulae
     */

    // -------------------------------------------- 

    function fun(v1, Omega_M, Omega_L, Omega_k) {
        v2 = v1 * v1
        v3 = v1 * v1 * v1
        f = Math.sqrt(Omega_M * v3 + Omega_k * v2 + Omega_L)
        return 1. / f
    };

    function simpson(x0, x2) {
        h = (x2 - x0) / 2.
        x1 = x0 + h
        igr = h * (fun(x0, Omega_M, Omega_L, Omega_k) + 4. * fun(x1, Omega_M, Omega_L, Omega_k) + fun(x2, Omega_M, Omega_L, Omega_k)) / 3.
        return igr
    };

    function sumint(z1) {
        integrale = 0, zone = 1, deltaz = 0.001
        while (zone <= (z1 - deltaz)) {
            zini = zone
            zfin = zone + deltaz
            integrale += simpson(zini, zfin);
            zone += deltaz
        }
        return integrale
    };

    // -------------------------------------------- 


    function lookfun(v1, Omega_M, Omega_L, Omega_k) {
        v2 = v1 * v1
        v3 = v1 * v1 * v1
        f = v1 * Math.sqrt(Omega_M * v3 + Omega_k * v2 + Omega_L)
        return 1. / f
    };

    function timeint(z1start, z1end) {
        s = 0, a = z1start, b = z1end
        s = 0.5 * (b - a) * (lookfun(a, Omega_M, Omega_L, Omega_k) + lookfun(b, Omega_M, Omega_L, Omega_k))
        n = 2
        while (n <= 11) {
            n2 = n - 2
            it = Math.pow(2, n2)
            tnm = it
            del = (b - a) / tnm
            x = a + 0.5 * del
            sum = 0.
            j = 1
            while (j <= it) {
                sum = sum + lookfun(x, Omega_M, Omega_L, Omega_k)
                x = x + del
                j += 1
            }
            s = 0.5 * (s + (b - a) * sum / tnm)
            n += 1
        }
        return s
    };

    // --------------------------------------------

    function sinh(x) {
        s = (Math.exp(x) - Math.exp(-x)) / 2.
        return s
    };

    function zToD(z) {
        // From redshift to distance

        z1 = 1. + z;
        h = H0 / 100.;
        Tnorm = 9.77810945 / h;
        cvel = 299792.458
        ch0 = cvel / H0;
        pig = 3.1415926536;
        rad = pig / 180.;
        q0 = Omega_M / 2. - Omega_L;
        Omega_k = 1. - Omega_M - Omega_L;

        age = (timeint(1., 50.)) * Tnorm;

        if (Omega_L > 0. && Omega_k == 0.) {
            DC = ch0 * sumint(z1);
            DL = DC * z1
        }
        if (Omega_L > 0. && Omega_k < 0.) {
            curv = Math.sqrt(-Omega_k)
            r = sumint(z1);
            DC = ch0 * Math.sin(r * curv) / curv
            DL = DC * z1
        }
        if (Omega_L > 0. && Omega_k > 0.) {
            curv = Math.sqrt(Omega_k)
            r = sumint(z1);
            DC = ch0 * sinh(r * curv) / curv
            DL = DC * z1
        }
        if (Omega_L == 0. && q0 > 0) {
            q0sq = q0 * q0
            a = 1. - q0 + q0 * z + (q0 - 1.) * (Math.sqrt(2. * q0 * z + 1.))
            DL = ch0 * a / q0sq
            DC = DL / z1
        }
        if (Omega_L == 0. && q0 == 0) {
            DL = ch0 * z * (1. + z / 2.)
            DC = DL / z1
        }
        // Lookback time
        lookback = timeint(1., z1) * Tnorm
        // Angular distance
        DA = DL / (z1 * z1)
        // Lunghezza in primi corrispondente a 1 Mpc.
        angle = (60. / rad) * z1 * z1 / DL;
        // Length in Mpc corresponding to 1 degree on the sky
        R = rad * DL / (z1 * z1);

        // Display result in the form.
        /*
        form.q0.value = q0.toFixed(2);
        form.Omega_k.value = Omega_k.toFixed(2);
        form.dlum.value = DL.toFixed(1);
        form.dcom.value = DC.toFixed(1);
        form.dang.value = DA.toFixed(1);
        form.lsep.value = R.toFixed(1);
        form.asep.value = angle.toFixed(1);
        form.look.value = lookback.toFixed(1);
        form.age.value = age.toFixed(1);
        */
       return DC
    }









    </script>