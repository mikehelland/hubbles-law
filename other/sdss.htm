<!DOCTYPE html>
<html>
    <head>
        <style>
            #canvas {height:400px; width: 400px;}
        </style>
    </head>
    <body>
        <p>The <a href="../index.htm">alternative model</a> predicts that the number of galaxies in each volume should be equal.</p>
        <hr>
        

        Divide the volume by <span id="divideByCap"></span>
        <input type="range" min="1" max="200" id="divideBy">

        <br>
        Absolute magnitude threshold <span id="magnitudeCap"></span>
        <input type="range" min="20" max="30" id="magnitudeInput">


        <hr>
        <div style="position: relative;">
            <select id="catalog" style="position: absolute; top:10px; left: 60px;">
                <option value="select">Select a quasar/AGN catalog...</option>
                <!--<option value="1996">Quasars and Active Galactic Nuclei (7th Ed., 1996)</option>
                <option value="2010">Quasars and Active Galactic Nuclei (13th Ed., 2010)</option>
                <option value="milli">The Million Quasars (Milliquas) catalogue, version 8 (Flesch, 2023)</option>-->
                <option value="sdss">SDSS DR16Q_v4</option>
            </select>

            <select id="cosmology" style="position: absolute; top:10px; left: 290px;">
                <option value="LCDM676">LCDM H<sub>0</sub> = 67.6</option>
                <option value="LCDM73">LCDM H<sub>0</sub> = 73.0</option>
                
            </select>


            <canvas id="graph" width="1200" height="400"></canvas>

        </div>

        <hr>
        <div style="display: flex;  max-height: 400px;">
            <canvas id="canvas" width="800" height="800"></canvas>
            <pre style="padding-left: 80px; font-size: 20pt; overflow: scroll;" id="outputDiv"></pre>
        </div>

        <hr>

        <!--<ul>
            <li>
                <a href="https://cdsarc.cds.unistra.fr/ftp/VII/188/">Quasars and Active Galactic Nuclei</a> 7th Ed.  (Veron+ 1996)
            </li>
            <li>
                <a href="https://cdsarc.cds.unistra.fr/ftp/VII/258/">Quasars and Active Galactic Nuclei</a> 13th Ed.  (Veron+ 2010)
            </li>
            <li>
                <a href="https://cdsarc.cds.unistra.fr/ftp/VII/294/">The Million Quasars (Milliquas) catalogue</a> version 8 (Flesch, 2023)
            </li>
            
        </ul>-->

        
        <script>
            var agn = []
            var qso = []

            var maxZ = 1
            var maxY

            catalog.onchange = () => {
                if (catalog.value !== "select") {
                    drawV()

                    if (!ctlgs[catalog.value]) {
                        download(catalog.value)
                    }
                    else {
                        binData(catalog.value)
                    }
                }
            }

            var magnitude = -parseFloat(magnitudeInput.value)
            magnitudeCap.innerHTML = magnitude

            magnitudeInput.onchange = () => {
                magnitude = -parseFloat(magnitudeInput.value)
                magnitudeCap.innerHTML = magnitude

                drawV()
                binData("sdss")
            }

            cosmology.onchange = () => {
                drawV()
                binData("sdss")

            }

            var ctlgs = {}

            function download(ctlg) {
                
                fetch("https://mikehelland.github.io/hubbles-law/data/" + ctlg).then(res => res.text()).then(res => {
                    var qso = []
                    var _qso = res.split("\n")
                    for (var i = 0; i < _qso.length; i++) {
                        if (_qso[i].trim()) {
                            var rows = _qso[i].split(",")
                            var z = parseFloat(rows[0])
                            var M67 = parseFloat(rows[1])
                            var M73 = parseFloat(rows[2])
                            qso.push([z, M67, M73])
                            
                            if (z > maxZ) {
                                maxZ = z
                            }
                        }
                    }

                    ctlgs[ctlg] = {agn, qso}

                    binData(ctlg)
                })

            }


            divideBy.onchange = () => {
                N = 1 * divideBy.value
                divideByCap.innerHTML = N
                drawV()

                if (catalog.value !== "select") {
                    binData(catalog.value)
                }
            }


            const pi = Math.PI
            const kpi = 4 / 3 * pi

            var R = 13.8

            var zoom = 760 / R

            var V = kpi * R**3

            var N = 100
            divideBy.value = N
            divideByCap.innerHTML = N

            var Vs = []

            var ctxc = canvas.getContext("2d")

            var drawV = function () {
                canvas.width = canvas.width
                ctxc.font = "bold 20pt Arial"

                //ctx.fillText(Math.round(V), 20, 20) 

                ctxc.translate(canvas.width / 2, canvas.height)

                ctxc.beginPath()
                ctxc.arc(0, 0, zoom * R, 0, pi * 2)
                ctxc.stroke()

                ctxc.beginPath()
                ctxc.arc(0, 0, 1, 0, pi * 2)
                ctxc.stroke()

                var lastr = 0
                var lastz = 0

                ctxc.textAlign = "right"

                Vs = []
                var output = ""

                for (var i = 0; i < N; i++) {
                    var Vn = V/N * (1 + i)
                    var r = (Vn / kpi)**(1/3)
                    var z = 1 / (1-r/R) - 1

                    var cap = z.toFixed(2)
                    if (z > 1e12) {
                        z = Infinity
                        cap = "âˆž"
                    }
                                    
                    Vs.push({Vn: V/N, r, z, agn: 0, qso: 0})

                    ctxc.beginPath()
                    ctxc.arc(0, 0, zoom * r, 0, pi * 2)
                    ctxc.stroke()

                    ctxc.fillText(cap, 0, 4 + -zoom * (lastr + (r - lastr) / 2)) 

                    output += lastz.toFixed(2) + " < z < " + cap  + "\n" 

                    lastr = r
                    lastz = z

                }

                console.log(Vs)

                outputDiv.innerHTML = output
            }

            var total
            var binData = function (ctlg) {
                if (!ctlgs[ctlg]) return 

                total = 0
                var qso = ctlgs[ctlg].qso

                var iM = cosmology.selectedIndex + 1

                for (i = 0; i < qso.length; i++) {
                    
                    if (qso[i][0] >= 2.1 || qso[i][iM] > magnitude) continue

                    for (iz = 0; iz < Vs.length; iz++) {
                        if (qso[i] && Vs[iz].z >= qso[i][0]) {
                            Vs[iz].qso++
                            total++
                            break
                        }
                    }
                }

                drawG()

            }

            drawV()
            drawG()


            function drawG() {
                var ctx = graph.getContext("2d")

                graph.width = graph.width
                ctx.translate(40, graph.height - 20)

                var maxBin = 0
                for (var i = 0; i < Vs.length; i++) {
                    if (Vs[i].z > maxZ) {
                        maxBin = i + 1
                        break
                    }
                }
                console.log(maxBin)

                var maxY = 0
                for (var i = 0; i < Vs.length; i++) {
                    if (Vs[i].agn + Vs[i].qso > maxY) {
                        maxY = Vs[i].agn + Vs[i].qso
                    }
                }
                
                var xz = (graph.width - 20) / (maxBin + 1)
                var yz = (graph.height - 50) / maxY
                console.log(yz)
                if (isNaN(yz) || yz === Infinity) yz = 0

                ctx.strokeRect(0, 0, graph.width, -graph.height)

                ctx.textAlign = "right"
                ctx.fillText("Redshift z", graph.width - 60, -2)

                for (var i = 0; i < maxY; i += 2000) {
                    ctx.fillText(Math.round(i/1000) +"K", -4, 4 + i * -yz)
                }

                ctx.textAlign = "center"
                
                for (i = 0; i < maxBin; i++) {
                    ctx.fillStyle = "black"
                    if (xz > 40 || i%2 === 0) {
                        ctx.fillText(Vs[i].z.toFixed(2), (i + 1) * xz, 14)
                    }

                    var h = 
                    ctx.fillStyle = "red"
                    ctx.fillRect(i * xz + 2, 0, xz - 4, (Vs[i].qso + Vs[i].agn) * -yz)

                    ctx.fillStyle = "blue"
                    ctx.fillRect(i * xz + 2, 0, xz - 4, -Vs[i].qso * yz)
                }

            }
        </script>


    </body>
</html>