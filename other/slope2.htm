<!DOCTYPE html>
<html>
<head>
<style>
    input[type=number] {font-size: 125%; width: 100px;}
    body {font-size: 125%;}
    #zparams {
        position:absolute;
        top:520px;
        left:350px;
    }
</style>
</head>
<body>

    <div id="graphs">

    </div>

    <form name="form">
    <p>
    hypothesis (black):
    <br> 
    H<sub>0</sub>: <input type="number" value="73" step="0.5" id="H0h">
    </p>
    <p id="params">
    &Lambda;CDM: 
    <br>
    H<sub>0</sub>: <input type="number" value="73" step="0.5" id="H0">
    &Omega;<sub>M</sub>: <input type="number" min="0" value="0.0" step="0.05" id="Omega_M">
    &Omega;<sub>&Lambda;</sub>: <input type="number" min="0" value="0.0" step="0.05" id="Omega_L">
    </p>    
    </form>

    
    <canvas id="canvas" width="800" height="500"></canvas>

    <p>
        Show 2nd derivative: <input type="checkbox" checked="true" id="show-2nd">
    </p>

    <p>The hypothesis being tested is:</p>

    <img src="../presentations/redblue/z-distance-equation.png">

    <p><a href="../presentations/redblue/redblue.htm">Read more...</a></p>


    <script src="flrw.js"></script>
    
    <script>
        var data
        const c = 299792.458
        const pc2ly = 3.261564

        var zoomY = 0.5
        var maxZ = 10
        var maxD = 80

        var models = []

        //addModel(0, 1, 0)
        addModel("orange", 20, 1, 0)
        addModel("blue", 70, 1, 0)
        

        function addModel(color, H0, OL, OM) {

            var div = document.createElement("div")
            var g0 = document.createElement("canvas")
            var g1 = document.createElement("canvas")
            var g2 = document.createElement("canvas")

            g0.width = 500
            g1.width = 500
            g2.width = 500
            
            g0.height = 500
            g1.height = 500
            g2.height = 500
                        
            div.appendChild(g0)
            div.appendChild(g1)
            div.appendChild(g2)

            graphs.appendChild(div)

            var data = flrw2(H0, OL, OM, maxZ)
            var model = {H0, OL, OM, data, g0, g1, g2, color}

            models.push(model)

            drawCanvas0(model)

        }


        function drawCanvas0(model) {
            var canvas = model.g0

            var ctx = canvas.getContext("2d")
            var w = canvas.width
            var h = canvas.height
        
            canvas.width = w
            ctx.fillStyle = "black"
            ctx.font = "16px sans-serif"
            ctx.textAlign = "center"
            for (var i = 0; i <= maxZ; i=i+1) {
                ctx.fillText(i, 20 + i / maxZ * w, h)
            }
            
            ctx.textAlign = "right"
            ctx.fillText("redshift z", w - 10, h - 25)

            for (var i = 0; i <= maxD; i=i+5) {
                ctx.fillText(i, 18, h - 20 - h / maxD * i * zoomY)
            }
            ctx.textAlign = "left"
            ctx.fillText("billion light years", 28, 18)

            ctx.translate(20, h-20)

            ctx.lineWidth = 1
            ctx.strokeRect(0, 0, canvas.width, -canvas.height)

            ctx.globalAlpha = 1
            ctx.lineWidth = 6
            ctx.strokeStyle = model.color

            ctx.beginPath()
            ctx.moveTo(0, 0)

            for (var i = 0; i < model.data.length; i++) {
                ctx.lineTo(w * model.data[i].z / maxZ,  - h / maxD * (model.data[i].d_C / 1000) * zoomY)
            }
            ctx.stroke()
            
        }



        function drawCanvas2(model) {
            var canvas = model.g0

            console.log("drawing")
            H0h = Number(form.H0h.value);
            H0 = Number(form.H0.value);
            Omega_M = Number(form.Omega_M.value);
            Omega_L = Number(form.Omega_L.value);

            var ctx = canvas.getContext("2d")
            var h = canvas.height
            var w = canvas.width
            canvas.width = w
            ctx.translate(0, h /2 - 10)

            ctx.font = "16px sans-serif"
            ctx.fillStyle = "black"
            ctx.fillText("z", w - 10, -2)

            for (var i = 0; i <= maxZ; i=i+0.5) {
                ctx.fillText(Math.round(i*10)/10, i / maxZ * w, -2)
            }
            for (var i = -maxD; i <= maxD; i=i+5) {
                ctx.fillText(i, 0, -  i * zoomY)
            }
            //ctx.fillText("distance (lookback time x c)", 28, 18)
            //ctx.fillText("billion light years", 28, 38)

            ctx.beginPath()
            ctx.lineWidth = 1
            ctx.strokeStyle = "black"
            ctx.moveTo(0, 0)
            ctx.lineTo(w, 0)
            ctx.stroke()


            ctx.beginPath()
            ctx.lineWidth = 10
            ctx.strokeStyle = "red"
            ctx.moveTo(0, h)

            var lastdp
            data.forEach(dp => {
                dp.dc = zToD(dp.z) * pc2ly / 1000
                ctx.lineTo(w * dp.z / maxZ, h - h * dp.dc / maxD)
                if (lastdp) {
                    lastdp.slope = (dp.dc - lastdp.dc) / dd
                }
                lastdp = dp
            })
            ctx.globalAlpha = 0.4
            //ctx.stroke()

            ctx.globalAlpha = 1
            ctx.lineWidth = 2
            ctx.strokeStyle = "red"
            ctx.beginPath()
            ctx.moveTo(0, - data[0].slope * zoomY)

            lastdp = undefined
            data.forEach(dp => {
                if (lastdp) {
                    lastdp.slope2 = (dp.slope - lastdp.slope) / dd
                }
                ctx.lineTo(w * dp.z / maxZ, - dp.slope * zoomY)
                lastdp = dp
            })
            ctx.stroke()

            ctx.textAlign = "right"
            ctx.fillText("Slope of green line", w - 10, - 74)

            if (show2nd.checked) {

                ctx.strokeStyle = "blue"
                ctx.beginPath()
                ctx.moveTo(0, - data[0].slope2 * zoomY)

                data.forEach(dp => {
                    ctx.lineTo(w * dp.z / maxZ, - dp.slope2 * zoomY)
                })
                ctx.stroke()

                ctx.fillText("Slope of red line", w - 10,  54)
            
            }

            ctx.font = "30px sans-serif"
            ctx.fillStyle = "#111111"
            //ctx.fillText("Past", w - 90, -h/2+54)
            ctx.font = "50px sans-serif"
            //ctx.fillText("‚Üê", w/2, -h/2+72)
            



        }







    </script>