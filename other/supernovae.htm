<!DOCTYPE html>
<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #graphs {
                height:400px;
                width: 700px;
                position:relative;
            }
            #graphs canvas {
                position:absolute;
                top: 0;
                left: 0;
                height:400px;
                width: 700px;
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 80px;
            }


            td, th {
                padding:4px 20px;
            }

            #hypothesiseq {
                /*display: none;*/
                position: absolute;
                left: 480px;
                top: 400px;
            }


            #lcdm {
                /*position: absolute;*/
                left:220px;
                top:450px;
            }

        </style>
    </head>
<body>

<h3>Supernovae Data </h3>

<p>
    Read more about the hypothesis being tested <a href="../index.htm">on the home page.</a> 
</p>


<div id="graph-side">
    X-axis: 
    <select id="graph-x-axis">
        <option>z redshift</option>
        <option>co-moving distance (Gly)</option>
        <option>luminosity distance (Gly)</option>
    </select>
    <br>    
    Y-axis: 
    <select id="graph-y-axis">
        <option>distance (Gly)</option>
        <option>luminosity distance (Gly)</option>
        <option>distance modulus (Î¼)</option>
        
    </select>
    <br>
    <canvas id="graph" height="400" width="700"></canvas>
    <br>
    Zoom X: <input type="number" id="graph-zoom-x" value="1.0" step="0.01" min="0.01">
    Zoom Y: <input type="number" id="graph-zoom-y" value="1.0" step="0.01" min="0.01">
    <br>
    Width: <input type="number" id="graph-width" value="600" >
    Height: <input type="number" id="graph-height" value="600" >
    <br>
    <br>
    Hypothesis H<sub>0</sub>: <input value="70" type="number" id="graph-hypothesis">
    <br>
    <div id="lcdm">
        &Lambda;CDM (<span style="color:green;">green</span>): 
        H<sub>0</sub>: <input type="number" value="73" step="0.5" id="H0input">
        &Omega;<sub>&Lambda;</sub>: <input type="number" min="0" value="0.7" step="0.05" id="Omega_L">
        &Omega;<sub>M</sub>: <input type="number" min="0" value="0.3" step="0.05" id="Omega_M">
    </div>
    <br>

    <div>
        <input id="showsn" type="checkbox" checked="true"> Show Pantheon+SH0ES
        <br>
        <input id="showSCP" type="checkbox" > Show Supernovae Cosmology Project
    </div>
    <div id="extinction-container">
        <br>
        Light Extinction=<input id="extinction" type="number" value="0.0" step="0.01" min="0.0">
    </div>

    
</div>

<div id="right-side">

</div>

<script src="flrw.js"></script>

<div id="hypothesiseq">
    <!--\[   \Omega_m = 1, \Omega_\Lambda = 0  \]-->
    <!--\[  H = 70~\text{km s}^{-1}~\text{Mpc}^{-1}  \]-->
    \[ d_L = \frac{c}{H} (1+z) \log(1 + z) \]
    \( H = 70~\text{km/s/Mpc} \)
</div>


<script>


var drawHypothesis = document.getElementById("graph-hypothesis")

var showSN = document.getElementById("showsn")
showSN.onchange = e => {
    drawSN()
}
showSCP.onchange = e => {
    drawSN()
}

var black = false

    var details = document.getElementById("details")

    var graph = document.getElementById("graph")
    var ctxB = graph.getContext("2d")
    var ctxG = graph.getContext("2d")
    var models = []

    var gWinput = document.getElementById("graph-width")
    gWinput.onchange = e => {
        graph.width = 1 * gWinput.value
        graph.style.width = graph.width + "px"
        drawSN()
    }
    var gHinput = document.getElementById("graph-height")
    gHinput.onchange = e => {
        graph.height = 1 * gHinput.value
        graph.style.height = graph.height + "px"
        drawSN()
    }

    var extinctionInput = document.getElementById("extinction")
    extinctionInput.onchange = e => {
        calculateDistances()
        drawSN()
    }

    var calculateDistances = function () {
        var extinction = extinctionInput.value
        for (var i=0; i<snData.length; i++) {
                // distance modulus to parsec luminosity distance
                var ld = Math.pow(10, 0.2 * (1*snData[i].dm + 5 - extinction)) 

                // convert to comoving distance
                //d = ld / (1+z)
                var d = ld / (1+snData[i].z) // (1+snData[i].z)  

                // parsec to light years
                d = d * 3.261564
                ld = ld * 3.261564

                // ly to Mly
                snData[i].d = d / 1000000
                snData[i].ld = ld / 1000000
        }
        
    }
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per million years
    
    // Hubble's Constant (H) is in units of Gly^-1 or ly/y/Gly, so it is divided by 1000  

    var c = 1
    const pc2ly = 3.261564
    const c0 = 299792.458
        

    var zoom = 0.035
    var zoom_gx = 0.8
    var zoom_gy = 0.48
    var zoomG = zoom * zoom_gx
    var zoomGY = zoom * zoom_gy
    var offset = 20
    
    var zZoom = 10000

    var drawnSN = false

    var snData = []
    var zData = []
    var zs = []
    for (let i = 0; i < 1; i += 0.001) {
        zs.push(i)
    }
    for (let i = 1; i < 15; i += 0.1) {
        zs.push(i)
    }
    
    function drawSN() {
        
        ctxB.lineWidth = 1
        ctxB.fillStyle = black ? "black" : "white"
        ctxB.fillRect(0, 0, graph.width, graph.height)

        ctxB.strokeStyle = !black ? "black" : "white"
        ctxB.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)

        ctxB.fillStyle = !black ? "black" : "white"

        var t
        if (drawHypothesis.value > 0) {
            ctxB.strokeStyle = black ? "red" : "black"
            ctxB.beginPath()
            ctxB.moveTo(offset, graph.height - offset)

            let H0 = drawHypothesis.value
            zs.forEach(z => {
                //d = ii/(1+ii) * c0 / drawHypothesis.value * pc2ly
                t = c0 / H0 * Math.log(1 + z)
                
                if (yAxis.selectedIndex === 1) {
                    t = t * (1 + z) * pc2ly
                }
                else if (yAxis.selectedIndex === 2) {
                    t = t * (1 + z) //* 1000000
                    t = (5 * Math.log10(t) + 25 - 28) * 1000
                }
                else {
                    t = t * pc2ly
                }
                ctxB.lineTo( offset + z * zZoom * zoomG, 
                            -offset + graph.height - t * zoomGY)
            })

            ctxB.stroke()
        }

        var dz

        setLCDM()
        ctxB.lineWidth = 2
        ctxB.strokeStyle = "green"
        ctxB.beginPath()
        ctxB.moveTo(offset, graph.height - offset)

        zs.forEach(z => {
            d = FLRW(H0, Omega_L, Omega_M, z).DC  
            if (yAxis.selectedIndex === 1) {
                d = d * (1 + z) * pc2ly
            }
            else if (yAxis.selectedIndex === 2) {
                d = d * (1 + z) //* 1000000
                d = (5 * Math.log10(d) + 25 - 28) * 1000
            }
            else {
                d = d * pc2ly
            }
            ctxB.lineTo( offset + z * zZoom * zoomG, 
                        -offset + graph.height - d * zoomGY)
        })
        ctxB.stroke()

        ctxB.fillStyle = "blue"
        if (showSCP.checked) {
            var x, y
            for (var sn of scpData) {
                //sn.d = sn.ld
                if (yAxis.selectedIndex === 1) {
                    y = sn.ld
                }
                else if (yAxis.selectedIndex === 2) {
                    y = (sn.dm - 28) * 1000
                }
                else {
                    y = sn.d // (1 + sn.z)
                }

                x = sn.z * zZoom

                ctxB.fillRect(offset + x * zoomG - 1, graph.height - offset - y * zoomGY - 1, 3, 3)

            }

        }


        ctxB.fillStyle = black ? "yellow" : "red"
        if (showSN.checked) {
            var x, y
            for (var sn of snData) {
                //sn.d = sn.ld
                if (yAxis.selectedIndex === 1) {
                    y = sn.ld
                }
                else if (yAxis.selectedIndex === 2) {
                    y = (sn.dm - 28) * 1000
                }
                else {
                    y = sn.d // (1 + sn.z)
                }

                x = sn.z * zZoom

                ctxB.fillRect(offset + x * zoomG - 1, graph.height - offset - y * zoomGY - 1, 3, 3)

            }

        }

        

        ctxB.font = "14px sans-serif"

        if (showSN.checked) {
            ctxB.fillRect(offset + 16, offset + 33, 2, 2)
            ctxB.fillStyle = "black"
            ctxB.fillText("Pantheon+SH0ES", offset + 5 + 20, offset + 38)
        
        }
        //ctxB.fillText("comoving distance", offset + 5 + 20, offset + 54)


        ctxB.fillStyle = !black ? "black" : "white"
        ctxB.textAlign = "right"
        ctxB.fillText(xAxis.value, graph.width - 4, graph.height - 30)
        ctxB.textAlign = "left"
        ctxB.fillText(yAxis.value, offset + 5, offset)
        
        
        var dgi
        ctxB.textAlign = "right"
        ctxB.font = "10px sans-serif"
        if (xAxis.selectedIndex === 0) {
            
            if (yAxis.selectedIndex === 2) {
                for (dgi = 28; dgi < 50; dgi+=5) {
                    ctxB.fillText(dgi, offset - 2, -offset + graph.height - (dgi - 28) * 1000 * zoomGY + 4)    
                }
            }
            else {
                for (dgi = 0; dgi < 2000; dgi+=(zoomYinput.value > 0.15 ? 10 : 50)) {
                    ctxB.fillText(dgi, offset - 2, -offset + graph.height - dgi * 1000 * zoomGY + 4)    
                }
            }            
            
            for (dgi = 0; dgi < 155; dgi+=(zoomXinput.value < 0.4 ? 10 : 5)) {
                ctxB.fillText(dgi / 10, offset + dgi / 10 * zZoom * zoomG + 4, graph.height - 5)    
            }
        }
        ctxB.textAlign = "left"
        
        
    }

    fetch("https://mikehelland.github.io/hubbles-law/data/supernovae.json").then(res=>res.json()).then(data=> {
        scpData = data
        drawSN()
    })

    
    fetch("https://mikehelland.github.io/hubbles-law/data/Pantheon+SH0ES_z_mu.csv").then(res => res.text()).then(text => {
        //console.log(text)

        var lines = text.split("\n")
        for (var i = 1; i < lines.length; i++) {
            var line = lines[i].split(",")
            snData.push({"dm": parseFloat(line[2]), "z": parseFloat(line[0])})
        }
        calculateDistances()
        
        drawSN()
        
        //fetch("https://mikehelland.github.io/hubbles-law/data/zdata_ned.json").then(res=>res.json()).then(data=> {
        //    zData = data
        //})
    })
    

    
var zoomXinput = document.getElementById("graph-zoom-x")
var zoomYinput = document.getElementById("graph-zoom-y")
zoomXinput.onchange = e => {
    zoomG = zoom * zoom_gx * e.target.value
    drawSN()
}
zoomYinput.onchange = e => {
    zoomGY = zoom * zoom_gy * e.target.value
    drawSN()
}
zoomG = zoom * zoom_gx * parseFloat(zoomXinput.value)
zoomGY = zoom * zoom_gy * parseFloat(zoomYinput.value)

var yAxis = document.getElementById("graph-y-axis")
var xAxis = document.getElementById("graph-x-axis")
yAxis.onchange = e => drawSN()
xAxis.onchange = e => drawSN()
drawHypothesis.onchange = e => drawSN()

var OmegaMinput = document.getElementById("Omega_M")
var OmegaLinput = document.getElementById("Omega_L")    
var H0input = document.getElementById("H0input")    
var Omega_L, Omega_M, H0, Omega_k
OmegaMinput.onchange = e => drawSN()
OmegaLinput.onchange = e => drawSN()
H0input.onchange = e => drawSN()

function setLCDM() {
    Omega_L = OmegaLinput.value * 1
    Omega_M = OmegaMinput.value * 1
    H0 = H0input.value * 1
    
}

    

    
</script>

<script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>
