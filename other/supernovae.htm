<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #right-side {
                left: 730px;
                top: 20px;
                position: absolute;
            
            }
            #graphs {
                height:400px;
                width: 700px;
                position:relative;
            }
            #graphs canvas {
                position:absolute;
                top: 0;
                left: 0;
                height:400px;
                width: 700px;
            }
            .model-label {
                margin: 4px 0;
                
                
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 80px;
            }

            .model-units {
                columns: #444444;
                font-size: 12px;
                padding-left:4px;
            }

            #details, #notes {
                width:700px;
            }
            #notes {
                margin-left: 20px;
            }

            .model-header {
                padding:4px;
                display:flex;
                align-items: center;
            }
            .header-spacer {
                flex-grow: 1
            }

            td, th {
                padding:4px 20px;
            }

            #hypothesiseq {
                position: absolute;
                left: 420px;
                top: 460px;
            }
        </style>
    </head>
<body>

<h3>Supernovae Data </h3>

<p>
    Read more about the models being tested <a href="../index.htm">on the home page.</a> 
</p>


<div id="graph-side">
    <button id="startButton">Run All</button> <button id="stopButton">Stop</button>
    <br>
    <br>
    X-axis: 
    <select id="graph-x-axis">
        <option>z redshift</option>
        <option>co-moving distance (Gly)</option>
        <option>luminosity distance (Gly)</option>
    </select>
    <br>    
    Y-axis: 
    <select id="graph-y-axis">
        <option>distance (Gly)</option>
        <option>luminosity distance (Gly)</option>
        <option>z redshift</option>
        
    </select>
    <br>
    <div id="graphs">
    <canvas id="background" height="400" width="700"></canvas>
    <canvas id="graph" height="400" width="700"></canvas>
    </div>
    <br>
    Zoom X: <input type="number" id="graph-zoom-x" value="1.0" step="0.01" min="0.01">
    Zoom Y: <input type="number" id="graph-zoom-y" value="1.0" step="0.01" min="0.01">
    <br>
    Width: <input type="number" id="graph-width" value="600" >
    Height: <input type="number" id="graph-height" value="600" >
    <br>
    Starting frequency=<input id="start-freq">
    <br>
    Light Extinction=<input id="extinction" type="number" value="0.0" step="0.01" min="0.0">
    <br>
    Show CDM: <input type="checkbox" id="graph-cdm">
    <br>
    d-z H<sub>0</sub>: <input type="number" id="graph-hypothesis">
    <hr>
    Log when t=<input id="find-t"> d=<input id="find-d"> z=<input id="find-z"> v=<input id="find-v"> target=<input id="find-target">
    
    <pre id="output"></pre>
</div>

<div id="right-side">
<p>Click a model to play or reset it.</p>

<div id="details"></div>

<div id="notes">
    <hr>
    <p>Units of H for input boxes:</p>

    <ul>
        <li>Inverse models:  Gly<sup>-1</sup></li>
        <li>Others: light year / year / Gly</li>
    </ul>

    <p>1 megaparsec to Mly = 3.2638 Mly <a href="https://www.convertunits.com/from/megaparsec/to/Mly" target="_ou">https://www.convertunits.com/from/megaparsec/to/Mly</a></p>
    <hr>
    <p>Sample z's (white dots when y-axis is redshift) from <a href="https://wolframalpha.com/" target="_out">WolframAlpha</a></p>
    <pre id="zoutput">
    </pre>

    <a href="https://github.com/mikehelland/hubbles-law/blob/master/test.htm">Source code</a>
</notes>
</div>
</div>


<div id="hypothesiseq">\[  d = \frac{c}{H_{0}} log(1 + z)  \]</div>


<script>


var black = false

    var outputDiv = document.getElementById("output")
    var trunc = n => Math.trunc(n * 1000) / 1000
    var output = (model, photon) => {
        outputDiv.innerHTML += (model.label || model.name) + ", " + 
                                "t=" + model.t.toString().padEnd(8) + " d=" + 
                                trunc(photon.x) + ", z=" + trunc(photon.z) + ", v=" + 
                                trunc(photon.dx) + ", f=" + trunc(photon.f) + 
                                ", w=" + trunc(299792458/photon.f) + "\n"
    }
    
    var details = document.getElementById("details")

    var background = document.getElementById("background")
    var graph = document.getElementById("graph")
    var ctxB = background.getContext("2d")
    var ctxG = graph.getContext("2d")
    var models = []

    var startFreqInput = document.getElementById("start-freq")
    var extinctionInput = document.getElementById("extinction")
    extinctionInput.onchange = e => {
        for (var i=0; i<snData.length; i++) {
                // distance modulus to parsec luminosity distance
                var ld = Math.pow(10, 0.2 * (1*snData[i].dm + 5 - extinctionInput.value)) 

                // convert to comoving distance
                //d = ld / (1+z)
                var d = ld / (1+(1*snData[i].z))

                // parsec to light years
                d = d * 3.261564
                ld = ld * 3.261564

                // ly to Mly
                snData[i].d = d / 1000000
                snData[i].ld = ld / 1000000
        }
        drawSN()
    }
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per million years
    
    // Hubble's Constant (H) is in units of Gly^-1 or ly/y/Gly, so it is divided by 1000  

    var c = 1
    const pc2ly = 3.261564
    const c0 = 299792.458
        

    var zoom = 0.035
    var zoom_gx = 0.95
    var zoom_gy = 0.48
    var zoomG = zoom * zoom_gx
    var zoomGY = zoom * zoom_gy
    var offset = 20
    
    var zoomz = 10000

    var drawnSN = false
    var drawCDM = document.getElementById("graph-cdm")
    var drawHypothesis = document.getElementById("graph-hypothesis")

    var snData = []
    var zData = []
    var zs = [
    { z: 1, t: 7400, d: 10400 },
    { z: 2, t: 9880, d: 16400 },
    { z: 3, t: 11000, d: 20100 },
    { z: 4, t: 11600, d: 22800 },
    { z: 5, t: 11900, d: 24700 },
    { z: 6, t: 12200, d: 26200 },
    { z: 7, t: 12300, d: 27500 },
    { z: 8, t: 12400, d: 28500 },
    { z: 9, t: 12500, d: 29400 },
    { z: 10, t: 12600, d: 30100 },
    { z: 11, t: 12700, d: 30700 },
    { z: 12, t: 12700, d: 31300 },
    { z: 13, t: 12700, d: 31800 },
    { z: 14, t: 12800, d: 32300 },
    { z: 15, t: 12800, d: 32700 },
    { z: 16, t: 12800, d: 33100 },
    { z: 17, t: 12800, d: 33400 },
    { z: 18, t: 12900, d: 33700 },
    { z: 19, t: 12900, d: 34000 },
    { z: 20, t: 12900, d: 34300 },
    { z: 21, t: 12900, d: 34600 },
    { z: 22, t: 12900, d: 34800 },
    { z: 23, t: 12900, d: 35000 },
    { z: 24, t: 12900, d: 35200 },
    { z: 25, t: 12900, d: 35400 },]

    function drawSN() {
        ctxB.lineWidth = 1
        ctxB.fillStyle = black ? "black" : "white"
        ctxB.fillRect(0, 0, graph.width, graph.height)

        ctxB.strokeStyle = !black ? "black" : "white"
        ctxB.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)

        ctxB.fillStyle = !black ? "black" : "white"
        if (drawCDM.checked) {
            for (dgi = 0; dgi < zs.length; dgi++) {        
                if (yAxis.selectedIndex === 2) {
                    ctxB.fillRect(-2 + offset + zs[dgi].d * zoomG, -2 + -offset + graph.height - zs[dgi].z * 10000 * zoomGY, 4, 4)
                }
                else {
                    ctxB.fillRect(-2 + offset + zs[dgi].z * 10000 * zoomG, -2 + -offset + graph.height - zs[dgi].d * zoomGY, 4, 4)
                }
            }
        }

        if (drawHypothesis.value > 0) {
            ctxB.strokeStyle = black ? "red" : "black"
            ctxB.beginPath()
            ctxB.moveTo(offset, graph.height - offset)

            for (let ii = 0; ii<=20; ii+=0.1) {
                d = ii/(1+ii) * c0 / drawHypothesis.value * pc2ly
                t = c0 / drawHypothesis.value * pc2ly * Math.log(1+ii)
                ctxB.lineTo( offset + ii * 10000 * zoomG, 
                            -offset + graph.height - t * zoomGY)
            }
            ctxB.stroke()
        }

        // note, this file has d in Mpc, so convert it
        // it's also huge and messy and unnecessary
        /*var mpcToMly = 3.261563
        ctxB.fillStyle = "red"
        for (var sn of zData) {
            if (yAxis.selectedIndex === 3) {
                ctxB.fillRect(offset + sn.d * mpcToMly * zoomG, graph.height - offset - sn.z * 10000 * zoomGY, 2, 2)
            }
            else {
                ctxB.fillRect(offset + sn.z * 10000 * zoomG, graph.height - offset - sn.d * mpcToMly * zoomGY, 2, 2)
            }
        }*/


        ctxB.fillStyle = black ? "yellow" : "red"
        var x, y
        for (var sn of snData) {
            //sn.d = sn.ld
            if (yAxis.selectedIndex === 2) {
                y = sn.z * 10000
            }
            else if (yAxis.selectedIndex === 1) {
                y = sn.ld
            }
            else {
                y = sn.d
            }

            if (xAxis.selectedIndex === 0) {
                x = sn.z * 10000
            }
            else if (xAxis.selectedIndex === 2) {
                x = sn.ld
            }
            else {
                x = sn.d
            }

            ctxB.fillRect(offset + x * zoomG - 1, graph.height - offset - y * zoomGY - 1, 2, 2)
        }


        ctxB.font = "14px sans-serif"

        //ctxB.fillStyle = "yellow"
        ctxB.fillRect(offset + 16, offset + 33, 2, 2)
        ctxB.fillText("Supernovae Cosmology Project Data", offset + 5 + 20, offset + 38)
        ctxB.fillText("comoving distance", offset + 5 + 20, offset + 54)
/*
        
        ctxB.fillStyle = "green"
        ctxB.fillRect(offset + 30, offset + 54, 8, 1)
        ctxB.fillText("v = H D", offset + 5 + 40, offset + 61)

        ctxB.fillText("H = 74 km/s/Mpc", offset + 5 + 40, offset + 86)


        ctxB.font = "8px sans-serif"
        ctxB.fillText("0", offset + 5 + 79, offset + 66)
        ctxB.fillText("0", offset + 5 + 50, offset + 88)


        ctxB.font = "14px sans-serif"
        ctxB.fillStyle = "white"
        ctxB.fillRect(offset + 30, offset + 106, 8, 1)
        ctxB.fillStyle = "white"
        ctxB.fillText("v = c - ", offset + 5 + 40, offset + 112)
        ctxB.fillText("                 c", offset + 5 + 40, offset + 102)
        ctxB.fillRect(offset + 100, offset + 109, 44, 1)
        ctxB.fillText("            (1+H D)", offset + 5 + 40, offset + 128)

        ctxB.fillText("H = 0.04 Gly", offset + 5 + 40, offset + 160)

        ctxB.font = "12px sans-serif"

        ctxB.fillText("-1", offset + 5 + 132, offset + 152)
        ctxB.fillText("-1", offset + 5 + 132, offset + 152)

        ctxB.fillText("       2", offset + 5 + 122, offset + 120)
        ctxB.fillText("-1", offset + 5 + 132, offset + 152)
        
        ctxB.font = "14px sans-serif"

        ctxB.font = "8px sans-serif"
        ctxB.fillText("0", offset + 5 + 129, offset + 134)
        ctxB.fillText("0", offset + 5 + 50, offset + 166)
        */


        ctxB.fillStyle = !black ? "black" : "white"
        ctxB.textAlign = "right"
        ctxB.fillText(xAxis.value, graph.width - 4, graph.height - 30)
        ctxB.textAlign = "left"
        ctxB.fillText(yAxis.value, offset + 5, offset)
        
        
        var dgi
        ctxB.font = "10px sans-serif"
        if (xAxis.selectedIndex === 0) {
            for (dgi = 0; dgi < 80; dgi+=5) {
                ctxB.fillText(dgi, 4, -offset + graph.height - dgi * 1000 * zoomGY + 4)    
            }
            
            for (dgi = 0; dgi < 110; dgi+=5) {
                ctxB.fillText(dgi / 10, offset + dgi / 10 * 10000 * zoomG + 4, graph.height - 5)    
            }
        }
        else {
            for (dgi = 0; dgi < 80; dgi+=5) {
                ctxB.fillText(dgi, -offset + dgi * 1000 * zoomG + 4, graph.height - 5)    
            }
            
            for (dgi = 0; dgi < 110; dgi+=5) {
                ctxB.fillText(dgi / 10, 4, -offset + graph.height - dgi / 10 * 10000 * zoomGY + 4)    
            }
        }
        
        
    }
    fetch("https://mikehelland.github.io/hubbles-law/data/supernovae.json").then(res=>res.json()).then(data=> {
        snData = data

        //fetch("https://mikehelland.github.io/hubbles-law/data/zdata_ned.json").then(res=>res.json()).then(data=> {
        //    zData = data
        
            setupModels()
            drawSN()
        //})
    })

    var drawx, drawy, dgt, dgm, dgi
    function drawGraph() {
        
        graph.width = graph.width 
        ctxG.lineWidth = 1
        for (dgm of models) {
            ctxG.strokeStyle = dgm.color
            ctxG.beginPath()
            ctxG.moveTo(offset, graph.height - offset)
            for (dgt of dgm.targets) {
                if (dgt.hit) {

                    if (xAxis.selectedIndex === 0) {
                        drawx = dgt.z * 10000
                    }
                    else {
                        drawx = dgt.start
                    }

                    
                    if (yAxis.selectedIndex === 1) {
                        drawy = dgt.hitX
                    }
                    else if (yAxis.selectedIndex === 0) {
                        drawy = dgt.hitX
                    }
                    else if (yAxis.selectedIndex === 2) {
                        drawy = dgt.z * 10000
                    }
                    ctxG.lineTo(offset + drawx * zoomG, -offset + graph.height - drawy * zoomGY)

                }
            }
            ctxG.stroke()
            
        }

        
    }

    function setupModel(model) {

        var header = document.createElement("div")
        header.className = "model-header"


        label = document.createElement("div")
        label.innerHTML = model.name
        label.className = "model-label"
        header.appendChild(label)

        if (model.H) {
            var label = document.createElement("div")
            label.innerHTML = "H = "
            label.className = "input-label"
                    
            var input = document.createElement("input")
            input.type = "number"
            input.value = model.H
            input.step = 0.0001
            
            input.onchange = e => model.H = parseFloat(input.value)

            var spacer = document.createElement("div")
            spacer.innerHTML = "&nbsp;"//model.unitH
            spacer.className = "header-spacer"

            header.appendChild(spacer)
            header.appendChild(label)
            header.appendChild(input)

        }
            
        
        details.appendChild(header)
        
        model.canvas = document.createElement("canvas")
        model.canvas.onclick = () => {
            if (model.running || model.ran) {
                resetModel(model)
            }
            else {
                runModel(model)
            }
        }
        details.appendChild(model.canvas)
        details.appendChild(document.createElement("br"))

        model.ctx = model.canvas.getContext("2d")
        model.nextTarget = 0

        model.canvas.width = 700
        model.canvas.height = 30
        
        // make a target every 200 million light years until 20 billion
        model.targets = []
        for (var i = 100; i <= 200000; i+=100) {
            model.targets.push({label: i/1000, start: i, x: i})
        //for (var sn of snData) {
        //    model.targets.push({label: sn.d/1000, start: sn.d, x: sn.d})
        }

        model.ctx.lineWidth = 1
        draw(model.ctx, model)

        models.push(model)
    }

    function stopModel(model) {
        clearInterval(model.handle)

        model.running = false
        model.ran = true
    }

    function resetModel(model) {
        
        stopModel(model)
    
        model.ran = false
        model.photon.x = 0
        model.photon.f_start = startFreqInput.value || model.photon.f_start || 6e5 
        model.photon.f = model.photon.f_start
        model.photon.w = 299792458 / model.photon.f
        model.photon.dx = c
        model.nextTarget = 0
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
        })
    
        model.t = 0

        draw(model.ctx, model)
    }

    function draw(ctx, exp) {

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

        for (var i = 0; i < exp.targets.length; i++) {
            ctx.strokeStyle = exp.targets[i].hit ? exp.color : "#888888"
            ctx.beginPath()
            ctx.moveTo(exp.targets[i].x * zoom, 0)
            ctx.lineTo(exp.targets[i].x * zoom, ctx.canvas.height)
            //ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

            if (exp.targets[i].hit) {
                //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
                //ctx.fillText(exp.targets[i].hit, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            }

            ctx.stroke()
        }

        ctx.fillStyle = "yellow"
        ctx.fillRect(exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
    }

    function runModel(model) {
        
        resetModel(model)
        
        model.running = true

        var findT = document.getElementById("find-t").value
        var findD = document.getElementById("find-d").value
        var findZ = document.getElementById("find-z").value
        var findV = document.getElementById("find-v").value
        var findTarget = document.getElementById("find-target").value
        
        var nextSN = 0

        var x, x2, dx, dx2
        var i
        var batch = 100
        model.handle = setInterval(function () {
            for (i = 0; i < batch; i++) {
                if (model.targets[model.nextTarget]) {//&& model.t < 80000) {
                    model.t++
                    x = model.photon.x
                    x2 = model.targets[model.nextTarget].x
                    
                    model.next()

                    while (snData[nextSN] && snData[nextSN].d <= model.photon.x) {
                        //snData[nextSN].t = model.t
                        nextSN++
                    }

                    dx = model.photon.x - x
                    dx2 = model.targets[model.nextTarget].x - x2

                    var z = (model.photon.f_start - model.photon.f) / model.photon.f
                    if (model.expanding) {
                        //dx2 = dx2 - (dx - 1)
                        z = Math.sqrt((1 + dx2) / (1 - dx2)) - 1
                    }
                    model.photon.z = z
                    
                    if (findT && fintdT === "all") {
                        output(model, model.photon)
                    }
                    else if (findT && model.t >= findT) {
                        output(model, model.photon)
                        findT = 0
                    }
                    if (findZ && z >= findZ) {
                        output(model, model.photon)
                        findZ = 0
                    }
                    if (findD && findD === "all") {
                        output(model, model.photon)
                    }
                    else if (findD && model.photon.x >= findD) {
                        output(model, model.photon)
                        findD = 0
                    }
                    if (findV && model.photon.dx >= findV) {
                        output(model, model.photon)
                        console.log(model.targets[model.nextTarget-1].dx)
                        findV = 0
                    }
                    while (model.targets[model.nextTarget] && model.targets[model.nextTarget].x <= model.photon.x) {
                        
                        if (findTarget && findTarget === "all") {
                            output(model, model.photon)
                        }
                        else if (findTarget && model.targets[model.nextTarget].start >= findTarget) {
                            output(model, model.photon)
                            findTarget = 0
                        }

                        //snData[model.nextTarget].t = model.t

                        model.targets[model.nextTarget].hit = model.t
                        model.targets[model.nextTarget].hitX = model.targets[model.nextTarget].x
                        

                        model.targets[model.nextTarget].z = z
                        model.targets[model.nextTarget].dx = model.expanding ? 
                            (model.targets[model.nextTarget].x - x2) :
                            (1 - (model.photon.x - x))
                        //console.log(model.targets[model.nextTarget].z, model.targets[model.nextTarget].dx)
                        
                        model.nextTarget++
                    }
                }
                else {
                    clearInterval(model.handle)
                    model.running = false
                    model.ran = true
                }
            }
        }, 0)
    }

    function setupModels() {
        setupModel({
            div: document.getElementById("staticModel"),
            name: "Static",
            color: "darkblue", 
            photon: {x: 0},
            next: function () {
                this.photon.x += c
            }
        })

        setupModel({
            name: "v<sub>target</sub> = H &times; proper, v<sub>light</sub> = c + H &times; x",
            label: "expand",
            color: "lightgreen", 
            H: 0.0756,
            unitH: "ly/y/Mly",
            photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
            next: function () {
                this.photon.dx = c + this.photon.x * this.H / 1000
                this.photon.x += this.photon.dx
                this.photon.w = (this.photon.dx * 299792458 / this.photon.f_start) 
                this.photon.f = 299792458 / this.photon.w
        
                //this.photon.x += c + this.photon.x * this.H / 1000
                for (var i = 0; i < this.targets.length; i++) {
                    this.targets[i].x += this.targets[i].x * this.H / 1000
                }
            }
        })


        setupModel({
            div: document.getElementById("redshift1"),
            name: "v<sub>light</sub> = c - H &times; D",
            label: "v=c-HD",
            color: "green", 
            H: 0.0756,
            unitH: "ly/y/Mly",
            photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
            //photon: {x: 0, dx: c, f: 1, w: 299792458, f_start: 1},
            next: function () {
                this.photon.dx = c - this.H / 1000 * this.photon.x
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })


        details.appendChild(document.createElement("hr"))
        
        setupModel({
            div: document.getElementById("redshift1"),
            name: "v<sub>light</sub> = c - H &times; t",
            color: "green", 
            H: 0.0756,
            unitH: "ly/y/Mly",
            //photon: {x: 0, dx: c},
            photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
            next: function () {
                this.photon.dx = c - this.H / 1000 * this.t
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })
        setupModel({
            div: document.getElementById("redshift2"),
            name: "v<sub>light</sub> = c / (1 + H &times; D)",
            color: "magenta", 
            H: 0.0756,
            unitH: "Gly<sup>-1</sup>",
            photon: {x: 0, dx: c},
            next: function () {
                this.photon.dx = c / (1 + this.H / 1000 * this.photon.x)
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })
        setupModel({
            div: document.getElementById("redshift2"),
            name: "v<sub>light</sub> = c / (1 + H &times; D)<sup>2</sup>",
            color: "white", 
            H: 0.0378,
            unitH: "Gly<sup>-1</sup>",
            photon: {x: 0, dx: c},
            next: function () {
                this.photon.dx = c / Math.pow(1 + this.H / 1000 * this.photon.x, 2)
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })
        setupModel({
            div: document.getElementById("redshift2"),
            name: "v<sub>light</sub> = c / (1 + H &times; D)<sup>2</sup>",
            color: "red", 
            H: 0.15,
            unitH: "Gly<sup>-1</sup>",
            photon: {x: 0, dx: c},
            next: function () {
                this.photon.dx = c / Math.pow(1 + this.photon.x / 25000, 2)
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })
        setupModel({
            div: document.getElementById("redshift2"),
            name: "v<sub>light</sub> = c / (1 + (H &times; D)<sup>2</sup>)",
            color: "orange", 
            H: 0.26,
            unitH: "Gly<sup>-1</sup>",
            photon: {x: 0, dx: c},
            next: function () {
                this.photon.dx = c / (1 + Math.pow(this.H / 1000 * this.photon.x, 2))
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })
        setupModel({
            div: document.getElementById("redshift2"),
            name: "v<sub>light</sub> = c / (1 + H &times; t)",
            color: "yellow", 
            H: 0.0826,
            unitH: "Gly<sup>-1</sup>",
            photon: {x: 0, dx: c},
            next: function () {
                this.photon.dx = c / (1 + Math.pow(this.H / 1000 * this.t, 2))
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })
        setupModel({
            div: document.getElementById("redshift2"),
            name: "v<sub>light</sub> = c / (1 + H &times; t)<sup>2</sup>",
            color: "pink", 
            H: 0.0826,
            unitH: "Gly<sup>-1</sup>",
            photon: {x: 0, dx: c},
            next: function () {
                this.photon.dx = c /  Math.pow(1 + this.H / 1000 * this.t, 2)
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })
        setupModel({
            div: document.getElementById("redshift2"),
            name: "v<sub>light</sub> = c / sqrt(1 + (H &times; D)<sup>2</sup>)",
            color: "orange", 
            H: 0.26,
            unitH: "Gly<sup>-1</sup>",
            photon: {x: 0, dx: c},
            next: function () {
                this.photon.dx = c / Math.sqrt(1 + Math.pow(this.H / 1000 * this.photon.x, 2))
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })

        setupModel({
            div: document.getElementById("redshift2"),
            name: "v<sub>light</sub> = c / sqrt(1 + H &times; D<sup>2</sup>)",
            color: "orange", 
            H: 0.26,
            unitH: "Gly<sup>-1</sup>",
            photon: {x: 0, dx: c},
            next: function () {
                this.photon.dx = c / Math.sqrt(1 + this.H / 1000 * Math.pow(this.photon.x, 2))
                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })


        const c0 = 299792458
        // episolon naught is 8.8541878128e-12 in m
        // convert 
        const e0 = 8.8541878128e-12
        const e0n = e0 * c0 //0.0026543905761357367

        // 1.25663706212e-6 H/m
        const mu0 = 1.25663706212e-6
        const mu0n = mu0 * c0 //376.7343091821102

        1 / Math.sqrt(e0n * mu0n)

        setupModel({
            div: document.getElementById("redshift1"),
            name: "v<sub>light</sub> = 1 / sqrt((e0+HT) * mu0)",
            label: "e0mu0",
            color: "white", 
            H: 0.14,
            unitH: "ly/y/Mly",
            photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
            //photon: {x: 0, dx: c, f: 1, w: 299792458, f_start: 1},
            next: function () {
                this.photon.dx = 1 / Math.sqrt(
                    (e0 + this.H/1e14 * this.t) * 
                    mu0) / c0 

                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })

        setupModel({
            div: document.getElementById("redshift1"),
            name: "v<sub>light</sub> = 1 / sqrt((e0+HX) * mu0)",
            label: "e0mu0",
            color: "red", 
            H: 0.13,
            unitH: "ly/y/Mly",
            photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
            //photon: {x: 0, dx: c, f: 1, w: 299792458, f_start: 1},
            next: function () {
                this.photon.dx = 1 / Math.sqrt(
                    (e0 + this.H/1e14 * this.photon.x) * 
                    mu0) / c0 

                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })

        setupModel({
            div: document.getElementById("redshift1"),
            name: "v<sub>light</sub> = 1 / sqrt(e0+HX * mu0+HX)",
            label: "e0mu0",
            color: "white", 
            H: 0.183,
            unitH: "ly/y/Mly",
            photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
            //photon: {x: 0, dx: c, f: 1, w: 299792458, f_start: 1},
            next: function () {
                this.photon.dx = 1 / Math.sqrt(
                    e0 * 
                    (mu0 + this.H/1e9 * this.photon.x)) / c0 

                this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
                this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
            }
        })


    }

    setInterval(() => {
        for (var m = 0; m < models.length; m++) {
            if (models[m].running) {
                draw(models[m].ctx, models[m]) 
            }
        }

        drawGraph()
    }, 1000 / 60)

document.getElementById("startButton").onclick = e => models.forEach(model => runModel(model))
document.getElementById("stopButton").onclick = e => models.forEach(model => stopModel(model))

document.getElementById("graph-zoom-x").onchange = e => {
    zoomG = zoom * zoom_gx * e.target.value
    drawSN()
}
document.getElementById("graph-zoom-y").onchange = e => {
    zoomGY = zoom * zoom_gy * e.target.value
    drawSN()
}

var yAxis = document.getElementById("graph-y-axis")
var xAxis = document.getElementById("graph-x-axis")
yAxis.onchange = e => drawSN()
xAxis.onchange = e => drawSN()


setTimeout(() => {
    //models.forEach(model => runModel(model))
}, 500)

setTimeout(() => {
    //models.forEach(model => stopModel(model))
}, 10000)

    
</script>

<script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>
