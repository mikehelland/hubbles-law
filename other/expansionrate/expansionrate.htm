<!DOCTYPE html>
<html>

<head>
    <style>
        input[type=number] {
            font-size: 115%;
            width: 50px;
            appearance: textfield;
            border: 1;
        }

        body {
            font-size: 120%;
        }

        form {
            position: absolute;
            left: 50px;
            top: 20px;
        }
    </style>
</head>

<body>
    zCMB <input type="number" id="zcmb" value="1092"> has a radius of <span id="radiusCap"></span>
    <br>

    <form name="form">
        <!--\( \frac{H}{H_0} = [\Omega_M (1+z)^3 + \Omega_\Lambda]^{1/2} \)-->

        <br><br>
        &Lambda;CDM -
        H<sub>0</sub>: <input type="number" value="70" step="0.5" id="H0">
        &Omega;<sub>&Lambda;</sub>: <input type="number" min="0" value="0.7" step="0.05" id="Omega_L">
        &Omega;<sub>M</sub>: <input type="number" min="0" value="0.3" step="0.05" id="Omega_M">
    </form>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/core.min.js"></script>


    <canvas id="canvas" width="1000" height="600"></canvas>

    <script src="flrw.js"></script>
    
    <script>
        var data
        var data2
        const c = 299792.458
        const pc2ly = 3.261564
        var zoomY = 100

        var data = []

        var maxZ = 30

        form.H0.onchange = e => run()
        form.Omega_L.onchange = e => {
            form.Omega_M.value = 1 - form.Omega_L.value
            run()
        }
        form.Omega_M.onchange = e => {
            form.Omega_L.value = 1 - form.Omega_M.value
            run()
        }

        run()

        function run() {
            var z = parseFloat(zcmb.value)
            var H0 = parseFloat(form.H0.value)
            var OmegaL = parseFloat(form.Omega_L.value)
            var OmegaM = parseFloat(form.Omega_M.value)

            var R0 = nwFLRW(H0, OmegaL, OmegaM, z).DC * pc2ly
            radiusCap.innerHTML = R0.toFixed(2) + " Gly"
            //var R = 46000

            data = []

            var H0 = H0 / 3.08e19 * 60*60*24*365*1e6
            var H = H0
            var c = 1
            var a = 1
            var x = 0
            var t = 0
            var R = R0

            while (x >= 0 && t > -25000) {
                t--
                x += c - H * x 
                a -= H * a
                R -= H * R
                H = H0 * (OmegaM * a**-3 + OmegaL)**0.5
                data.push({t, x, a, H, HH0: H/H0, R})
            }

            data.reverse()

            H = H0
            c = 1
            a = 1
            x = 0
            t = 0
            var R = R0

            while (t < 15000) {
                t++
                x += c + H * x 
                a += H * a
                R += H * R
                H = H0 * (OmegaM * a**-3 + OmegaL)**0.5
                data.push({t, x, a, H, HH0: H/H0, R})
            }

            
            drawCanvas()
            //drawCanvas2()

        }

        function drawCanvas() {

            var ctx = canvas.getContext("2d")
            var h = canvas.height
            var w = canvas.width
            canvas.width = w

            ctx.textAlign = "right"
            ctx.fillText("time from present (billion years)", w - 10, h - 25)


            ctx.textAlign = "left"
            //ctx.fillText("billion light years", 28, 18)


            ctx.translate(w / 2, h - 20)

            for (var i = 0; i <= zoomY * 0.9; i+=5) {
                ctx.fillText(i, 2, - h * i / zoomY - 8)
            }

            ctx.fillText("distance (Gly)", 10, -h + 35)

            ctx.textAlign = "center"
            ctx.fillStyle = "black"
            ctx.font = "16px sans-serif"
            for (var i = -14; i <= 14; i = i + 1) {
                ctx.fillText(i, i / maxZ * w, 18)
            }


            ctx.lineWidth = 1
            ctx.strokeRect(0, 0, w, -h)
            ctx.strokeRect(0, 0, -w, -h)

            /*ctx.fillStyle = "black"
            data2.forEach(dp => {
                ctx.fillRect(w * dp.z / maxZ, h / 2, 1, 1)
            })*/


            ctx.lineWidth = 4
            ctx.strokeStyle = "black"

            ctx.setLineDash([50, 10])
            ctx.beginPath()
            ctx.moveTo(w * data[0].t / 1000 / maxZ, -h * data[0].R / zoomY)

            data.forEach(dp => {
                //ctx.lineTo(w * dp.t / 1000 / maxZ, -h * dp.HH0 / zoomY)
                ctx.lineTo(w * dp.t / 1000 / maxZ, -h * dp.R / 1000 / zoomY)
            })
            ctx.stroke()

            ctx.beginPath()
            ctx.moveTo(-w/3, -h/8 * 5)
            ctx.lineTo(-w/3 - 120, -h/8 * 5)
            ctx.stroke()

            ctx.fillText("radius of comoving volume", -w/4 + 40, -h/8 * 5)

            ctx.setLineDash([5, 5])
            ctx.beginPath()
            ctx.moveTo(w * data[0].t / 1000 / maxZ, -h * (1/data[1].H) / zoomY)

            data.forEach(dp => {
                if (isNaN(dp.H)) return

                //ctx.lineTo(w * dp.t / 1000 / maxZ, -h * dp.HH0 / zoomY)
                ctx.lineTo(w * dp.t / 1000 / maxZ, -h * (1/dp.H) / 1000 * pc2ly / zoomY)
            })
            ctx.stroke()

            ctx.beginPath()
            ctx.moveTo(-w/3, maxZ + -h/8 * 5)
            ctx.lineTo(-w/3 - 120, maxZ + -h/8 * 5)
            ctx.stroke()

            ctx.fillText("1/H(t) × 1 pc/y", -w/4 + 40, maxZ + -h/8 * 5)

            var age = data[1].t / -1000

            ctx.setLineDash([0])
            ctx.beginPath()
            ctx.moveTo(w * data[0].t / 1000 / maxZ, -h * (age + data[0].t / 1000) / zoomY)

            data.forEach(dp => {
                //ctx.lineTo(w * dp.t / 1000 / maxZ, -h * dp.HH0 / zoomY)
                ctx.lineTo(w * dp.t / 1000 / maxZ, -h * (age + dp.t / 1000) / zoomY)
            })
            ctx.stroke()

            ctx.beginPath()
            ctx.moveTo(-w/3, -h/8 * 5 - 30)
            ctx.lineTo(-w/3 - 120, -h/8 * 5 - 30)
            ctx.stroke()

            ctx.fillText("universe age × 1 ly/y", -w/4 + 40, -h/8 * 5 - 30)

            ctx.setLineDash([2, 8])
            ctx.beginPath()
            ctx.moveTo(w * data[0].t / 1000 / maxZ, -h * (1/data[1].H) / zoomY)

            data.forEach(dp => {
                if (isNaN(dp.H)) return

                //ctx.lineTo(w * dp.t / 1000 / maxZ, -h * dp.HH0 / zoomY)
                ctx.lineTo(w * dp.t / 1000 / maxZ, -h * (1/dp.H) / 1000 / zoomY)
            })
            ctx.stroke()

            ctx.beginPath()
            ctx.moveTo(-w/3, 30 + -h/8 * 5 + 30)
            ctx.lineTo(-w/3 - 120, 30 + -h/8 * 5 + 30)
            ctx.stroke()

            ctx.fillText("1/H(t) × 1 ly/y", -w/4 + 40, 30 + -h/8 * 5 + 30)


        }



    </script>