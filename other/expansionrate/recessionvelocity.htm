<!DOCTYPE html>
<html>
<style>
    #temit {
        position: absolute;
        left:34px;
        top:120px;
        font-size: 140%;
        font-weight: bolder;
    }
    #tobs {
        position: absolute;
        left:630px;
        top:120px;
        font-size: 140%;
        
    }
</style>
<body>
    <canvas id="graph" width="700" height="400"></canvas>

    <div id="temit">\[t_{emit} \]</div>
    <div id="tobs">\[t_{observe} \]</div>
    <script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>


    <script>

        var model = flrw(70, 0.7, 0.3, 10)
        
        draw()

        function draw() {
            var ctx = graph.getContext("2d")
            ctx.fillStyle = "white"
            ctx.fillRect(0, 0, graph.width, graph.height)

            ctx.translate(24, graph.height - 20)

            var zoom = 0.07
            var zoomY = 200
            
            ctx.font = "10pt serif"
            ctx.fillStyle = "black"
            for (j = 0; j < 11; j++) {
                ctx.fillText(j, j * 1000 * zoom - 5, 14)
            }
            
            ctx.fillText("Recessional Velocity (c)", 4, -graph.height + 34)
            
            ctx.textAlign = "right"
            for (j = 0; j < 2; j+=0.5) {
                ctx.globalAlpha = 1
                ctx.fillText(j, -3, 4 +  zoomY * -j)
                ctx.globalAlpha = 0.5
                ctx.beginPath()
                ctx.moveTo(0,  zoomY * -j)
                ctx.lineTo(graph.width, zoomY * -j)
                ctx.stroke()
            }
            ctx.globalAlpha = 1
            
            ctx.fillText("time (Gy)", graph.width - 24, -4)
            
            ctx.strokeStyle = "black"
            ctx.strokeRect(0, 0, graph.width, -graph.height)

            ctx.lineWidth = 4

            var data = model.objs[0].data
            ctx.beginPath()
            ctx.moveTo(0, -data[data.length - 1] * zoomY)

            for (var i = 0; i < data.length; i++) {
                ctx.lineTo(i * zoom, -data[data.length - 1 - i] * zoomY)
            }
            ctx.stroke()


        }


        function flrw(H0, OmegaL, OmegaM, maxZ) {

            // non-flat models get stuck in the loop
            if (OmegaL + OmegaM !== 1) return []

            maxZ = maxZ || 10

            // convert km/s/Mpc  to  Mly/My/Mly
            H0 = H0 / 3.08e19 * 60 * 60 * 24 * 365 * 1e6
            var H = H0
            var c = 1

            var t = 0
            var z = 0
            var lastZ = 0

            // these are our photons, one has a head start
            var x1 = 0.1
            var x2 = 0

            var data = [0]
            var hitTurnaround

            var coVel = 0

            // add a bunch of galaxies to our model
            var objs = []
            for (let i = 1000; i < 30000; i += 1000) {
                //objs.push({i: objs.length, x: i, x0: i, data: [i] })
            }
            //objs.push({x: 12230, x0: 12230, data: [] })
            objs.push({x: 14836, x0: 14833, data: [] })

            while (z < maxZ) {

                // move the photons with the hubble flow (in reverse)
                x1 += c - H * x1
                x2 += c - H * x2

                // the redshift is how far apart the photons have drifted
                lastZ = z
                z = 0.1 / (x1 - x2) - 1


                coVel += 1 / Math.sqrt(OmegaM * Math.pow(1 + z, 3) + OmegaL) * (z - lastZ)


                if (!hitTurnaround && x2 < data[t][1]) {
                    hitTurnaround = t + 1
                    console.log(coVel)
                }

                t++

                data.push([x2])

                for (var ig = 0; ig < objs.length; ig++) {
                    if (!objs[ig].d_T) {

                        // move the galaxies with the hubble flow (in reverse)
                        var dx = H * objs[ig].x
                        objs[ig].x -= dx
                        objs[ig].data.push(dx)

                        if (!objs[ig].hitC && H * objs[ig].x >= 1) {
                            objs[ig].hitC = t
                        }

                        // record when the photons have reached (left) the galaxy
                        if (objs[ig].x <= x2) {
                            objs[ig].d_T = t
                            objs[ig].z = z
                            console.log(z)

                        }
                    }
                }

                // update the Hubble parameter
                H = H0 * Math.sqrt(OmegaM * Math.pow(1 + z, 3) + OmegaL)

            }

            return {data, objs, hitTurnaround}
        }
    </script>
</body>

</html>