<!DOCTYPE html>
<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #graphs {
                height:400px;
                width: 700px;
                position:relative;
            }
            #graphs canvas {
                position:absolute;
                top: 0;
                left: 0;
                height:400px;
                width: 700px;
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 36px;
                border: 0;
                font-size: 12pt;
            }

            input[type=number] {
                appearance:textfield; /* Firefox */
            }


            .caption {
                /*padding:4px 20px;*/
                text-align: right;
            }



            #sse-hypothesis, #sse-lcdm {
                text-align: right;
                font-weight: bold;
            }

            .MathJax {
                font-size: 5pt !important;
            }

            #legend {
                position: absolute;
                left: 350px;
                top:335px;
            }
            #y-axis, #y-axis-noerr {
                position: absolute;
                top:  15px;
                left: 35px;
            }
        </style>
    </head>
<body>

<h3>Supernovae Data - Sum of Squared Errors</h3>

<p>
    Read more about the hypothesis being tested <a href="../index.htm">on the home page.</a> 
</p>


<div id="graph-side">
    <div id="graphs">
    <canvas id="background" height="400" width="700"></canvas>
    <canvas id="graph" height="400" width="700"></canvas>
    <div id="y-axis">
        \( \chi^2 = \Sigma_i (\mu_i^{d} - \mu_i^{m})^2 / \sigma^2 \)
    </div>
    <div id="y-axis-noerr">
        \( \chi^2 = \Sigma_i (\mu_i^{d} - \mu_i^{m})^2  \)
    </div>
    </div>

    <p>Data: <a href="https://github.com/PantheonPlusSH0ES/DataRelease/tree/main/Pantheon%2B_Data/4_DISTANCES_AND_COVAR">
        Pantheon+SH0ES, Distances and Covariances
    </a></p>

    <table>
        <tr>
            <td>Squared Sum of Errors:</td>
            <td>\[\chi^2= \Sigma_i (d_{d} - d_{m})^2 / \sigma^2 \]</td>
            <td>where <i>d<sub>d</sub></i> is the distance modulus in the data, and <i>d<sub>m</sub></i> is the distance predicted by the model.</td>
        
        </tr>
    </table>
    <table id="legend">
        <tr>
            <td class="caption">Hypothesis (<span style="color:red;">red</span>): </td>
            <td>\[  d_L = (1+z)\frac{c}{H_{0}} log(1 + z)  \]</td>
        </tr>
        <tr>
            <td class="caption">&Lambda;CDM (<span style="color:green;">green</span>): </td>
            <td>&Omega;<sub>M</sub>: <input type="number" min="0" value="0.3" step="0.05" id="Omega_M">
                &Omega;<sub>&Lambda;</sub>: <input type="number" min="0" value="0.7" step="0.05" id="Omega_L"></td>
        </tr>
    </table>
    
    <br>
    <br>
    <button id="recalculate">Recalculate LCDM</button> (Press this after changing LCDM parameters... and wait 10 seconds...)
    <br>
    <br>
    <input id="useerrorbars" type="checkbox">Use Error Bars</input> 
    <br>
    <br>
    <input id="usemu" type="checkbox" checked="true">Use Mu</input> 
</div>


<script>

var Hstart = 66
const Hend = 78.5

var sse = []
var sseHypothesis = 0
var sseLCDM = 0
var lowestHypothesis = 0
var lowestLCDM = 0

document.getElementById("recalculate").onclick = e => calculateLCDMErrors()

var black = false

    var details = document.getElementById("details")

    var background = document.getElementById("background")
    var graph = document.getElementById("graph")
    var ctxB = background.getContext("2d")
    var ctxG = graph.getContext("2d")

    var useMuEl = document.getElementById("usemu")
    var useMu = useMuEl.checked
    useMuEl.onchange = e => {
        useMu = !useMu
        zoomGY = getZoom()
        calculateDistances()
        drawGraph()
        drawData()
        calculateLCDMErrors()
    }

    var useErrorEl = document.getElementById("useerrorbars")
    var useError = useErrorEl.checked
    
    var yAxis = document.getElementById("y-axis")
    var yAxisNoErr = document.getElementById("y-axis-noerr")

    var updateYAxis = function () {
        if (useError) {
            yAxis.style.display = "block"
            yAxisNoErr.style.display = "none"
        }
        else {
            yAxis.style.display = "none"
            yAxisNoErr.style.display = "block"
        }
    }
    updateYAxis()

    useErrorEl.onchange = e => {
        console.log("onchange")
        useError = !useError //useErrorEl.value
        //Hstart = useError ? 50 : 64
        zoomGY = getZoom()
        calculateDistances()
        updateYAxis()
        drawGraph()
        drawData()
        calculateLCDMErrors()
    }

    var c = 1
    const pc2ly = 3.261564
    const c0 = 299792.458
        

    var offset = 20
    var zoom = 1
    var zoomG = (graph.width - offset) / (Hend - Hstart) //zoom 

    var getZoom = () => {
        //zoomG = (graph.width - offset) / (Hend - Hstart)
        if (useMu) {
            return useError ? zoom / 6 : zoom * 3 
        }
        else {
            return  (useError ? zoom / 1200000 : zoom / 70000)   
        }
    }
    var zoomGY = getZoom()
    
    var snData = []
    

    var calculateDistances = function () {
        

        var extinction = 0
        for (var i=0; i<snData.length; i++) {
                // distance modulus to parsec luminosity distance
                var ld = Math.pow(10, 0.2 * (snData[i].dm + 5 - extinction)) 

                // convert to comoving distance
                //d = ld / (1+z)
                var d = ld / (1 + snData[i].z)

                // parsec to light years
                //d = d * pc2ly
                //ld = ld * pc2ly

                // ly to Mly
                snData[i].d = d / 1000000
                snData[i].ld = ld / 1000000

        }

        sse = []

        lowestHypothesis = 0
        
        for (var iH = Hstart; iH < Hend; iH += 0.1) {
            sseHypothesis = 0
            sseLCDM = 0

            snData.forEach(sn => {
                sseHypothesis += calculateError(sn, iH)
            })

            if (!lowestHypothesis || sseHypothesis < lowestHypothesis.sse) {
                lowestHypothesis = {sse: sseHypothesis, H0: iH}
            }
            sse.push({H: iH, 
                hypothesis: sseHypothesis, 
                lcdm: sseLCDM    
            })
        }
        
    }
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per million years
    
    // Hubble's Constant (H) is in units of Gly^-1 or ly/y/Gly, so it is divided by 1000  
    
    function drawGraph() {
        sseHypothesis = 0
        
        ctxB.lineWidth = 2
        ctxB.fillStyle = black ? "black" : "white"
        ctxB.fillRect(0, 0, graph.width, graph.height)

        ctxB.strokeStyle = !black ? "black" : "white"
        ctxB.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)

        /*ctxB.fillStyle = "yellow"
        ctxB.globalAlpha = 0.3
        ctxB.fillRect(offset + (67 - Hstart) * zoomG, 0,
                        1 * zoomG, -offset + graph.height)
        ctxB.globalAlpha = 1
        ctxB.fillStyle = "black"
        ctxB.setLineDash([10, 10])
        ctxB.beginPath()
        ctxB.moveTo(offset + (67.5 - Hstart) * zoomG, 0)
        ctxB.lineTo(offset + (67.5 - Hstart) * zoomG, -offset + graph.height)
        ctxB.stroke()
        ctxB.setLineDash([])
        */
        ctxB.font = "14px sans-serif"

        ctxB.fillRect(offset + 16, offset + 33, 2, 2)
        ctxB.fillStyle = "black"
        


        ctxB.fillStyle = !black ? "black" : "white"
        ctxB.textAlign = "left"
        //ctxB.fillText("SSE to Pantheon+SH0ES", offset + 5, offset)

        ctxB.textAlign = "right"
        ctxB.fillText("H", graph.width - 10, graph.height - 30)
        ctxB.font = "10px sans-serif"
        ctxB.fillText("0", graph.width - 4, graph.height - 30 + 4)
        
        
        ctxB.textAlign = "left"
        var dgi
        ctxB.font = "10px sans-serif"
        ctxB.fillStyle = "black"
        var range = useMu ? !useError ? [0.00005, 0.0001] : [0.001, 0.002] : !useError ? [5, 25] : [100, 1000]
        for (dgi = 0; dgi <= range[1] * 1e6; dgi+=range[0] * 1e6) {
            ctxB.fillText(dgi.toString().replace("000", "K"), 0, -offset + graph.height - dgi * zoomGY + 4)    
        }
        
        for (dgi = Hstart; dgi < Hend; dgi+=1) {
            ctxB.fillText(dgi, offset + (dgi - Hstart) * zoomG - 5, graph.height - 5)    
        }        
    }

    function drawData() {
        graph.width = graph.width
        ctxG.fillStyle = !black ? "black" : "white"
            
        ctxG.strokeStyle = "red"
        ctxG.beginPath()
        ctxG.moveTo(offset, graph.height - sse[0].hypothesis * zoomGY - offset)

        sse.forEach(data => {
            ctxG.lineTo(offset + (data.H - Hstart) * zoomG, 
                    -offset + graph.height - data.hypothesis * zoomGY)
        })
        ctxG.stroke()
        
        ctxG.strokeStyle = "green"
        ctxG.beginPath()
        ctxG.moveTo(offset, graph.height - sse[0].hypothesis * zoomGY - offset)

        sse.forEach(data => {
            if (data.lcdm) {
                ctxG.lineTo(offset + (data.H - Hstart) * zoomG, 
                    -offset + graph.height - data.lcdm * zoomGY)
            }
        })
        ctxG.stroke()

    }

    drawGraph()

    fetch("https://mikehelland.github.io/hubbles-law/data/Pantheon+SH0ES_z_mu.csv").then(res => res.text()).then(text => {
        //console.log(text)

        var lines = text.split("\n")
        for (var i = 1; i < lines.length; i++) {
            var line = lines[i].split(",")
            if (line[0]) {
                snData.push({"dm": parseFloat(line[2]), "z": parseFloat(line[0]), "derr": parseFloat(line[3])})
            }
            
        }
        calculateDistances()

        drawData()

        calculateLCDMErrors()
        
    })

    function calculateDistanceModulus(d) {
        return 5 * Math.log10(d) + 25 
    }
    
    
    function calculateError(sn, H) {

        var d = c0 / H * Math.log(1 + sn.z)
        var dd

        if (useMu) {
            
            d = calculateDistanceModulus(d * (1 + sn.z)) 
            dd = sn.dm
        }
        else {
            dd = sn.d 
        }

        if (Math.round(H * 10) === 710) {
            //console.log(dd, d)
        }
        
        return Math.pow(dd - d, 2) / (useError ? Math.pow(sn.derr, 2) : 1)
                
    }

    function calculateLCDMError(sn) {
        sseLCDM = 0
        var dlcdm = nwFLRW(H0, Omega_L, Omega_M, sn.z).DC //zToD(sn.z) 
        //console.log(dlcdm)
        var dd 
        
        if (useMu) {
            dlcdm = dlcdm * (1 + sn.z)  
            dlcdm = calculateDistanceModulus(dlcdm)
            dd = sn.dm
        }
        else {
            dd = sn.d 
        }    
        
        return Math.pow(dd - dlcdm, 2) / (useError ? Math.pow(sn.derr, 2) : 1) 
        
    }

    var handle
    function calculateLCDMErrors() {
        clearInterval(handle)
        console.log("calcaulting lcdms")
        var sseLCDM
        var i = 0
        lowestLCDM = 0 
        handle = setInterval(() => {

            sseLCDM = 0

            setLCDM(sse[i].H)
            snData.forEach(sn => {
                sseLCDM += calculateLCDMError(sn)
            })
            sse[i].lcdm = sseLCDM
            i++

            if (!lowestLCDM || sseLCDM < lowestLCDM.sse) {
                lowestLCDM = {sse: sseLCDM, H0: sse[i].H}
            }

            if (i >= sse.length) {
                clearInterval(handle)
            }

            drawData()

        }, 0)

    }



    var OmegaMinput = document.getElementById("Omega_M")
    var OmegaLinput = document.getElementById("Omega_L")    
    var Omega_L, Omega_M, H0, Omega_k
    OmegaMinput.onchange = e => calculateLCDMError()
    OmegaLinput.onchange = e => calculateLCDMError()
    
    function setLCDM(H) {
        Omega_L = OmegaLinput.value * 1
        Omega_M = OmegaMinput.value * 1
        H0 = H
        
    }


    
</script>

<script src="flrw.js"></script>
<script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>
