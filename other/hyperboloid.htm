<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometries</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="main.css">
	</head>
	<body>

		<div id="info"><a href="https://threejs.org" target="_blank" rel="noopener">three.js</a> webgl - geometries</div>

		<!-- Import maps polyfill -->
		<!-- Remove this when import maps will be widely supported -->
		<script async src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>

		<script type="importmap">
		  {
			"imports": {
			  "three": "https://unpkg.com/three@0.154.0/build/three.module.js",
			  "three/addons/": "https://unpkg.com/three@0.154.0/examples/jsm/"
			}
		  }
		  

		</script>

		<script type="module">

			import * as THREE from 'three';
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import { ParametricGeometry } from 'three/addons/geometries/ParametricGeometry.js';
			import Stats from 'three/addons/libs/stats.module.js';
			console.log(ParametricGeometry)

			const width = 1000
			const height = 1000
			var slices = 20
			
			let stats;
			const a = 1
			const b = 1
			const wireframe = true

			const cos = t => Math.cos(2 * Math.PI * t)
			const cosh = t => Math.cosh(2 * Math.PI * t)
			const sin = t => Math.sin(2 * Math.PI * t)
			const sinh = t => Math.sinh(2 * Math.PI * t)

			const renderer = new THREE.WebGLRenderer({ antialias: true });
			renderer.setSize(width, height);
			renderer.setPixelRatio(devicePixelRatio);

			function hyperboloid(u, v, target) {
				const x = a * cosh(-1 / 2 + v) * cos(-1 / 2 + u);
				const y = a * cosh(-1 / 2 + v) * sin(-1 / 2 + u);
				const z = b * sinh(-1 / 2 + v);

				target.set(x, z, y);
			}

			function parametricObj() {
				console.log(THREE)
				const geometry = new ParametricGeometry(
					hyperboloid,
					slices,
					slices
				);
				const material = new THREE.MeshNormalMaterial({
					side: THREE.DoubleSide,
					wireframe
					//    color: 0x000
				});
				return new THREE.Mesh(geometry, material);
			}
			
			const scene = new THREE.Scene();
			scene.background = new THREE.Color(0xffffff);
			scene.add(parametricObj());
			axis(scene);

			function line([x1, y1, z1], [x2, y2, z2], color = 0x000000) {
				const geometry = new THREE.Geometry();
				geometry.vertices.push(new THREE.Vector3(x1, y1, z1));
				geometry.vertices.push(new THREE.Vector3(x2, y2, z2));
				const material = new THREE.LineBasicMaterial({ color });
				return new THREE.Line(geometry, material);
			}
			function arrow([x, y, z], [rx, ry, rz]) {
				const geometry = new THREE.ConeBufferGeometry(5, 25, 25);
				const material = new THREE.MeshBasicMaterial({ color: 0x000000 });
				const cone = new THREE.Mesh(geometry, material);
				cone.position.set(x, y, z);
				cone.rotation.set(rx,ry,rz)
				return cone;
			}
			function axis(scene) {
				const w = 300;
				const axis = [
					[
						[-w, 0, 0],
						[w, 0, 0],
						[(1 / 2) * Math.PI, 0, (1 / 2) * Math.PI],
						[-(1 / 2) * Math.PI, 0, -(1 / 2) * Math.PI]
					],
					[[0, -w, 0], [0, w, 0], [Math.PI, 0, 0], [0, -Math.PI, 0]],
					[
						[0, 0, -w],
						[0, 0, w],
						[(1 / 2) * Math.PI, 0, Math.PI],
						[-(1 / 2) * Math.PI, 0, Math.PI]
					]
				].map(([from, to, rotFrom, rotTo]) => {
					//scene.add(arrow(from, rotFrom));
					//scene.add(arrow(to, rotTo));
					//scene.add(line(from, to));
				});
			}

			const fov = 45;
			const aspect = width / height;
			const near = 0.01;
			const far = 100000;
			const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
			camera.lookAt(scene.position);
			camera.position.set(200, 400, -700);

			document.body.appendChild( renderer.domElement );
			renderer.render( scene, camera )
			//init();
			//animate();

			function init() {

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
				camera.position.y = 400;

				scene = new THREE.Scene();

				let object;

				const ambientLight = new THREE.AmbientLight( 0xcccccc, 1.5 );
				scene.add( ambientLight );

				const pointLight = new THREE.PointLight( 0xffffff, 2.5, 0, 0 );
				camera.add( pointLight );
				scene.add( camera );

				const map = new THREE.TextureLoader().load( 'textures/uv_grid_opengl.jpg' );
				map.wrapS = map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 16;
				map.colorSpace = THREE.SRGBColorSpace;

				const material = new THREE.MeshPhongMaterial( { map: map, side: THREE.DoubleSide } );

				//

				object = new THREE.Mesh( new THREE.SphereGeometry( 75, 20, 10 ), material );
				object.position.set( - 300, 0, 200 );
				scene.add( object );

				object = new THREE.Mesh( new THREE.IcosahedronGeometry( 75, 1 ), material );
				object.position.set( - 100, 0, 200 );
				scene.add( object );

				object = new THREE.Mesh( new THREE.OctahedronGeometry( 75, 2 ), material );
				object.position.set( 100, 0, 200 );
				scene.add( object );

				object = new THREE.Mesh( new THREE.TetrahedronGeometry( 75, 0 ), material );
				object.position.set( 300, 0, 200 );
				scene.add( object );

				//

				object = new THREE.Mesh( new THREE.PlaneGeometry( 100, 100, 4, 4 ), material );
				object.position.set( - 300, 0, 0 );
				scene.add( object );

				object = new THREE.Mesh( new THREE.BoxGeometry( 100, 100, 100, 4, 4, 4 ), material );
				object.position.set( - 100, 0, 0 );
				scene.add( object );

				object = new THREE.Mesh( new THREE.CircleGeometry( 50, 20, 0, Math.PI * 2 ), material );
				object.position.set( 100, 0, 0 );
				scene.add( object );

				object = new THREE.Mesh( new THREE.RingGeometry( 10, 50, 20, 5, 0, Math.PI * 2 ), material );
				object.position.set( 300, 0, 0 );
				scene.add( object );

				//

				object = new THREE.Mesh( new THREE.CylinderGeometry( 25, 75, 100, 40, 5 ), material );
				object.position.set( - 300, 0, - 200 );
				scene.add( object );

				const points = [];

				for ( let i = 0; i < 50; i ++ ) {

					points.push( new THREE.Vector2( Math.sin( i * 0.2 ) * Math.sin( i * 0.1 ) * 15 + 50, ( i - 5 ) * 2 ) );

				}

				object = new THREE.Mesh( new THREE.LatheGeometry( points, 20 ), material );
				object.position.set( - 100, 0, - 200 );
				scene.add( object );

				object = new THREE.Mesh( new THREE.TorusGeometry( 50, 20, 20, 20 ), material );
				object.position.set( 100, 0, - 200 );
				scene.add( object );

				object = new THREE.Mesh( new THREE.TorusKnotGeometry( 50, 10, 50, 20 ), material );
				object.position.set( 300, 0, - 200 );
				scene.add( object );

				//

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.useLegacyLights = false;
				document.body.appendChild( renderer.domElement );

				stats = new Stats();
				document.body.appendChild( stats.dom );

				//

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				const timer = Date.now() * 0.0001;

				camera.position.x = Math.cos( timer ) * 800;
				camera.position.z = Math.sin( timer ) * 800;

				camera.lookAt( scene.position );

				scene.traverse( function ( object ) {

					if ( object.isMesh === true ) {

						object.rotation.x = timer * 5;
						object.rotation.y = timer * 2.5;

					}

				} );

				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>
