<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #right-side {
                left: 730px;
                top: 20px;
                position: absolute;
            
            }
            #graph {
                height:600px;
                width: 800px;
            }
            .model-label {
                margin: 4px 0;
                
                
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 80px;
            }

            .model-units {
                columns: #444444;
                font-size: 12px;
                padding-left:4px;
            }

            #details, #notes {
                width:700px;
            }
            #notes {
                margin-left: 20px;
            }

            .model-header {
                padding:4px;
                display:flex;
                align-items: center;
            }
            .header-spacer {
                flex-grow: 1
            }

            td, th {
                padding:4px 20px;
            }
        </style>
    </head>
<body>

<h3>Hubble's Law Testing Page </h3>

<p>
    Read more about the models being tested <a href="index.htm">on the home page.</a> 
</p>
<div id="details"></div>


<div id="graph-side">
    <button id="startButton">Run All</button> <button id="stopButton">Stop</button>
    <br>
    <br>
    X-axis: 
    <select id="graph-x-axis">
        <option>starting distance to target (billion light years)</option>
        <option>time to target (billions of years)</option>
        <option>z redshift</option>
    </select>
    <br>    
    Y-axis: 
    <select id="graph-y-axis">
        <option>time to target (billions of years)</option>
        <option>time difference from static (billions of years)</option>
        <option>delayed time / static time - 1</option>
        <option>(1 - static time / delayed time)</option>
        <option>(1 - v)</option>
        <option>z redshift</option>
        <option>starting distance to target (billion light years)</option>
        
    </select>
    <br>
    <canvas id="graph" height="600" width="800"></canvas>
    <br>
    Zoom X: <input type="number" id="graph-zoom-x" value="1.0" step="0.01" min="0.01">
    Zoom Y: <input type="number" id="graph-zoom-y" value="1.0" step="0.01" min="0.01">

    <hr>
    Starting frequency=<input id="start-freq">
    <br>
    Log when t=<input id="find-t"> d=<input id="find-d"> z=<input id="find-z"> v=<input id="find-v"> target=<input id="find-target">
    
    <pre id="output"></pre>
</div>

<div id="right-side">
<script>
var black = true

var zs = [
    ]

    var outputDiv = document.getElementById("output")
    var trunc = n => Math.trunc(n * 1000) / 1000
    var output = (model, photon) => {
        outputDiv.innerHTML += model.name + ", " + 
                                "t=" + model.t.toString().padEnd(8) + " d=" + 
                                trunc(photon.x) + ", z=" + trunc(photon.z) + ", v=" + 
                                trunc(photon.dx) + ", f=" + trunc(photon.f) + 
                                ", w=" + trunc(299792458/photon.f) + "\n"
    }
    
    var zoutput = document.getElementById("zoutput")
    for (var zz of zs) {
        zoutput.innerHTML += zz.z.toString().padEnd(12) +
                            (zz.t).toString().padEnd(14) + 
                            (zz.d).toString().padEnd(14) + 
                             "\n" 
    }

    var details = document.getElementById("details")

    var graph = document.getElementById("graph")
    var ctxG = graph.getContext("2d")
    var models = []

    var startFreqInput = document.getElementById("start-freq")
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per million years
    
    // Hubble's Constant (H) is in units of Gly^-1 or ly/y/Gly, so it is divided by 1000  

    var c = 1

    var zoom = 0.035
    var zoom_gx = 0.95 * 0.3
    var zoom_gy = 0.95 * 0.3
    var zoomG = zoom * zoom_gx
    var zoomGY = zoom * zoom_gy
    var offset = 20
    var offsetX = 400

    var dgn
    
    var zoomz = 10000

    var drawx, drawy, dgt, dgm, dgi
    function drawGraph() {
        
        ctxG.lineWidth = 1
        ctxG.fillStyle = black ? "black" : "white"
        ctxG.fillRect(0, 0, graph.width, graph.height)

        ctxG.strokeStyle = !black ? "black" : "white"
        ctxG.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)
        
        ctxG.strokeStyle = "#808080"
        for (var y = 0; y < 100000; y+=5000) {
            ctxG.beginPath()
            ctxG.moveTo(offset, graph.height - offset - (y) * zoomGY)
            ctxG.lineTo(graph.width, graph.height - offset - (y) * zoomGY)
            //offsetX + drawx * zoomG * dgn, -offset + graph.height - drawy * zoomGY
            ctxG.stroke()
        }

        for (dgn = -1; dgn <= 1; dgn+=2) {
            
            for (var x = 0; x < 100000; x+=5000) {
                ctxG.beginPath()
                ctxG.moveTo(offsetX + x * zoomG * dgn, 0)
                ctxG.lineTo(offsetX + x * zoomG * dgn, graph.height - offset)
                //offsetX + drawx * zoomG * dgn, -offset + graph.height - drawy * zoomGY
                ctxG.stroke()
            }
        }
        
        ctxG.lineWidth = 2
        for (dgn = -1; dgn <= 1; dgn+=2) {
        //for (dgn = 1; dgn < 2; dgn+=2) {
            for (dgm of models) {
                ctxG.strokeStyle = dgm.color
                ctxG.beginPath()
                ctxG.moveTo(offsetX, graph.height - offset)
                for (dgt of dgm.targets) {
                    if (dgt.hit) {

                        if (xAxis.selectedIndex === 0) {
                            drawx = dgt.start
                        }
                        else if (xAxis.selectedIndex === 1) {
                            drawx = dgt.hit
                        }
                        else if (xAxis.selectedIndex === 2) {
                            drawx = (dgt.z * 10000) || ((1 - dgt.dx) / dgt.dx) * 10000
                        }

                        if (yAxis.selectedIndex === 0) {
                            drawy = dgt.hit
                        }
                        else if (yAxis.selectedIndex === 1) {
                            // show the difference in time with a static model
                            drawy = dgt.hit - dgt.start
                        }
                        else if (yAxis.selectedIndex === 2) {
                            // show the ratio with a static model
                            drawy = (dgt.hit / dgt.start - 1) * 10000
                        }
                        else if (yAxis.selectedIndex === 3) {
                            // show the inverse ratio with a static model
                            drawy = (1 - dgt.start / dgt.hit) * 10000

                        }
                        else if (yAxis.selectedIndex === 4) {
                            // v_light or v_target
                            drawy = dgt.dx * 10000

                        }
                        else if (yAxis.selectedIndex === 5) {
                            // z = (freq_emit - freq_observes) / freq_observer
                            drawy = (dgt.z * 10000) //|| ((1 - dgt.dx) / dgt.dx) * 10000

                        }
                        else if (yAxis.selectedIndex === 6) {
                            drawy = dgt.start

                        }

                        ctxG.lineTo(offsetX + drawx * zoomG * dgn, -offset + graph.height - drawy * zoomGY)

                    }
                }

                ctxG.stroke()
            
            }
            
        }

        ctxG.font = "14px sans-serif"
        
        ctxG.fillStyle = !black ? "black" : "white"
        ctxG.textAlign = "right"
        ctxG.fillText(xAxis.value, graph.width - 4, graph.height - 30)
        ctxG.textAlign = "left"
        ctxG.fillText(yAxis.value, offset + 5, offset)
        
        ctxG.font = "10px sans-serif"
        if (yAxis.selectedIndex < 2 || yAxis.selectedIndex === 6) {
            for (dgi = 0; dgi < 100; dgi+=5) {
                ctxG.fillText(dgi, 4, -offset + graph.height - dgi * 1000 * zoomGY + 4)    
            }
        }
        else {
            for (dgi = 0; dgi < 1000; dgi+=10) {
                ctxG.fillText(dgi / 10, 4, -offset + graph.height - dgi / 10 * 10000 * zoomGY + 4)    
            }
        }

        if (xAxis.selectedIndex < 2) {
            for (dgi = -50; dgi < 50; dgi+=10) {
                ctxG.fillText(dgi, offsetX + dgi * 1000 * zoomG - 3, graph.height - 5)    
            }
        }
        else {
            for (dgi = 0; dgi < 110; dgi+=10) {
                ctxG.fillText(dgi / 10, offsetX + dgi / 10 * 10000 * zoomG + 4, graph.height - 5)    
            }
        }
    }

    function setupModel(model) {

        var header = document.createElement("div")
        header.className = "model-header"


        label = document.createElement("div")
        label.innerHTML = model.name
        label.className = "model-label"
        header.appendChild(label)

        if (model.H) {
            var label = document.createElement("div")
            label.innerHTML = "H = "
            label.className = "input-label"
                    
            var input = document.createElement("input")
            input.type = "number"
            input.value = model.H
            input.step = 0.0001
            
            input.onchange = e => model.H = parseFloat(input.value)

            var spacer = document.createElement("div")
            spacer.innerHTML = "&nbsp;"//model.unitH
            spacer.className = "header-spacer"

            header.appendChild(spacer)
            header.appendChild(label)
            header.appendChild(input)

        }
            
        
        details.appendChild(header)
        
        model.canvas = document.createElement("canvas")
        model.canvas.onclick = () => {
            if (model.running || model.ran) {
                resetModel(model)
            }
            else {
                runModel(model)
            }
        }
        details.appendChild(model.canvas)
        details.appendChild(document.createElement("br"))

        model.ctx = model.canvas.getContext("2d")
        model.nextTarget = 0

        model.canvas.width = 700
        model.canvas.height = 30
        
        // make a target every 200 million light years until 20 billion
        model.targets = []
        for (var i = 200; i <= 120000; i+=200) {
            model.targets.push({label: i/1000, start: i, x: i})
        }

        model.ctx.lineWidth = 1
        draw(model.ctx, model)

        models.push(model)
    }

    function stopModel(model) {
        clearInterval(model.handle)

        model.running = false
        model.ran = true
    }

    function resetModel(model) {
        
        stopModel(model)
    
        model.ran = false
        model.photon.x = 0
        model.photon.f_start = startFreqInput.value || model.photon.f_start || 6e5 
        model.photon.f = model.photon.f_start
        model.photon.w = 299792458 / model.photon.f
        model.photon.dx = c
        model.nextTarget = 0
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
        })
    
        model.t = 0

        draw(model.ctx, model)
    }

    function draw(ctx, exp) {

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

        for (var i = 0; i < exp.targets.length; i++) {
            ctx.strokeStyle = exp.targets[i].hit ? exp.color : "#888888"
            ctx.beginPath()
            ctx.moveTo(exp.targets[i].x * zoom, 0)
            ctx.lineTo(exp.targets[i].x * zoom, ctx.canvas.height)
            //ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

            if (exp.targets[i].hit) {
                //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
                //ctx.fillText(exp.targets[i].hit, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            }

            ctx.stroke()
        }

        ctx.fillStyle = "yellow"
        ctx.fillRect(exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
    }

    function runModel(model) {
        
        resetModel(model)
        
        model.running = true

        var findT = document.getElementById("find-t").value
        var findD = document.getElementById("find-d").value
        var findZ = document.getElementById("find-z").value
        var findV = document.getElementById("find-v").value
        var findTarget = document.getElementById("find-target").value
                    
        var x, x2, dx, dx2
        var i
        var batch = 100
        model.handle = setInterval(function () {
            for (i = 0; i < batch; i++) {
                if (model.targets[model.nextTarget]) {//&& model.t < 80000) {
                    model.t++
                    x = model.photon.x
                    x2 = model.targets[model.nextTarget].x
                    
                    model.next()

                    dx = model.photon.x - x
                    dx2 = model.targets[model.nextTarget].x - x2

                    var z = (model.photon.f_start - model.photon.f) / model.photon.f
                    if (model.expanding) {
                        //dx2 = dx2 - (dx - 1)
                        z = Math.sqrt((1 + dx2) / (1 - dx2)) - 1
                    }
                    model.photon.z = z
                    
                    if (findT && fintdT === "all") {
                        output(model, model.photon)
                    }
                    else if (findT && model.t >= findT) {
                        output(model, model.photon)
                        findT = 0
                    }
                    if (findZ && z >= findZ) {
                        output(model, model.photon)
                        findZ = 0
                    }
                    if (findD && findD === "all") {
                        output(model, model.photon)
                    }
                    else if (findD && model.photon.x >= findD) {
                        output(model, model.photon)
                        findD = 0
                    }
                    if (findV && model.photon.dx >= findV) {
                        output(model, model.photon)
                        findV = 0
                    }
                    if (model.targets[model.nextTarget].x <= model.photon.x) {
                        
                        if (findTarget && findTarget === "all") {
                            output(model, model.photon)
                        }
                        else if (findTarget && model.targets[model.nextTarget].start >= findTarget) {
                            output(model, model.photon)
                            findTarget = 0
                        }

                        model.targets[model.nextTarget].hit = model.t

                        model.targets[model.nextTarget].z = z
                        model.targets[model.nextTarget].dx = model.expanding ? 
                            (model.targets[model.nextTarget].x - x2) :
                            (1 - (model.photon.x - x))
                        
                        model.nextTarget++
                    }
                }
                else {
                    clearInterval(model.handle)
                    model.running = false
                    model.ran = true
                }
            }
        }, 0)
    }

    setupModel({
        div: document.getElementById("staticModel"),
        name: "Static",
        color: "blue", 
        photon: {x: 0},
        next: function () {
            this.photon.x += c
        }
    })

    setupModel({
        div: document.getElementById("redshift1"),
        name: "v<sub>light</sub> = c - H &times; D",
        color: "green", 
        H: 0.0756,
        unitH: "ly/y/Mly",
        photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
        //photon: {x: 0, dx: c, f: 1, w: 299792458, f_start: 1},
        next: function () {
            this.photon.dx = c - this.H / 1000 * this.photon.x
            this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
            this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
        }
    })

    setupModel({
        div: document.getElementById("redshift1"),
        name: "v<sub>light</sub> = c / (1 + H &times; D)<sup>2</sup>",
        color: "red", 
        H: 0.0756,
        unitH: "ly/y/Mly",
        photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
        //photon: {x: 0, dx: c, f: 1, w: 299792458, f_start: 1},
        next: function () {
            this.photon.dx = c / Math.pow(1 + this.H / 1000 * this.photon.x, 2)
            this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
            this.photon.f = (this.photon.dx * 299792458 / this.photon.w) 
        }
    })


    setInterval(() => {
        for (var m = 0; m < models.length; m++) {
            if (models[m].running) {
                draw(models[m].ctx, models[m]) 
            }
        }

        drawGraph()
    }, 1000 / 60)

document.getElementById("startButton").onclick = e => models.forEach(model => runModel(model))
document.getElementById("stopButton").onclick = e => models.forEach(model => stopModel(model))

document.getElementById("graph-zoom-x").onchange = e => {zoomG = zoom * zoom_gx * e.target.value}
document.getElementById("graph-zoom-y").onchange = e => {zoomGY = zoom * zoom_gy * e.target.value}

var yAxis = document.getElementById("graph-y-axis")
var xAxis = document.getElementById("graph-x-axis")

setTimeout(() => {
    //models.forEach(model => runModel(model))
}, 500)

setTimeout(() => {
    //models.forEach(model => stopModel(model))
}, 10000)

</script>

