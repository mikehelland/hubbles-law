<!DOCTYPE html>
<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #graphs {
                height:400px;
                width: 700px;
                position:relative;
            }
            #graphs canvas {
                position:absolute;
                top: 0;
                left: 0;
                height:400px;
                width: 700px;
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 36px;
                border: 0;
                font-size: 12pt;
            }

            input[type=number] {
                appearance:textfield; /* Firefox */
            }


            .caption {
                /*padding:4px 20px;*/
                text-align: right;
            }



            #sse-hypothesis, #sse-lcdm {
                text-align: right;
                font-weight: bold;
            }

            .MathJax {
                font-size: 5pt !important;
            }

            #legend {
                position: absolute;
                left: 350px;
                top:335px;
            }
            #y-axis {
                position: absolute;
                top: -15px;
                left: 25px;
            }
        </style>
    </head>
<body>

<h3>Metallicity</h3>

<canvas id="background" height="300" width="1000"></canvas>

<div>

    <ul>
        <li>850.1<sup>[1]</sup>, z=4.26, Z ≥ 1 </li>
        <li>850.2<sup>[1]</sup>, z=4.26, Z < 1 </li>
        <li>GS-z12<sup>[2]</sup>, z = 12.479, Z ≈ 1</li>
        <li>LLS1723<sup>[3]</sup>, z = 4.391, log(Z/Z<sub>sol</sub>) < −4.14</li>
    </ul>
    
    <p>
        [1] <a href="https://arxiv.org/abs/2306.16039">https://arxiv.org/abs/2306.16039</a>
    <b>Hidden giants in JWST's PEARLS: An ultra-massive z=4.26 sub-millimeter galaxy that is invisible to HST</b>

    <br>
    [2] <a href="https://arxiv.org/abs/2311.09908">https://arxiv.org/abs/2311.09908</a>
    <b>JADES: Carbon enrichment 350 Myr after the Big Bang in a gas-rich galaxy</b>

    <br>

    [3] <a href="https://arxiv.org/abs/1812.05098">https://arxiv.org/abs/1812.05098</a>
    <b>Exploring the origins of a new, apparently metal-free gas cloud at
        z = 4.4</b>
</div>
<script src="flrw.js"></script>

<script>
    const black = false
    var graph = document.getElementById("background")
    var ctxB = graph.getContext("2d")

    var metallicity = true

    var offset = 20
    var height = graph.height - offset
    var zoom = 1
    var zoomGY = height * 0.5
    var zoomG = zoom * 6.9

    var Omega_M = 0.3 
    var Omega_L = 0.7
    var Omega_k = 0
    var H0 = 68

    var points = []
    points.push({name: "solar", z: 0, Z: 1, x:0})
    points.push({name: "SMC", z: 0, Z: 0.25, x:0})
    points.push({name: "LLS1723", z: 4.391, Z: 0.001})
    points.push({name: "850.1", z: 4.26, Z: 1.05})
    points.push({name: "850.2", z: 4.26, Z: 0.5})
    points.push({name: "GS z12", z: 12.479, Z: 1.01})
    points.forEach(point => {
        if (point.z === 0) return 
        point.x = FLRW(H0, Omega_L, Omega_M, point.z).lookback
    })

    var mid = (graph.height - offset)/2

    var zs = [];
    [0.5, 1, 2, 3, 4, 5, 10, 20].forEach(z => {
        zs.push({z, t: FLRW(H0, Omega_L, Omega_M, z).lookback})
    })

    var z226 = FLRW(H0, Omega_L, Omega_M, 2.26).lookback
    var z426 = FLRW(H0, Omega_L, Omega_M, 4.26).lookback

    var z128 = FLRW(H0, Omega_L, Omega_M, 12.8).lookback


    //zs.push({z: "BB", t: 13.81781132270681})
    var bb = 13.8178

    var data = [
        /*{color: "blue", tm: 
        [
            {t: 0, m: 1},
            {t: 7, m: 0.75},
            {t: zs[5].t, m: 0}
        ]},
        {color: "green", tm: 
        [
            {t: 0, m: 1},
            {t: 7, m: 0.9},
            {t: zs[5].t, m: 0.3},
            {t: zs[6].t, m: 0.0}
        ]},
        {color: "purple", tm: 
        [
            {t: 0, m: 1},
            {t: zs[1].t, m: 0.95},
            {t: zs[2].t, m: 0.8},
            {t: zs[6].t - 0.2, m: 0.8},
            {t: zs[6].t + 0.1, m: 0.0}
        ]},
        */
        {color: "green", tm: 
        [
            {t: 0, m: 1},
            {t: FLRW(H0, Omega_L, Omega_M, 3.3).DT, m: 0.2},
            {t: FLRW(H0, Omega_L, Omega_M, 8).DT, m: 0.1}
        ]
        }
    ]


    function drawGraph() {
        sseHypothesis = 0
        
        ctxB.lineWidth = 2
        ctxB.fillStyle = black ? "black" : "white"
        ctxB.fillRect(0, 0, graph.width, graph.height)

        ctxB.strokeStyle = !black ? "black" : "white"
        ctxB.strokeRect(offset, offset, graph.width, graph.height - 2*offset)

        ctxB.font = "14px sans-serif"

        ctxB.fillRect(offset + 16, offset + 33, 2, 2)
        ctxB.fillStyle = "black"

        ctxB.fillStyle = !black ? "black" : "white"
        ctxB.textAlign = "left"
        //ctxB.fillText("SSE to Pantheon+SH0ES", offset + 5, offset)

        if (metallicity) {
            ctxB.textAlign = "left"
            ctxB.fillText("Metallicity", 4 + offset, 34)

            ctxB.globalAlpha = 0.2
            ctxB.beginPath()
            ctxB.moveTo(offset, (graph.height - offset)/2)
            ctxB.lineTo(graph.width, (graph.height - offset)/2)
            ctxB.setLineDash([20, 10])
            ctxB.stroke()
            ctxB.globalAlpha = 1
            ctxB.setLineDash([])

            ctxB.fillStyle = "#eeee88"
            ctxB.globalAlpha = 0.4
            ctxB.fillRect(offset, offset, z128 * 10 * zoomG, graph.height - 2*offset)
            ctxB.globalAlpha = 1

            ctxB.font = "bold 28pt serif" 
            ctxB.fillStyle = !black ? "black" : "white"
            ctxB.fillText('"Today"', graph.width/2.5, graph.height/2)

            ctxB.font = "14px sans-serif"
            
            for (var i = 0; i < points.length; i++) {
                
                ctxB.fillRect(offset - 5 + points[i].x * 10 * zoomG, graph.height - offset - mid * points[i].Z - 5, 10, 10)

                ctxB.fillText(points[i].name, offset + points[i].x * 10 * zoomG, graph.height - offset - mid * points[i].Z - 10)

            }

        }
        else {
            ctxB.fillStyle = "#eeee88"
            ctxB.globalAlpha = 0.4
            ctxB.fillRect(offset, offset, z226 * 10 * zoomG, graph.height - 2*offset)
            ctxB.globalAlpha = 1

            ctxB.textAlign = "center"

            ctxB.font = "bold 28pt serif" 
            ctxB.fillStyle = !black ? "black" : "white"
            ctxB.fillText('"Local"', graph.width/2.5, graph.height/2 - 20)

            ctxB.font = "italic 18pt serif" 
            ctxB.fillText('(range of Pantheon+SH0ES Type Ia SNe data)', graph.width/2.5, graph.height/2 + 10)
        }

        ctxB.font = "14px sans-serif"

        ctxB.textAlign = "left"
        ctxB.fillText('ΛCDM', offset, 12)

        ctxB.textAlign = "center"
        ctxB.fillText("Lookback Time (billion years)", graph.width / 2 + offset, graph.height - 30)
        ctxB.fillText("Redshift z", graph.width / 2 + offset, 34)
        
        ctxB.fillStyle = "red"
        ctxB.globalAlpha = 0.2
        ctxB.fillRect(offset + bb * 10 * zoomG, offset, 100, graph.height - 2*offset)
        ctxB.globalAlpha = 1
        


        var dgi
        ctxB.font = "10px sans-serif"
        ctxB.fillStyle = "black"
        for (dgi = 0; dgi <= 1.5; dgi+=0.5) {
            ctxB.fillText(dgi, 8, -offset + graph.height - dgi * zoomGY + 4)    
        }
        
        for (dgi = 0; dgi <= 140; dgi+=10) {
            ctxB.fillText(dgi/10, offset + dgi  * zoomG, graph.height - 5)    
        }        

        ctxB.lineWidth = 1
        ctxB.strokeStyle = "#888888"
        zs.forEach(z => {
            ctxB.fillText(z.z, offset + z.t * 10 * zoomG, 10)    
            ctxB.beginPath()
            ctxB.moveTo(offset + z.t * 10 * zoomG, offset)
            ctxB.lineTo(offset + z.t * 10 * zoomG, height)
            ctxB.stroke()
        })

        data.forEach(line => {
            ctxB.strokeStyle = line.color
            ctxB.beginPath()
            ctxB.moveTo(offset + line.tm[0].t, -offset + graph.height - line.tm[0].m * zoomGY)
            for (dgi = 1; dgi < line.tm.length; dgi++) {
                ctxB.lineTo(offset + line.tm[dgi].t * 10 * zoomG, -offset + graph.height - line.tm[dgi].m * zoomGY)
            }
            ctxB.stroke()
        })
    }

    drawGraph()



</script>

<script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>
