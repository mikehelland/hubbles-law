<!DOCTYPE html>
<html>
    <head>
        <title>Metallicity</title>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #graphs {
                height:400px;
                width: 700px;
                position:relative;
            }
            #graphs canvas {
                position:absolute;
                top: 0;
                left: 0;
                height:400px;
                width: 700px;
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }


            input[type=number] {
                appearance:textfield; /* Firefox */
            }


            .caption {
                /*padding:4px 20px;*/
                text-align: right;
            }



            #sse-hypothesis, #sse-lcdm {
                text-align: right;
                font-weight: bold;
            }

            .MathJax {
                font-size: 5pt !important;
            }

            #legend {
                position: absolute;
                left: 350px;
                top:335px;
            }
            #y-axis {
                position: absolute;
                top: -15px;
                left: 25px;
            }

            td {
                padding-right:20px;

            }
            th {
                padding-right:20px;
                text-align: left;
                font-size: small;
            }
        </style>
    </head>
<body>

    <a href="../index.htm">Home</a>
    <hr>


<h3>Metallicity</h3>

<p>
    <em>Background:</em> According to the big bang theory the first galaxies wouldn't have any "metals" 
    <a target="_blank" href="https://public.nrao.edu/blogs/astronomy-is-metal/">(elements other than hydrogen and helium)</a>
    in them. Metals would have to build up over time in the universe. 
    Alternatively, a nonexpanding universe wouldln't show any correlation between redshift and 
    <a target="_blank" href="https://en.wikipedia.org/wiki/Metallicity">metallicity</a>. 
</p>
<p>
    <b>Disclaimer:</b> This is a hodge-podge of different studies of different types of objects that I've found through googling.
    I use this page to keep track of the datasets and relevant articles I find, and I add to it when I find more. 
    It's not presented as conclusive evidence for anything in particular.
    If you know of any z and 12+log(O/H) datasets that I can add, send them to mike@mikehelland.com.
</p>

<p>
    The data file: <a target="_blank" href="../data/metallicity.json">metallicity.json</a> 
</p>


<div style="display: flex;">

    <table id="table" style="margin-left: 20px; border: 0px solid #888888; padding:2px; ">
        <tr>
            <th><input type="checkbox" id="hideall" checked="checked"></th>
            <th>Year</th>
            <th>Name</th>
            <th>z (redshift)</th>
            <th>12+log(O/H)</th>
        </tr>

    </table>

    <canvas id="background" height="450" width="1000"></canvas>
    
</div>

    <ol id="ol">
        
    </ol>

    <hr>

    <p>
        <em>See Also:</em>
        <ul>
            <li>
                About Metallicity Variations in the Local Galactic Interstellar Medium
                <a target="_blank" href="https://iopscience.iop.org/article/10.3847/1538-4357/ac6b38">https://iopscience.iop.org/article/10.3847/1538-4357/ac6b38</a>                
            </li>
            <li>
                The integrated metallicity profile of the Milky Way
                <a target="_blank" href="https://www.nature.com/articles/s41550-023-01977-z">https://www.nature.com/articles/s41550-023-01977-z</a>
                
            </li>
            <li>
                The metal abundances across cosmic time (MACT) survey. II. evolution of the mass–metallicity relation over 8 billion years, using [O iii] λ4363 Å based metallicities
                <a target="_blank" href="https://iopscience.iop.org/article/10.3847/0004-637X/828/2/67">https://iopscience.iop.org/article/10.3847/0004-637X/828/2/67</a>

                <blockquote>The most reliable metallicity measurements are based on the flux ratio of the [O iii] λ4363 line against [O iii] λ5007. The technique is called the Te method, because it determines the electron temperature (Te) of the gas, and hence the gas-phase oxygen-to-hydrogen (O/H) abundance (Aller 1984; Izotov et al. 2006). However, detecting [O iii] λ4363 is difficult, because it is weak and almost undetectable in metal-rich galaxies. For example, only 0.3% of the strongly star-forming galaxies in the Sloan Digital Sky Survey (SDSS) have 2&sigma; or better detections of [O iii] λ4363 (Izotov et al. 2006; Nagao et al. 2006).</blockquote>
            </li>
        </ul>
    </p>

    <!--
        [1] <a href="https://arxiv.org/abs/2306.16039">https://arxiv.org/abs/2306.16039</a>
    <b>Hidden giants in JWST's PEARLS: An ultra-massive z=4.26 sub-millimeter galaxy that is invisible to HST</b>
    [3] <a href="https://arxiv.org/abs/1812.05098">https://arxiv.org/abs/1812.05098</a>
    <b>Exploring the origins of a new, apparently metal-free gas cloud at
        z = 4.4</b>
    -->
    

<script src="flrw.js"></script>

<script>
    colors = ["pink", "blue", "cyan", "orange", "yellow", "green", "purple", "red", "darkblue", "fuchsia", "orangered"]
    const black = false
    var graph = document.getElementById("background")
    var ctxB = graph.getContext("2d")

    var offset = 20
    var height = graph.height - offset
    var zoom = 1
    var zoomGY = height * 0.31
    var zoomG = zoom * 69
    var OH0 = 6.5

    var Omega_M = 0.3 
    var Omega_L = 0.7
    var Omega_k = 0
    var H0 = 68

    var refs = {}

    var local = [
        {"name": "solar",       "z": 0,  "x": 0,     "OH": 8.69,       "ref": "0"},
        {"name": "Milky Way",   "z": 0,  "x": 0,     "OH": 8.50,       "ref": "0"},
        {"name": "LMC",         "z": 0,  "x": 0,     "OH": 8.37,       "ref": "0"},
        {"name": "SMC",         "z": 0,  "x": 0,     "OH": 8.01,       "ref": "0"}
    ]
        

    var json
    var points = []
    fetch("https://mikehelland.github.io/hubbles-law/data/metallicity.json").then(res => res.json()).then(res => {
        json = res
        points = res.data

        var i = 1
        var tr, td, li, url, hideBox
        var iNextColor = 0

        points.sort((a, b) => res.refs[a.ref].year - res.refs[b.ref].year)

        points.forEach(point => {
            if (!refs[point.ref]) {
                refs[point.ref] = json.refs[point.ref]
                refs[point.ref].i = i
                i++

                url = refs[point.ref].url

                li = document.createElement("li")
                li.innerHTML = `(${refs[point.ref].year}) <b>${refs[point.ref].title}</b> <br> <a target="_blank" href="${url}">${url}</a>`                
                ol.appendChild(li)

                if (point.data) {
                    refs[point.ref].color = colors[iNextColor++]
                }
            }

            tr = document.createElement("tr")    
            table.appendChild(tr)
            
            let hideBox = document.createElement("input")
            hideBox.type = "checkbox"
            hideBox.checked = "checked"
            hideBox.onchange = e => {
                point.hide = !hideBox.checked
                drawGraph()
            }
            td = document.createElement("td")
            td.appendChild(hideBox)
            tr.appendChild(td)

            point.hideBox = hideBox
            

            var zCap
            if (point.data) {
                point.data.sort((a, b) => a.z - b.z)
                zCap = point.data[0].z.toFixed(2) + "&mdash;" + point.data[point.data.length - 1].z.toFixed(2)

                for (var j = 0; j < point.data.length; j++) {
                    point.data[j].x = point.data[j].z === 0 ? 0 : FLRW(H0, Omega_L, Omega_M, point.data[j].z).lookback
                }
            }
            else if (point.bins) {
                zCap = point.bins[0].zstart + "&mdash;" + point.bins[point.bins.length - 1].zstart
            }
            else {
                zCap = point.z
                if (point.z === 0) {
                    point.x = 0
                }
                else { 
                    point.x = FLRW(H0, Omega_L, Omega_M, point.z).lookback
                }
            }
            
            td = document.createElement("td")
            td.innerHTML = refs[point.ref].year
            tr.appendChild(td)
            
            td = document.createElement("td")
            td.innerHTML = point.name + "<sup>[" + refs[point.ref].i + "]</sup>"
            tr.appendChild(td)

            td = document.createElement("td")
            td.innerHTML = zCap
            tr.appendChild(td)

            td = document.createElement("td")
            td.innerHTML = point.OH || `<span style="opacity: 0.3; color:${refs[point.ref].color};">■</span>`
            tr.appendChild(td)

        })

        points.splice(points.length - 1, 0, ...local)

        drawGraph()
    })
    
    var zs = [];
    [0.5, 1, 2, 3, 4, 5, 10, 20].forEach(z => {
        zs.push({z, t: FLRW(H0, Omega_L, Omega_M, z).lookback})
    })

    bb = FLRW(H0, Omega_L, Omega_M, 12.8).age

    

    function drawGraph() {
        graph.height = graph.clientHeight
        height = graph.height - offset
        zoomGY = height * 0.31
        sseHypothesis = 0

        ctxB.translate(8, 0)
        
        ctxB.lineWidth = 2
        ctxB.fillStyle = black ? "black" : "white"
        ctxB.fillRect(0, 0, graph.width, graph.height)

        ctxB.strokeStyle = !black ? "black" : "white"
        ctxB.strokeRect(offset, offset, graph.width, graph.height - 2*offset)

        ctxB.font = "14px sans-serif"

        ctxB.fillRect(offset + 16, offset + 33, 2, 2)
        ctxB.fillStyle = "black"

        ctxB.fillStyle = !black ? "black" : "white"
        ctxB.textAlign = "left"
        
        ctxB.textAlign = "left"
        ctxB.fillText('ΛCDM', offset, 12)

        ctxB.textAlign = "center"
        ctxB.fillText("Lookback Time (billion years)", graph.width / 2 + offset, graph.height - 30)
        ctxB.fillText("Redshift z", graph.width / 2 + offset, 34)
        
        ctxB.fillStyle = "#404040"
        //ctxB.globalAlpha = 0.2
        ctxB.fillRect(offset + bb * zoomG, offset, 100, graph.height - 2*offset)
        ctxB.globalAlpha = 1
        
        var dgi
        ctxB.font = "10px sans-serif"
        ctxB.fillStyle = "black"
        
        for (dgi = 0; dgi <= 140; dgi+=10) {
            ctxB.fillText(dgi/10, offset + dgi / 10  * zoomG, graph.height - 5)    
        }        

        ctxB.lineWidth = 1
        ctxB.strokeStyle = "#888888"
        zs.forEach(z => {
            ctxB.fillText(z.z, offset + z.t * zoomG, 10)    
            ctxB.beginPath()
            ctxB.moveTo(offset + z.t * zoomG, offset)
            ctxB.lineTo(offset + z.t * zoomG, height)
            ctxB.stroke()
        })

        ctxB.translate(offset, graph.height - offset)

        for (dgi = 0; dgi <= 3; dgi+=0.5) {
            ctxB.fillText(OH0 + dgi, -12, - dgi * zoomGY)    
        }


        ctxB.globalAlpha = 0.2
        ctxB.beginPath()
        ctxB.moveTo(offset, (graph.height - offset)/2)
        ctxB.lineTo(graph.width, (graph.height - offset)/2)
        ctxB.setLineDash([20, 10])
        ctxB.stroke()
        ctxB.globalAlpha = 1
        ctxB.setLineDash([])

        ctxB.font = "14px sans-serif"

        for (var i = 0; i < points.length; i++) {
            
            if (points[i].hide) {
                continue 
            }

            if (points[i].bins) {
                ctxB.globalAlpha = 0.2
                ctxB.fillStyle = refs[points[i].ref].color

                for (var j = 0; j < points[i].bins.length; j++) {
                    var bin =  points[i].bins[j]

                    var x0 = bin.zstart > 0 ? FLRW(H0, Omega_L, Omega_M, bin.zstart).lookback : 0
                    var x1 = FLRW(H0, Omega_L, Omega_M, bin.zend).lookback
                    
                    var OHmin = - zoomGY * (bin.min - OH0) - 10
                    var OHmax = - zoomGY * (bin.max - OH0) - 10
                    
                    ctxB.fillRect(
                        x0 * zoomG, 
                        OHmax, 
                        (x1 - x0) * zoomG, 
                        OHmax - OHmin    
                    )
                    console.log(
                        x0 * zoomG, 
                        OHmax, 
                        (x1 - x0) * zoomG, 
                        OHmax - OHmin    
                    )

                }
                continue
            }

        }


        for (var i = 0; i < points.length; i++) {
            if (points[i].hide) {
                continue 
            }

            if (points[i].data) {
                ctxB.globalAlpha = 0.3
                console.log(refs[points[i].ref].color)
                ctxB.fillStyle = refs[points[i].ref].color
                for (var j = 0; j < points[i].data.length; j++) {
                    ctxB.fillRect(
                        - 5 + points[i].data[j].x * zoomG, 
                        - zoomGY * (points[i].data[j].OH - OH0) - 10, 
                        10, 10)

                }
                continue
            }

        }

        ctxB.fillStyle = "black"

        for (var i = 0; i < points.length; i++) {
            
            if (points[i].hide) {
                continue 
            }

            if (points[i].data || points[i].bins) {
                continue
            }

            ctxB.globalAlpha = 1
            ctxB.fillRect(
                - 5 + points[i].x * zoomG, 
                - zoomGY * (points[i].OH - OH0) - 10, 
                10, 10)

            ctxB.textAlign = points[i].z > 1 ? "right" : "left"
        
            ctxB.fillText(points[i].name, 
                points[i].x * zoomG + (points[i].z > 1 ? -10 : 10), 
                - zoomGY * (points[i].OH - OH0))

        }

        ctxB.font = "12px sans-serif"

        ctxB.translate(-18, -height / 2)
        ctxB.rotate(-Math.PI/2)
        ctxB.textAlign = "center"
        ctxB.fillText("12 + log(O/H)", 0, 0)

        ctxB.translate(0, 985)
        ctxB.fillStyle = "white"
        ctxB.fillText("BIG BANG", 0, 0)

    }

    drawGraph()

    hideall.onchange = e => {
        points.forEach(point => {
            if (point.hideBox) {
                point.hideBox.checked = hideall.checked
                point.hide = !hideall.checked
            }
        })
        drawGraph()
    }

    /* code to make Zahid bins
    https://arxiv.org/pdf/1303.5987 2013
    
    data = [
    {"z": 0.8, "min": oh(9.121, 10**8.99, 0.85, 10**9.5), "max": oh(9.121, 10**8.99, 0.85, 10**10.5)},
    {"z": 0.29, "min": oh(9.130, 10**9.304, 0.77, 10**9.5), "max": oh(9.130, 10**9.304, 0.77, 10**10.5)},
    {"z": 0.78, "min": oh(9.161, 10**9.661, 0.65, 10**9.5), "max": oh(9.161, 10**9.661, 0.65, 10**10.5)},
    {"z": 1.41, "min": oh(9.06, 10**9.6, 0.7, 10**9.5), "max":  oh(9.06, 10**9.6, 0.7, 10**10.5)},
    {"z": 2.26, "min": oh(9.06, 10**9.7, 0.6, 10**9.5), "max": oh(9.06, 10**9.7, 0.6, 10**10.5)}
    ]

    function oh(Z0, M0, gamma, Mstar) {
        return Z0 - Math.log10(1 + (Mstar / M0)**(-gamma))
    }
    */

</script>

<script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>
