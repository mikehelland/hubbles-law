<!DOCTYPE html>
<html>
    <head>
        <title>Metallicity</title>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #graphs {
                height:400px;
                width: 700px;
                position:relative;
            }
            #graphs canvas {
                position:absolute;
                top: 0;
                left: 0;
                height:400px;
                width: 700px;
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 36px;
                border: 0;
                font-size: 12pt;
            }

            input[type=number] {
                appearance:textfield; /* Firefox */
            }


            .caption {
                /*padding:4px 20px;*/
                text-align: right;
            }



            #sse-hypothesis, #sse-lcdm {
                text-align: right;
                font-weight: bold;
            }

            .MathJax {
                font-size: 5pt !important;
            }

            #legend {
                position: absolute;
                left: 350px;
                top:335px;
            }
            #y-axis {
                position: absolute;
                top: -15px;
                left: 25px;
            }

            td {
                padding-right:20px;

            }
            th {
                padding-right:20px;
                text-align: left;
            }
        </style>
    </head>
<body>

    <a href="../index.htm">Home</a>
    <hr>


<h3>Metallicity</h3>

<p>
    <em>Background:</em> According to the big bang theory the first galaxies wouldn't have any "metals" (elements other than hydrogen and helium)
    in them. Metals would slowly build up over time in the universe. 
    Alternatively, a nonexpanding universe wouldln't show any correlation between redshift and metallicity. 
</p>

<p>The data file: <a href="../data/metallicity.json">metallicity.json</a> </p>

<hr>

<canvas id="background" height="450" width="1000"></canvas>

<div>


    <table id="table" style="margin-left: 20px; border: 1px solid #888888; padding:4px;">
        <tr>
            <th>Name</th>
            <th>z (redshift)</th>
            <th>12 + log(O/H)</th>
        </tr>

    </table>

    
    <ol id="ol">
        
    </ol>

    <hr>

    <p>
        <em>See Also:</em>
        <ul>
            <li>
                The integrated metallicity profile of the Milky Way
                <a href="https://www.nature.com/articles/s41550-023-01977-z">https://www.nature.com/articles/s41550-023-01977-z</a>
                
            </li>
            <li>
                The metal abundances across cosmic time (MACT) survey. II. evolution of the mass–metallicity relation over 8 billion years, using [O iii] λ4363 Å based metallicities
                <a href="https://iopscience.iop.org/article/10.3847/0004-637X/828/2/67">https://iopscience.iop.org/article/10.3847/0004-637X/828/2/67</a>
            </li>
        </ul>
    </p>

    <!--
        [1] <a href="https://arxiv.org/abs/2306.16039">https://arxiv.org/abs/2306.16039</a>
    <b>Hidden giants in JWST's PEARLS: An ultra-massive z=4.26 sub-millimeter galaxy that is invisible to HST</b>
    [3] <a href="https://arxiv.org/abs/1812.05098">https://arxiv.org/abs/1812.05098</a>
    <b>Exploring the origins of a new, apparently metal-free gas cloud at
        z = 4.4</b>
    -->
    

</div>
<script src="flrw.js"></script>

<script>
    colors = ["blue", "red", "yellow", "green", "orange", "purple"]
    const black = false
    var graph = document.getElementById("background")
    var ctxB = graph.getContext("2d")

    var offset = 20
    var height = graph.height - offset
    var zoom = 1
    var zoomGY = height * 0.35
    var zoomG = zoom * 69
    var OH0 = 6.5

    var Omega_M = 0.3 
    var Omega_L = 0.7
    var Omega_k = 0
    var H0 = 68

    var refs = {}

    var json
    var points = []
    fetch("https://mikehelland.github.io/hubbles-law/data/metallicity.json").then(res => res.json()).then(res => {
        json = res
        points = res.data

        var i = 1
        var tr, td, li, url
        var iNextColor = 0

        points.forEach(point => {
            if (!refs[point.ref]) {
                refs[point.ref] = json.refs[point.ref]
                refs[point.ref].i = i
                i++

                url = refs[point.ref].url

                li = document.createElement("li")
                li.innerHTML = `(${refs[point.ref].year}) <b>${refs[point.ref].title}</b> <br> <a href="${url}">${url}</a>`
                ol.appendChild(li)

                if (point.data) {
                    refs[point.ref].color = colors[iNextColor++]
                }
            }

            tr = document.createElement("tr")    
            table.appendChild(tr)
            
            td = document.createElement("td")
            td.innerHTML = point.name + "<sup>[" + refs[point.ref].i + "]</sup>"
            tr.appendChild(td)

            td = document.createElement("td")
            td.innerHTML = typeof point.z === "number" ? point.z : `<span style="color:${refs[point.ref].color};">■</span>`
            tr.appendChild(td)

            td = document.createElement("td")
            td.innerHTML = point.OH || ""
            tr.appendChild(td)

            if (point.data) {
                for (var j = 0; j < point.data.length; j++) {
                    point.data[j].x = point.data[j].z === 0 ? 0 : FLRW(H0, Omega_L, Omega_M, point.data[j].z).lookback
                }
            }
            else {
                if (point.z === 0) {
                    point.x = 0
                }
                else { 
                    point.x = FLRW(H0, Omega_L, Omega_M, point.z).lookback
                }
            }
            
        })


        drawGraph()
    })
    
    var zs = [];
    [0.5, 1, 2, 3, 4, 5, 10, 20].forEach(z => {
        zs.push({z, t: FLRW(H0, Omega_L, Omega_M, z).lookback})
    })

    var z226 = FLRW(H0, Omega_L, Omega_M, 2.26).lookback
    var z426 = FLRW(H0, Omega_L, Omega_M, 4.26).lookback

    var z128 = FLRW(H0, Omega_L, Omega_M, 12.8).lookback

    bb = FLRW(H0, Omega_L, Omega_M, 12.8).age

    var data = [
        /*{color: "blue", tm: 
        [
            {t: 0, m: 1},
            {t: 7, m: 0.75},
            {t: zs[5].t, m: 0}
        ]},
        {color: "green", tm: 
        [
            {t: 0, m: 1},
            {t: 7, m: 0.9},
            {t: zs[5].t, m: 0.3},
            {t: zs[6].t, m: 0.0}
        ]},
        {color: "purple", tm: 
        [10 * 
            {t: 0, m: 1},
            {t: zs[1].t, m: 0.95},
            {t: zs[2].t, m: 0.8},
            {t: zs[6].t - 0.2, m: 0.8},
            {t: zs[6].t + 0.1, m: 0.0}
        ]},
        */
        {color: "green", tm: 
        [
            {t: 0, m: 1},
            {t: FLRW(H0, Omega_L, Omega_M, 3.3).DT, m: 0.2},
            {t: FLRW(H0, Omega_L, Omega_M, 8).DT, m: 0.1}
        ]
        }
    ]


    function drawGraph() {
        graph.width = graph.width
        sseHypothesis = 0
        
        ctxB.lineWidth = 2
        ctxB.fillStyle = black ? "black" : "white"
        ctxB.fillRect(0, 0, graph.width, graph.height)

        ctxB.strokeStyle = !black ? "black" : "white"
        ctxB.strokeRect(offset, offset, graph.width, graph.height - 2*offset)

        ctxB.font = "14px sans-serif"

        ctxB.fillRect(offset + 16, offset + 33, 2, 2)
        ctxB.fillStyle = "black"

        ctxB.fillStyle = !black ? "black" : "white"
        ctxB.textAlign = "left"
        
        ctxB.textAlign = "left"
        ctxB.fillText("12 + log(O/H)", 4 + offset, 34)

        ctxB.textAlign = "left"
        ctxB.fillText('ΛCDM', offset, 12)

        ctxB.textAlign = "center"
        ctxB.fillText("Lookback Time (billion years)", graph.width / 2 + offset, graph.height - 30)
        ctxB.fillText("Redshift z", graph.width / 2 + offset, 34)
        
        ctxB.fillStyle = "red"
        ctxB.globalAlpha = 0.2
        ctxB.fillRect(offset + bb * zoomG, offset, 100, graph.height - 2*offset)
        ctxB.globalAlpha = 1
        
        var dgi
        ctxB.font = "10px sans-serif"
        ctxB.fillStyle = "black"
        
        for (dgi = 0; dgi <= 140; dgi+=10) {
            ctxB.fillText(dgi/10, offset + dgi / 10  * zoomG, graph.height - 5)    
        }        

        ctxB.lineWidth = 1
        ctxB.strokeStyle = "#888888"
        zs.forEach(z => {
            ctxB.fillText(z.z, offset + z.t * zoomG, 10)    
            ctxB.beginPath()
            ctxB.moveTo(offset + z.t * zoomG, offset)
            ctxB.lineTo(offset + z.t * zoomG, height)
            ctxB.stroke()
        })

        data.forEach(line => {
            console.log(line)
            ctxB.strokeStyle = line.color
            ctxB.beginPath()
            ctxB.moveTo(offset + line.tm[0].t, -offset + graph.height - line.tm[0].m * zoomGY)
            for (dgi = 1; dgi < line.tm.length; dgi++) {
                ctxB.lineTo(offset + line.tm[dgi].t * zoomG, -offset + graph.height - line.tm[dgi].m * zoomGY)
            }
            ctxB.stroke()
        })

        ctxB.translate(offset, graph.height - offset)

        for (dgi = 0; dgi <= 3; dgi+=0.5) {
            ctxB.fillText(OH0 + dgi, -12, - dgi * zoomGY)    
        }


        ctxB.globalAlpha = 0.2
        ctxB.beginPath()
        ctxB.moveTo(offset, (graph.height - offset)/2)
        ctxB.lineTo(graph.width, (graph.height - offset)/2)
        ctxB.setLineDash([20, 10])
        ctxB.stroke()
        ctxB.globalAlpha = 1
        ctxB.setLineDash([])

        ctxB.font = "14px sans-serif"

        for (var i = 0; i < points.length; i++) {
            
            if (points[i].data) {
                ctxB.globalAlpha = 0.3
                console.log(refs[points[i].ref].color)
                ctxB.fillStyle = refs[points[i].ref].color
                for (var j = 0; j < points[i].data.length; j++) {
                    ctxB.fillRect(
                        - 5 + points[i].data[j].x * zoomG, 
                        - zoomGY * (points[i].data[j].OH - OH0) - 10, 
                        10, 10)

                }
                continue
            }

        }

        ctxB.fillStyle = "black"

        for (var i = 0; i < points.length; i++) {
            
            if (points[i].data) {
                continue
            }

            ctxB.globalAlpha = 1
            ctxB.fillRect(
                - 5 + points[i].x * zoomG, 
                - zoomGY * (points[i].OH - OH0) - 10, 
                10, 10)

            ctxB.textAlign = points[i].z > 1 ? "right" : "left"
        
            ctxB.fillText(points[i].name, 
                points[i].x * zoomG + (points[i].z > 1 ? -10 : 10), 
                - zoomGY * (points[i].OH - OH0))

        }

        return 

        // this data is from https://arxiv.org/pdf/1303.5987 2013
        //Z0 - Math.log10(1 + (Mstar / M0)**(-gamma))
        ctxB.fillStyle = "purple"
        var bins = [
        [0.08, 9.064660854607585], 
        [0.29, 9.01903159717459], 
        [0.78, 8.956317379948715], 
        [1.40, 8.87678499187798],  
        [2.26, 8.839710527768794]
        ]
        var ib = 0
        bins.forEach(bin => {
            var x0 = ib > 0 ? FLRW(H0, Omega_L, Omega_M, ib).lookback : 0
            var x1 = FLRW(H0, Omega_L, Omega_M, bin[0]).lookback
            console.log(x0, x1, ib, bin[0])
            var OH = bin[1]

            ctxB.fillRect(
                x0 * zoomG, 
                - zoomGY * (OH - OH0) - 10, 
                (x1 - x0) * zoomG, 5)

            ib = bin[0]
        })
    }

    drawGraph()



</script>

<script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>
