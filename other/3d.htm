<!DOCTYPE html>
<html lang="en">

<head>
    <title>3d hyperboloid</title>
    <meta charset="utf-8">
    <style>
        body {margin:0; padding:0;}
    </style>
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link type="text/css" rel="stylesheet" href="main.css">
</head>

<body>

    <div id="container"></div>

    <script type="module">
        import * as THREE from 'https://cdn.skypack.dev/three@0.136';
        import { OrbitControls } from 'https://cdn.skypack.dev/three@0.136/examples/jsm/controls/OrbitControls.js';
        import { ParametricGeometry } from 'https://cdn.skypack.dev/three@0.136/examples/jsm/geometries/ParametricGeometry.js';

        const cos = t => Math.cos(2 * Math.PI * t)
        const cosh = t => Math.cosh(2 * Math.PI * t)
        const sin = t => Math.sin(2 * Math.PI * t)
        const sinh = t => Math.sinh(2 * Math.PI * t)

        var camera, scene, renderer, mesh, light;
        var clock = new THREE.Clock();


        const R = 1
        const piFrac = Math.PI/12

        var events = []
        var clocks = []
        
        init();
        renderer.render(scene, camera);

        animate()
        //setTimeout(() => animate(), 5000)

        function init() {

            scene = new THREE.Scene();

            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
            window.camera = camera
            
            light = new THREE.PointLight(0xffffff);
            light.position.set(10, -500, 10);
            scene.add(light);

            var axis = new THREE.AxesHelper(20);
            //scene.add(axis);

            renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0xAAAAAA);

            camera.position.set(0, -6, -1)
            camera.lookAt(0, 0, -2)
            camera.up.set(0, 0, 1);
            
            //let controls = new OrbitControls(camera, renderer.domElement);

            
            document.body.appendChild(renderer.domElement);

            var meshFunc = function (u, v, pos) {
                const x = R * cosh(-1 / 2 + v) * cos(-1 / 2 + u);
                const y = R * cosh(-1 / 2 + v) * sin(-1 / 2 + u);
                const z = R * sinh(-1 / 2 + v);


                pos.set(x, y, z);
            };
            var geometry = new ParametricGeometry(meshFunc, 40, 40);
            var material = new THREE.MeshPhongMaterial({
                color: 0x5678ff,
                wireframe: false,
                side: THREE.DoubleSide,
            });

            mesh = new THREE.Mesh(geometry, material);
            scene.add(mesh);


            //var ball = new Sphere()
            
            for (let i = -4; i < 5; i++) {
                const cgeo = new THREE.CircleGeometry( 0.05, 32 ); 
                const cmaterial = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } ); 
                const circle = new THREE.Mesh( cgeo, cmaterial );
                let angle =  i * piFrac
                //circle.rotation.y = -angle;
                circle.position.y = -R * Math.cos(angle) - 0.05;
                circle.position.x = -R * Math.sin(angle);
                circle.rotation.x = Math.PI / 2;
                circle.rotation.y = -angle;
                
                scene.add( circle );

                var line = drawWorldLine(angle)
                line.rotation.z = angle
                scene.add( line );

                clocks.push({circle, i, angle})

            }

            line = drawNullGeodesic(-1)
            scene.add( line );

            line = drawNullGeodesic(1)
            scene.add( line );


        }

        function drawWorldLine(angle) {

            const material = new THREE.LineBasicMaterial( { color: 0x000088, linewidth: 14 } );
            const points = [];

            angle = 0
            for (var i = -Math.PI; i <= Math.PI; i+= Math.PI / 12) {
                points.push( new THREE.Vector3( 
                         
                        Math.sinh(angle), 
                        -R * Math.cosh(i) - 0.01, // * Math.sin(angle), 
                        -R * Math.sinh(i), // * Math.cos(angle), 
                        ) );
            
            }

            const geometry = new THREE.BufferGeometry().setFromPoints( points );
            const line = new THREE.Line( geometry, material );
            return line
        }

        function drawNullGeodesic(angle) {

            const material = new THREE.LineBasicMaterial( { color: 0xFFFF00, linewidth: 14 } );
            const points = [];

            for (var i = -4 * Math.PI; i <= 4 * Math.PI; i+= Math.PI / 12) {
                points.push( new THREE.Vector3( 
                    i,
                    -1.02,
                    -angle * i)) 

                        
                        //Math.sinh(angle), 
                        //-R * Math.cosh(i) - 0.01, // * Math.sin(angle), 
                        //-R * Math.sinh(i), // * Math.cos(angle), 
                        
            }

            const geometry = new THREE.BufferGeometry().setFromPoints( points );
            const line = new THREE.Line( geometry, material );
            return line
        }

        function addEvents(t) {

            clocks.forEach(clock => {
                var sgeo = new THREE.SphereGeometry(0.02, 12);
                var smaterial = new THREE.MeshPhongMaterial({
                    color: 0xff5678,
                    wireframe: false,
                });
                var event = new THREE.Mesh(sgeo, smaterial)
                event.position.y = clock.circle.position.y
                event.position.x = clock.circle.position.x
                scene.add(event)

                events.push({t, i: clock.i, angle: clock.angle, sphere: event, hangle: 0})

            })

        }


        var startTime
        var loopStart = clock.getElapsedTime()
        setTimeout(() => {
            loopStart = clock.getElapsedTime()
            startTime = loopStart

            var h = setInterval(() => {
                //loopStart = clock.getElapsedTime()
                addEvents(clock.getElapsedTime())
            }, 1000)
            setTimeout(()=> {
                clearInterval(h)
            }, 30000)
        }, 2000)
        
        var startTime = 0
        function animate() {

            requestAnimationFrame(animate);
            renderer.render(scene, camera);

            if (!loopStart) return 

            var tt = clock.getElapsedTime() //(clock.getElapsedTime() - loopStart) / 5;
            var t
            var lastT = -1
            var angle
            events.forEach(event => {

                if (event.t !== lastT) {
                    angle = getNextAngle(tt, event.t, event.hangle)
                    lastT = event.t
                }
                event.hangle = angle
                event.sphere.position.x = Math.cosh(angle) * -Math.sin(event.angle)
                event.sphere.position.y = Math.cosh(angle) * -Math.cos(event.angle) - 0.05
                event.sphere.position.z = -Math.sinh(angle)

            })

        }


        function getNextAngle(tt, t, hangle) {

            //console.log(tt)
            return (tt - t) / 2
                
        }

    </script>

</body>

</html>