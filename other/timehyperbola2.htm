<!DOCTYPE html>
<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #right-side {
                left: 730px;
                top: 20px;
                position: absolute;
            
            }
            /*#graph {
                height:400px;
                width: 800px;
            }*/
            .model-label {
                margin: 4px 0;
                
                
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 80px;
            }

            .model-units {
                columns: #444444;
                font-size: 12px;
                padding-left:4px;
            }

            #details, #notes {
                width:700px;
            }
            #notes {
                margin-left: 20px;
            }

            .model-header {
                padding:4px;
                display:flex;
                align-items: center;
            }
            .header-spacer {
                flex-grow: 1
            }

            td, th {
                padding:4px 20px;
            }

        </style>
    </head>
<body>
<br>
    <canvas id="graphT" height="500" width="500"></canvas>
    
    <canvas id="graphB" height="500" width="500"></canvas>

    
<script>
var black = false

    var graph = document.getElementById("graphT")
    var ctx = graph.getContext("2d")
    var graphB = document.getElementById("graphB")
    var ctxB = graphB.getContext("2d")

    var x0 = graph.width / 20
    var y0 = graph.height / 20
        
    var c = 1


    const R = 4 //6.2


    var sq = n => Math.pow(n, 2)
    var sqrt = n => Math.sqrt(n)
    var cosh = n => Math.cosh(n)
    var data = []
    var dd = 0
    var lastX = R
    var lastY = 0
    for (let i = 0; i < 5; i+=0.01) {
        let d = {
            d: i,
            dd,
            x: R * Math.cosh(i / R),
            y: R * Math.sinh(i / R), 
            t2: -14 * Math.log(1/14 * -i + 1)
        }
        d.t = sqrt(sq(d.x - R) + sq(d.y)) 
        d.dh = Math.log((1+i)/(1-i))

        d.z = tToz(d.t)
        //d.z = dToz(d.d)
        d.z2 = 1 / Math.exp(1/14 * -d.t2) - 1
        data.push(d)

        dd += sqrt(sq(lastX - d.x) + sq(lastY - d.y))
        d.dd = dd
        lastX = d.x
        lastY = d.y
    }

    function tToz(t) {
        //(sqrt(2) t)/sqrt((R^2 + 2 t^2) (abs(R) sqrt(R^2 + 2 t^2) - R^2 + t^2))
        //https://www.wolframalpha.com/input?i2d=true&i=D%5BArcCosh%5BDivide%5B%5C%2840%29Power%5BR%2C2%5D+%2B+sqrt%5C%2840%29Power%5BR%2C4%5D+%2B+2+Power%5BR%2C2%5D+Power%5Bt%2C2%5D%5C%2841%29%5C%2841%29%2C%5C%2840%292+Power%5BR%2C2%5D%5C%2841%29%5D%5D%2Ct%5D

        oneOverOnePlusZ = R * (sqrt(2) * t) / sqrt((sq(R) + 2 * sq(t)) * (Math.abs(R) * sqrt(sq(R) + 2 * sq(t)) - sq(R) + sq(t)))
        return 1 / oneOverOnePlusZ - 1
    }


    function tTod(t) {
        Math.acosh((Math.pow(H, 2) + Math.sqrt(Math.pow(H, 4) + 2 * Math.pow(H, 2) * Math.pow(a.d, 2) )) / (2 * Math.pow(H, 2)))
    }

    function dToz(x) {
        // https://www.wolframalpha.com/input?i2d=true&i=D%5BSqrt%5BPower%5BR+cosh%5C%2840%29Divide%5Bx%2CR%5D%5C%2841%29-R%2C2%5D%2BPower%5BR+sinh%5C%2840%29Divide%5Bx%2CR%5D%5C%2841%29%2C2%5D%5D%2Cx%5D
        //cosh((3 x)/(2 R))/sqrt(cosh(x/R))

        return cosh((3 * x) / (2 *R) ) / sqrt(cosh(x/R)) - 1
    
    }

    var events = []
    /*
    for (let i = 0; i <= 360; i+=45) {
        let angle = -i / 180 * Math.PI
        events.push({i, angle: angle, x: R * Math.cosh(angle/R), y: R * Math.sinh(angle/R)})
                
    }
    */
    var testAngle = -1 * Math.PI
    //events.push({i: "1", angle: testAngle, x: R * Math.cosh(testAngle), y: R * Math.sinh(testAngle)})
    
    var startX = 0.1
    var o = {x: R, y: 0, angle: -Math.PI *3/4}

    drawTop()
    drawBottom(graphB, ctxB, graphB.height * 19 / 20)

    var on = true
    function drawTop() {14

        var zoom = 10
        ctx.fillStyle = "white"
        ctx.fillRect(0, 0, graph.width, graph.height)
        
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.moveTo(0, y0)
        ctx.lineTo(graph.width, y0)
        ctx.stroke()
        
        ctx.beginPath()
        ctx.moveTo(x0, 0)
        ctx.lineTo(x0, graph.height)
        ctx.stroke()

        ctx.globalAlpha = 0.3
        ctx.lineWidth = 0.5
        for (let ix = 0; ix < 100; ix+=1) {
            ctx.lineWidth = (ix%10) ? 0.35 : 1
            ctx.beginPath()
            ctx.moveTo(x0 + ix * zoom, 0)
            ctx.lineTo(x0 + ix * zoom, graph.height)
            ctx.stroke()
        }
        for (let ix = 0; ix < 100; ix+=1) {
            ctx.lineWidth = (ix%10) ? 0.35 : 1
            ctx.beginPath()
            ctx.moveTo(0, y0 + ix * zoom)
            ctx.lineTo(graph.width, y0 + ix * zoom)
            ctx.stroke()
        }
        ctx.globalAlpha = 1
        on = true
        ctx.lineWidth = 4
        ctx.beginPath()
        ctx.moveTo(x0 + R * Math.cosh(-2) * zoom, y0 - zoom * R * Math.sinh(-2))
        for (let ix = -Math.PI * 2; ix <= 1; ix+=0.1) {
            ctx.lineTo(x0 + R * Math.cosh(ix) * zoom, y0 - zoom * R * Math.sinh(ix))
            if (on) {
                ctx.stroke()
            }
            //on = !on
        }

        
        events.forEach(event => {
            ctx.fillStyle = "red"
            ctx.beginPath()
            ctx.arc(x0 + event.x * zoom, y0 - event.y * zoom, 6, 0, Math.PI*2)
            ctx.fill()      
            
            ctx.fillStyle = "black"
            ctx.fillText(event.i, 10 + x0 + event.x * zoom, y0 - event.y * zoom)

            event.d = Math.sqrt(
                Math.pow(event.x - o.x, 2) + 
                Math.pow(event.y - o.y, 2))

            ctx.strokeStyle = "blue"
            ctx.lineWidth = 2
            ctx.beginPath()
            ctx.moveTo(x0 + R * zoom, y0)
            ctx.lineTo(x0 + event.x * zoom, y0 - event.y * zoom)
            ctx.stroke()
        })

        ctx.fillStyle = "blue"
        ctx.beginPath()
        ctx.arc(x0 + o.x * zoom, y0 - o.y * zoom, 8, 0, Math.PI*2)
        ctx.fill()        
    }

    function drawBottom(graph, ctx, y0) {

        var zoom = 80 //20
        var zoomY = 50 //zoom / 2
        ctx.fillStyle = "white"
        ctx.fillRect(0, 0, graph.width, graph.height)
        
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.moveTo(0, y0)
        ctx.lineTo(graph.width, y0)
        ctx.stroke()
        
        ctx.fillStyle = "black"
        /*
        ctx.globalAlpha = 0.3
        ctx.lineWidth = 0.5
        for (let ix = 0; ix <= 20; ix+=1) {
            //if (ix % 10 === 0) {
                ctx.fillText(ix, x0 + ix * zoom, y0)
            //}
            ctx.lineWidth = (ix%10) ? 0.35 : 1
            ctx.beginPath()
            ctx.moveTo(x0 + ix * zoom, 0)
            ctx.lineTo(x0 + ix * zoom, graph.height)
            ctx.stroke()
        }
        for (let ix = 0; ix < 100; ix+=1) {
            if (ix % 10 === 0) {
                ctx.fillText(ix, x0, y0 - ix * zoomY)
            }
            ctx.lineWidth = (ix%10) ? 0.35 : 1
            ctx.beginPath()
            ctx.moveTo(0, y0 - ix * zoomY)
            ctx.lineTo(graph.width, y0 - ix * zoomY)
            ctx.stroke()
        }
        ctx.globalAlpha = 1
        */
        
        ctx.lineWidth = 1
        ctx.strokeStyle = "green"
        ctx.beginPath()
        ctx.moveTo(x0, y0)
        data.forEach(d => {
            ctx.lineTo(x0 + d.d * zoom, y0 - d.t * zoomY)
        })
        ctx.stroke()

        ctx.strokeStyle = "blue"
        ctx.beginPath()
        ctx.moveTo(x0, y0)
        data.forEach(d => {
            ctx.lineTo(x0 + d.d * zoom, y0 - d.dd * zoomY)
        })
        ctx.stroke()

        ctx.lineWidth = 2
        ctx.strokeStyle = "red"
        ctx.beginPath()
        ctx.moveTo(x0, y0)
        data.forEach(d => {
            ctx.lineTo(x0 + d.dd * zoom, y0 - d.t * zoomY)
        })
        //ctx.stroke()

        ctx.strokeStyle = "orange"
        ctx.beginPath()
        ctx.moveTo(x0, y0)
        data.forEach(d => {
            ctx.lineTo(x0 + d.d * zoom, y0 - R*(Math.exp(d.d/R) - 1) * zoomY)
        })
        //ctx.stroke()


        events.forEach(event => {
            ctx.fillStyle = "red"
            
            event.d = Math.sqrt(
                Math.pow(event.x - o.x, 2) + 
                Math.pow(event.y - o.y, 2))

            ctx.beginPath()
            ctx.arc(x0 + -event.angle/Math.PI * zoom, y0 - event.d * zoomY, 6, 0, Math.PI*2)
            ctx.fill()        


            ctx.fillStyle = "black"
            ctx.fillText(event.i, x0 + -event.angle/Math.PI * zoom, y0 - 10 - event.d * zoomY)

        })

        ctx.fillStyle = "blue"
        ctx.beginPath()
        ctx.arc(x0, y0, 8, 0, Math.PI*2)
        //ctx.fill()        
    }

    
    var speed = 10
    
    var intervalHandle
    
    //drawTop()
    //drawBottom(graphB, ctxB, graphB.height / 2)

    var t = 0
    var nextEvent = o.angle

    setTimeout(() => {
        return 
        intervalHandle = setInterval(() => {

            if (o.angle >= nextEvent) {
                let angle = nextEvent
                events.push({angle: angle, x: R * Math.cosh(angle), y: R * Math.sinh(angle)})
                nextEvent += Math.PI / 24
            }


            o.angle += 0.01
            o.x = R * Math.cosh(o.angle)
            o.y = R * Math.sinh(o.angle)
               
            
    
            drawTop()
            drawBottom(graphB, ctxB, graphB.height / 2)

            if (o.angle >= 0) {
                clearInterval(intervalHandle)
            }
        }, 1000 / 30)

    }, 500)

    document.body.onkeypress = e => clearInterval(intervalHandle)
</script>

