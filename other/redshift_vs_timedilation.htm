<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>

        <style>
        </style>

    </head>
<body>




<canvas id="graph" height="800" width="800"></canvas>

<script>
    var sn 
    var obs 
    var p1 
    var p2
    var p1d
    var p2d
    var t
    var c = 1
    var H = 1/14000
    var p2Start = 10
    
    var graph = document.getElementById("graph")
    var ctxG = graph.getContext("2d")
    var offset = 20
    var zoom = 0.05

    var fromSource = true // otherwise distance from observer
    var expanding = true
    
    var dxs = []
    var dx2 = []
    runExpanding()
//    run()
    draw()

    function runExpanding() {
        var done

        sn = [0]
        obs = [7000]
        p1 = [0]
        p2 = []
        p1d = []
        p2d = []
        
        t = 0
        
        while (!done) {
            obs.push(obs[t] + obs[t] * H)
            p1.push(p1[t] + c + p1[t] * H)
            p2.push(p2[t] + c + p2[t] * H)
          
            if (obs[t] > p1[t]) {
                p1d.push(c + p1[t] * H)
            }
            p2d.push(c + p2[t] * H)
                
            sn.push(0)

            t++

            if (t === p2Start) {
                p2[t] = 0
            }

            if (obs[t] <= p2[t]) {
                console.log(t, p2[t])
                done = true
            }
        }

        //p1d.push(1)

        dxs = []
        for (let i = 0; i < p1d.length; i++) {
            dxs[i] = p1d[p1d.length - i - 1] 
        }

        dxs2 = []
        for (let i = 0; i < p2d.length; i++) {
            dxs2[i] = p2d[t - i - 1] 
        }

    }


    function run() {
        var done
        var p1Hit

        sn = [0]
        obs = [7000]
        p1 = [0]
        p2 = []
        
        t = 0
        
        while (!done) {
            if (expanding) {
                obs.push(obs[t] + obs[t] * H)
                p1.push(p1[t] + dxs[t])
                p2.push(p2[t] + dxs2[t - p2Start])
                
                //p2.push(p2[t] + c + p2[t] * H)
            }
            else {
                obs.push(obs[t])
                p1.push(p1[t] + c)
                p2.push(p2[t] + c)
            }
            sn.push(0)

            t++

            if (t === p2Start) {
                p2[t] = 0
                //expanding = !expanding
            }

            if (obs[t] <= p1[t] && !p1Hit) {
                p1Hit = t
                console.log(t, p1[t])
            }

            if (obs[t] <= p2[t] || t > 14000) {
                console.log(t, p2[t])
                done = true
            }

        }

    }



    function draw() {

        graph.width = graph.width
        
        ctxG.lineWidth = 1

        ctxG.fillStyle = "black"
        ctxG.fillRect(0, 0, graph.width, graph.height)

        ctxG.fillStyle = "white"

        ctxG.strokeStyle = "white" 
        ctxG.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)
    
        ctxG.lineWidth = 2    
        
        ctxG.translate(offset, graph.height - offset)
        
        ctxG.strokeStyle = "blue"
        ctxG.beginPath()
        if (fromSource) {
            ctxG.moveTo(obs[0] * zoom, 0)
        }
        else {
            ctxG.moveTo(0, 0)
        }
        for (var i = 0; i < t; i++) {
            if (fromSource) {
                ctxG.lineTo(obs[i] * zoom, -i * zoom)
            }
            else {
                ctxG.lineTo(0, -i * zoom)
            }
        }
        ctxG.stroke()

        ctxG.beginPath()
        ctxG.moveTo(graph.width * 0.7, graph.height * -0.3)
        ctxG.lineTo(graph.width * 0.75, graph.height * -0.3)
        ctxG.stroke()
        ctxG.fillText("Observer", graph.width * 0.8, graph.height * -0.3)
        
        ctxG.strokeStyle = "red"
        ctxG.beginPath()
        if (fromSource) {
            ctxG.moveTo(sn[0], 0)
        }
        else {
            ctxG.moveTo((obs[0] - sn[0]) * zoom, 0)
        }
        for (var i = 0; i < t; i++) {
            if (fromSource) {
                ctxG.lineTo(sn[i] * zoom, -i * zoom)
            }
            else {
                ctxG.lineTo((obs[i] - sn[i]) * zoom, -i * zoom)
            }
        }
        ctxG.stroke()

        ctxG.beginPath()
        ctxG.moveTo(graph.width * 0.7, graph.height * -0.3 + 20)
        ctxG.lineTo(graph.width * 0.75, graph.height * -0.3 + 20)
        ctxG.stroke()
        ctxG.fillText("source", graph.width * 0.8, graph.height * -0.3 + 20)

        ctxG.strokeStyle = "yellow"
        ctxG.beginPath()
        if (fromSource) {
            ctxG.moveTo(0, 0)
        }
        else {
            ctxG.moveTo(zoom * obs[0] - 0, 0)
        }
        for (var i = 0; i < t; i++) {
            if (fromSource) {
                ctxG.lineTo(p1[i] * zoom, -i * zoom)
            }
            else {
                ctxG.lineTo((obs[i] - p1[i]) * zoom, -i * zoom)
            }
        }
        ctxG.stroke()

        ctxG.beginPath()
        ctxG.moveTo(graph.width * 0.7, graph.height * -0.3 + 40)
        ctxG.lineTo(graph.width * 0.75, graph.height * -0.3 + 40)
        ctxG.stroke()
        ctxG.fillText("photon1", graph.width * 0.8, graph.height * -0.3 + 40)

        ctxG.strokeStyle = "orange"
        ctxG.beginPath()
        if (fromSource) {
            ctxG.moveTo(0, -p2Start * zoom)
        }
        else {
            ctxG.moveTo(zoom * obs[0] - 0, -p2Start * zoom)
        }
        for (var i = p2Start; i < t; i++) {
            if (fromSource) {
                ctxG.lineTo(p2[i] * zoom, -i * zoom)
            }
            else {
                ctxG.lineTo((obs[i] - p2[i]) * zoom, -i * zoom)
            }
        }
        ctxG.stroke()

        ctxG.beginPath()
        ctxG.moveTo(graph.width * 0.7, graph.height * -0.3 + 60)
        ctxG.lineTo(graph.width * 0.75, graph.height * -0.3 + 60)
        ctxG.stroke()
        ctxG.fillText("photon2", graph.width * 0.8, graph.height * -0.3 + 60)

        
        ctxG.fillText("Space", graph.width - 60, -5)
        ctxG.fillText("Time", 10, -graph.height + 40)
        
        
        for (dgi = 0; dgi < 22; dgi+=1) {
            //ctxG.fillText(dgi, offset + dgi * 10000 * zoomG, graph.height - 5)    
        }
        for (dgi = 0; dgi < 60; dgi+=5) {
            //ctxG.fillText(dgi, 4, -offset + graph.height - dgi / 10 * 10000 * zoomGY + 4)    
        }
    }


    
</script>
