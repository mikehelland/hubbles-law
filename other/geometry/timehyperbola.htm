<!DOCTYPE html>
<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #right-side {
                left: 730px;
                top: 20px;
                position: absolute;
            
            }
            /*#graph {
                height:400px;
                width: 800px;
            }*/
            .model-label {
                margin: 4px 0;
                
                
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 80px;
            }

            .model-units {
                columns: #444444;
                font-size: 12px;
                padding-left:4px;
            }

            #details, #notes {
                width:700px;
            }
            #notes {
                margin-left: 20px;
            }

            .model-header {
                padding:4px;
                display:flex;
                align-items: center;
            }
            .header-spacer {
                flex-grow: 1
            }

            td, th {
                padding:4px 20px;
            }

        </style>
    </head>
<body>
<br>
    <canvas id="graphT" height="350" width="350"></canvas>
    <br>
    <canvas id="graphB" height="50" width="350"></canvas>
    <br>
    <canvas id="graphC" height="50" width="350"></canvas>

    
<script>
var black = false

    var graph = document.getElementById("graphT")
    var ctx = graph.getContext("2d")
    var graphB = document.getElementById("graphB")
    var ctxB = graphB.getContext("2d")
    var graphC = document.getElementById("graphC")
    var ctxC = graphC.getContext("2d")

    var x0 = graph.width / 20
    var y0 = graph.height / 20
        
    var c = 1

    var zoom = 15

    var events = []
    
    var startX = 0.1
    var o = {angle: 0} //-Math.PI *3/4}

    const R = 1 //14
    drawTop()
    drawBottom(graphB, ctxB, graphB.height / 2)
    drawBottom(graphC, ctxC, graphC.height / 2, "integrate")

    var on = true
    function drawTop() {
        ctx.fillStyle = "white"
        ctx.fillRect(0, 0, graph.width, graph.height)
        
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.moveTo(0, y0)
        ctx.lineTo(graph.width, y0)
        ctx.stroke()
        
        ctx.beginPath()
        ctx.moveTo(x0, 0)
        ctx.lineTo(x0, graph.height)
        ctx.stroke()

        on = true
        ctx.lineWidth = 4
        ctx.beginPath()
        ctx.moveTo(x0 + R * Math.cosh(-2) * zoom, y0 - zoom * R * Math.sinh(-2))
        for (let ix = -2; ix <= 1; ix+=0.1) {
            ctx.lineTo(x0 + R * Math.cosh(ix) * zoom, y0 - zoom * R * Math.sinh(ix))
            if (on) {
                ctx.stroke()
            }
            //on = !on
        }

        ctx.fillStyle = "red"
        events.forEach(event => {
            ctx.beginPath()
            ctx.arc(x0 + event.x * zoom, y0 - event.y * zoom, 8, 0, Math.PI*2)
            ctx.fill()        

        })

        ctx.fillStyle = "blue"
        ctx.beginPath()
        ctx.arc(x0 + o.x * zoom, y0 - o.y * zoom, 8, 0, Math.PI*2)
        ctx.fill()        
    }

    function drawBottom(graph, ctx, y0, mode) {
        ctx.fillStyle = "white"
        ctx.fillRect(0, 0, graph.width, graph.height)
        
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.moveTo(0, y0)
        ctx.lineTo(graph.width, y0)
        ctx.stroke()

        var d
        ctx.fillStyle = "red"
        events.forEach(event => {
            
            if (mode) {
                d = event.d
                console.log("a") 
            }
            else {
                d = Math.sqrt(
                    Math.pow(event.x - R, 2) + 
                    Math.pow(event.y, 2))
                event.d2 = d
                //event.d = d
            }

            ctx.beginPath()
            ctx.arc(graph.width - 10 - d * zoom, y0, 8, 0, Math.PI*2)
            ctx.fill()        

        })

        ctx.fillStyle = "blue"
        ctx.beginPath()
        ctx.arc(graph.width - 10, y0, 8, 0, Math.PI*2)
        ctx.fill()        
    }

    
    var speed = 10
    
    var intervalHandle
    
    var t = 0
    var nextEvent = o.angle

    setTimeout(() => {

        intervalHandle = setInterval(() => {

            if (t/100 >= nextEvent) {
                let angle = nextEvent
                events.push({angle: 0, d: 0}) //angle, x: R * Math.cosh(angle), y: R * Math.sinh(angle)})
                nextEvent += Math.PI / 24
            }

            var lastX, lastY
            events.forEach(event => {
                event.angle += 0.01

                lastX = event.x || R
                lastY = event.y || 0
                
                event.x = R * Math.cosh(-event.angle)
                event.y = R * Math.sinh(-event.angle)

                event.d += Math.sqrt(Math.pow(event.x - lastX, 2) + Math.pow(event.y - lastY, 2))
            })
                   
            drawTop()
            drawBottom(graphB, ctxB, graphB.height / 2)
            drawBottom(graphC, ctxC, graphB.height / 2, true)

            if (o.angle >= 0) {
                //clearInterval(intervalHandle)
            }
            t++
        }, 1000 / 30)

    }, 500)

    document.body.onkeypress = e => clearInterval(intervalHandle)
</script>

