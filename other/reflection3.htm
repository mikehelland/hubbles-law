<!DOCTYPE html>
<html>
    <head>
        <style>
        </style>
    </head>
    <body>
        <h1>Snell's law and v=c-HD</h1>
        
        <input id="o-x" value="60000">
        <input id="o-y" value="0">
        <button id="run-button">Run</button>
        <br>
        <div id="models"></div>
        <script>

            var modelsDiv = document.getElementById("models")
            var res = 0.01
            var steps = 100
            var handle 
            var drawHandle
            
            document.getElementById("run-button").onclick = e => {
                modelsDiv.innerHTML = ""
                clearInterval(drawHandle)
                clearInterval(handle)
                var static = setup(1)
                var vcHD = setup(2)
                            
                drawHandle = setInterval(() => {
                    static.draw()
                    vcHD.draw()
                }, 1000/60)

                handle = setInterval(() => {
                    for (var i = 0; i < steps; i++) {
                        static.next()
                        vcHD.next()
                    }
                }, 0)
            }

            function setup(dv) {
                var canvas = document.createElement("canvas")
                var ctx = canvas.getContext("2d")
                canvas.width = 600
                canvas.height = 300
                modelsDiv.appendChild(canvas)


                var boundary = canvas.height / res // 2
                var observerPoint = [document.getElementById("o-x").value * 1, 
                                    document.getElementById("o-y").value * 1]

                var photons = []
                /*for (var i = 0; i < 90; i += 0.5) {
                    photons.push({clock: 0, x: 0, y: 0, xx: 0, yy: 0,
                        angle: i,
                        dx: Math.sin(i * Math.PI / 180) / dv, 
                        dy: Math.cos(i * Math.PI / 180) / dv})
                }
                console.log(photons)*/
                var pcount = 80
                for (var i  = 0; i < pcount; i++) {
                    let x = i * (canvas.width / (pcount - 1))
                    let y = boundary * res
                    let hyp = Math.sqrt(x*x + y*y)
                    console.log(x, y)
                    photons.push({x: 0, y: 0, xx: 0, yy: 0,
                        angle: i,
                        clock: 0,
                        dx: x / hyp, 
                        dy: y / hyp,
                        dv    
                    })

                }

                var finished = 0

                var draw = () => {
                    ctx.fillStyle = "black"
                    ctx.fillRect(0, 0, canvas.width, canvas.height)

                    ctx.strokeStyle = "red"
                    ctx.fillStyle = "red"
                    ctx.beginPath()
                    ctx.moveTo(0, boundary)
                    ctx.lineTo(canvas.width, boundary)
                    ctx.stroke()

                    ctx.fillRect(observerPoint[0], observerPoint[1], 2, 2)

                    ctx.fillStyle = "yellow"
                    for (var photon of photons) {

                        ctx.fillRect(photon.x * res, photon.y * res, 2, 2)

                    }

                    var i = 0
                    for (photon of out) {

                        if (i === 0) {
                            ctx.fillText(photon.flipX, 150, 80)
                        }

                        ctx.strokeStyle = i === 0 ? "green" : "yellow"
                        ctx.lineWidth = i === 0 ? 4 : 1
                
                        ctx.globalAlpha = i === 0 ? 1 : Math.max(0, 0.5 - i/50)
                        ctx.beginPath()
                        ctx.moveTo(0, 0)
                        ctx.lineTo(photon.flipX * res, boundary * res)
                        ctx.lineTo(photon.x* res, photon.y * res)
                        ctx.stroke()

                        i++
                        
                        ctx.globalAlpha = 1
                    }

                }
                var out = []
                var fastestTime
                var t = 0
                var next = () => {
                    if (finished === pcount - 1) return
                    for (var photon of photons) {
                        if (photon.place) continue

                        //var h = photon.flipped ? 0 : H 
                        photon.x += photon.dx  / photon.dv
                        photon.y += photon.dy  / photon.dv
                        photon.xx += photon.dx  
                        photon.yy += photon.dy  //* (photon.flipped ? -1 : 1)

                        photon.clock += 1/photon.dv
                        
                        if (!photon.flipped && photon.y > boundary) {
                            photon.dv = 1
                            photon.flipped = true
                            photon.flipX = photon.x
                            photon.xx = 0
                            photon.yy = 0

                            var ndx = observerPoint[0] - photon.x
                            var ndy = observerPoint[1] - photon.y

                            var hyp = Math.sqrt(ndx*ndx + ndy*ndy)
                            photon.dx = ndx / hyp // res //* 0.5
                            photon.dy = ndy / hyp // res//* 0.5
                        }

                        if (photon.flipped && !photon.place && photon.x >= observerPoint[0] && photon.y <= observerPoint[1]) {
                            photon.place = ++finished

                            photon.total = Math.sqrt(Math.pow(photon.flipX, 2) + Math.pow(boundary, 2)) * dv + 
                                            Math.sqrt(Math.pow(observerPoint[0] - photon.flipX, 2) + Math.pow(observerPoint[1] - boundary, 2))
                            
                            out.push(photon)

                            if (!fastestTime || fastestTime > photon.clock) {

                                fastestTime = photon.clock
                                console.log(photon.place, t, photon.flipX, photon.angle, photon.clock)
                            }

                        }

                    }
                    out.sort((a,b) => a.clock-b.clock)
                        
                    if (finished === pcount - 1) {
                        console.log(photons)
                    }
                    t++
                }

                return {next, draw}
            }
            

        </script>

    </body>
</html>