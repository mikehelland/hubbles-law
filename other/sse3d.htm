<!DOCTYPE html>
<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
        </style>
        <script src="https://cdn.plot.ly/plotly-2.20.0.min.js" charset="utf-8"></script>
        <script src='https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js'></script>
    </head>
<body>


<div id="graph" style="width:800px;height:800px;"></div>
<h3>Supernovae Data - Sum of Squared Errors</h3>

<script>

const Hstart = 60
const Hend = 80.5



    function drawData(x, y, z) {

        // Plotting the mesh
        var data=[
            {
            opacity:0.8,
            color:'rgb(300,100,200)',
            type: 'mesh3d',
            x, y , z
            }
        ];
        var layout = { scene: {
            xaxis: {title: {text: "Ω_Λ"}},
            yaxis: {title: {text: "H_0"}},
            zaxis: {title: {text: "X^2"}},

        }
        }
        Plotly.newPlot('graph', data, layout);


    }

    var data
    fetch("https://mikehelland.github.io/hubbles-law/data/lcdmsse_time.json").then(res => res.json()).then(res => {
        //console.log(text)

        data = res

        var x = []
        var y = []
        var z = []

        res.forEach(ol => {
            ol.data.forEach(el => {
                x.push(el.omegaL)
                y.push(el.H)
                z.push(el.sse)
            })
        })


        drawData(x, y, z)
        
    })

    function calculateDistanceModulus(d) {
        return 5 * Math.log10(d) + 25 
    }
    
    
    function calculateLCDMError(sn) {
        sseLCDM = 0
        var dlcdm = zToD(sn.z) 
        var dd 
        
        if (useMu) {
            dlcdm = dlcdm * (1 + sn.z)  
            dlcdm = calculateDistanceModulus(dlcdm)
            dd = sn.dm
        }
        else {
            dd = sn.d 
        }    
        
        return Math.pow(dd - dlcdm, 2) / (useError ? Math.pow(sn.derr, 2) : 1) 
        
    }

    var sses = []
    var handle
    var grandLowest
    function calculateLCDMErrors() {
        clearInterval(handle)
        console.log("calcaulting lcdms")
        var sseLCDM
        var i = 0
        grandLowest = 0
        for (var i = 0; i < 21; i++) {
            var omegaL = i / 20
            var sse = []
            console.log("omegaL=" + omegaL)
            var lowest = 0
    
            for (var iH = Hstart; iH < Hend; iH += 0.1) {

                sseLCDM = 0
                setLCDM(iH, omegaL, 1 - omegaL)
                snData.forEach(sn => {
                    sseLCDM += calculateLCDMError(sn)
                })

                if (!lowest || lowest.sse > sseLCDM) {
                    lowest = {omegaL, H: iH, sse: sseLCDM}
                }
                if (!grandLowest || grandLowest.sse > sseLCDM) {
                    grandLowest = {omegaL, H: iH, sse: sseLCDM}
                }
                sse.push({
                    H: iH,
                    omegaL,
                    sse: sseLCDM
                })
            }
            sses.push({data: sse, lowest, omegaL})

        }
    }


function fun(v1, Omega_M, Omega_L, Omega_k) {
        v2 = v1 * v1
        v3 = v1 * v1 * v1
        f = Math.sqrt(Omega_M * v3 + Omega_k * v2 + Omega_L)
        return 1. / f
    };

    function simpson(x0, x2) {
        h = (x2 - x0) / 2.
        x1 = x0 + h
        igr = h * (fun(x0, Omega_M, Omega_L, Omega_k) + 4. * fun(x1, Omega_M, Omega_L, Omega_k) + fun(x2, Omega_M, Omega_L, Omega_k)) / 3.
        return igr
    };

    function sumint(z1) {
        integrale = 0, zone = 1, deltaz = 0.001
        while (zone <= (z1 - deltaz)) {
            zini = zone
            zfin = zone + deltaz
            integrale += simpson(zini, zfin);
            zone += deltaz
        }
        return integrale
    };

    // -------------------------------------------- 


    function lookfun(v1, Omega_M, Omega_L, Omega_k) {
        v2 = v1 * v1
        v3 = v1 * v1 * v1
        f = v1 * Math.sqrt(Omega_M * v3 + Omega_k * v2 + Omega_L)
        return 1. / f
    };

    function timeint(z1start, z1end) {
        s = 0, a = z1start, b = z1end
        s = 0.5 * (b - a) * (lookfun(a, Omega_M, Omega_L, Omega_k) + lookfun(b, Omega_M, Omega_L, Omega_k))
        n = 2
        while (n <= 11) {
            n2 = n - 2
            it = Math.pow(2, n2)
            tnm = it
            del = (b - a) / tnm
            x = a + 0.5 * del
            sum = 0.
            j = 1
            while (j <= it) {
                sum = sum + lookfun(x, Omega_M, Omega_L, Omega_k)
                x = x + del
                j += 1
            }
            s = 0.5 * (s + (b - a) * sum / tnm)
            n += 1
        }
        return s
    };

    // --------------------------------------------

    function sinh(x) {
        s = (Math.exp(x) - Math.exp(-x)) / 2.
        return s
    };

    var Omega_L, Omega_M, H0, Omega_k
    
    function setLCDM(H, L, M) {
        Omega_L = L
        Omega_M = M
        H0 = H
        
    }

    function zToD(z) {
        // From redshift to distance
        

        z1 = 1. + z;
        h = H0 / 100.;
        Tnorm = 9.77810945 / h;
        cvel = 299792.458
        ch0 = cvel / H0;
        pig = 3.1415926536;
        rad = pig / 180.;
        q0 = Omega_M / 2. - Omega_L;
        Omega_k = 1. - Omega_M - Omega_L;

        age = (timeint(1., 50.)) * Tnorm;

        if (Omega_L > 0. && Omega_k == 0.) {
            DC = ch0 * sumint(z1);
            DL = DC * z1
        }
        if (Omega_L > 0. && Omega_k < 0.) {
            curv = Math.sqrt(-Omega_k)
            r = sumint(z1);
            DC = ch0 * Math.sin(r * curv) / curv
            DL = DC * z1
        }
        if (Omega_L > 0. && Omega_k > 0.) {
            curv = Math.sqrt(Omega_k)
            r = sumint(z1);
            DC = ch0 * sinh(r * curv) / curv
            DL = DC * z1
        }
        if (Omega_L == 0. && q0 > 0) {
            q0sq = q0 * q0
            a = 1. - q0 + q0 * z + (q0 - 1.) * (Math.sqrt(2. * q0 * z + 1.))
            DL = ch0 * a / q0sq
            DC = DL / z1
        }
        if (Omega_L == 0. && q0 == 0) {
            DL = ch0 * z * (1. + z / 2.)
            DC = DL / z1
        }
        // Lookback time
        lookback = timeint(1., z1) * Tnorm
        // Angular distance
        DA = DL / (z1 * z1)
        // Lunghezza in primi corrispondente a 1 Mpc.
        angle = (60. / rad) * z1 * z1 / DL;
        // Length in Mpc corresponding to 1 degree on the sky
        R = rad * DL / (z1 * z1);

        // Display result in the form.
        /*
        form.q0.value = q0.toFixed(2);
        form.Omega_k.value = Omega_k.toFixed(2);
        form.dlum.value = DL.toFixed(1);
        form.dcom.value = DC.toFixed(1);
        form.dang.value = DA.toFixed(1);
        form.lsep.value = R.toFixed(1);
        form.asep.value = angle.toFixed(1);
        form.look.value = lookback.toFixed(1);
        form.age.value = age.toFixed(1);
        */
       return DC
    }


    
</script>

<script type="text/javascript" src="https://www.hostmath.com/Math/MathJax.js?config=OK"></script>
