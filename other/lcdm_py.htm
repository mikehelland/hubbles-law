<!DOCTYPE html>
<html>
<head>
<style>
    canvas {border-bottom: 1px solid black; border-left: 1px solid black;}
</style>
</head>
<body>

    <form name="zForm">
    H<sub>0</sub>: <input type="number" value="74" step="0.05" id="H0">
    &Omega;<sub>M</sub>: <input type="number" value="0.7" step="0.05" id="Omega_M">
    &Omega;<sub>&Lambda;</sub>: <input type="number" value="0.7" step="0.05" id="Omega_L">
    </form>

    <br>
    <script>
        var data
        const c = 299792.458
        const pc2ly = 3.261564
        var bigHInput = document.getElementById("H0")
        var H0 = bigHInput.value
        bigHInput.onchange = e => {
            H0 = bigHInput.value
            data.forEach(test => drawCanvas(test))
        }


        fetch("https://mikehelland.github.io/hubbles-law/other/cosmo_data.json").then(res => res.json()).then(res => {

            data = res
            data.forEach(test => {

                var div = document.createElement("div")
                //div.style.display = "inline-block"
                div.innerHTML = `ΩM= ${test.params.omega_M_0}, ΩLambda= ${test.params.omega_lambda_0.toFixed(3)}, error= `
                var errorEl = document.createElement("span")

                var canvas = document.createElement("canvas")
                
                //canvas.width = 1000
                //canvas.height = 600

                div.appendChild(errorEl)
                div.appendChild(document.createElement("br"))
                div.appendChild(canvas)

                document.body.appendChild(div)

                test.canvas = canvas
                test.errorEl = errorEl
                drawCanvas(test)


            })
        })


        function drawCanvas(test) {
            var canvas = test.canvas
            var ctx = canvas.getContext("2d")
            var h = canvas.height
            var w = canvas.width
            canvas.width = w

            ctx.fillStyle = "black"
            for (var i = 0; i <= 20; i=i+2) {
                ctx.fillText(i, i / 20 * w, h)
            }
            ctx.fillText("z", w - 10, h)

            ctx.strokeStyle = "#808080"
            ctx.moveTo(0, h/2)
            ctx.lineTo(w, h/2)
            ctx.stroke()

            ctx.strokeStyle = "red"
            ctx.beginPath()
            ctx.moveTo(0, h)

            test.data.forEach(dp => {
                ctx.lineTo(w * dp.z / 20, h - h * dp.lookback / 15)
            })
            ctx.stroke()

            ctx.strokeStyle = "black"
            ctx.beginPath()
            ctx.moveTo(0, h)

            var ztest
            test.data.forEach(dp => {
                ztest = -(1 / (1 + dp.z) - 1) * c / H0 * pc2ly / 1000
                ctx.lineTo(w * dp.z / 20, h - h * ztest / 15)
                dp.error = ztest / dp.lookback
            })
            ctx.stroke()

            ctx.strokeStyle = "blue"
            ctx.beginPath()
            ctx.moveTo(0, h/2)

            var error = 0
            test.data.forEach(dp => {
                error += dp.error
                ctx.lineTo(w * dp.z / 20, h * dp.error / 2)
            })
            ctx.stroke()
            test.errorEl.innerHTML = (error / test.data.length).toFixed(5)

        }





    </script>