<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #right-side {
                left: 730px;
                top: 20px;
                position: absolute;
                display:none;
            
            }
            #graph {
                height:600px;
                width: 600px;
            }
            .model-label {
                margin: 4px 0;
                
                
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 100px;
            }

            .model-units {
                columns: #444444;
                font-size: 12px;
                padding-left:4px;
            }

            #details, #notes {
                width:700px;
            }
            #notes {
                margin-left: 20px;
            }

            .model-header {
                padding:4px;
                display:flex;
                align-items: center;
            }
            .header-spacer {
                flex-grow: 1
            }

            td, th {
                padding:4px 20px;
            }
        </style>
    </head>
<body>

<h3>Hubble's Law Expanding FOR </h3>

<p>
    Read more about the models being tested <a href="index.htm">on the home page.</a> 
</p>


<div id="notes">

<p>If light moves at c, and we model that naively using an absolute frame, we get different restults from the sources's frame of reference and the 
    targets frame of reference.
</p>

<button id="startButton">Run All</button> <button id="stopButton">Stop</button>
    
<div id="details"></div>

<p>If the speed of light is c + it's source's motion, the preferred frame is no more.</p>

<div id="details2"></div>

<hr>

<p>To make this work, the source of the photon is put in motion with the targets.
    The photon's distance (d) from its source still increases as normal, but when checking
    to see if the photon has reached a target, you use the source's position + the photon's distance.

<pre>
    photon: {d: 0, x: 8000, sourceX: 8000, source_startX: 8000},
    next: function () {
        this.photon.sourceX += this.photon.source_startX * this.H / 1000
        this.photon.d += c
        this.photon.x = this.photon.sourceX - this.photon.d
        for (var i = 0; i < this.targets.length; i++) {
            this.targets[i].x += this.targets[i].start * this.H / 1000
        }
    }
</pre>

<p>This results in an emission theory of light, which, isn't good news since it's not valid.</p> 

<blockquote>
    Emission theory, also called emitter theory or ballistic theory of light, was a competing theory for the special theory of relativity, explaining the results of the Michelsonâ€“Morley experiment of 1887. Emission theories obey the principle of relativity by having no preferred frame for light transmission, but say that light is emitted at speed "c" relative to its source instead of applying the invariance postulate. Thus, emitter theory combines electrodynamics and mechanics with a simple Newtonian theory. Although there are still proponents of this theory outside the scientific mainstream, this theory is considered to be conclusively discredited by most scientists.

    <br>
    <br>
    <a href="https://en.wikipedia.org/wiki/Emission_theory">https://en.wikipedia.org/wiki/Emission_theory</a>

</blockquote>



</div>

<script>

    var details = document.getElementById("details")

    var models = []
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per million years
    
    // Hubble's Constant (H) is in units of Gly^-1 or ly/y/Gly, so it is divided by 1000  

    var c = 1

    var zoom = 0.03
    var offset = 20
    
    function setupModel(model) {

        var header = document.createElement("div")
        header.className = "model-header"


        label = document.createElement("div")
        label.innerHTML = model.name
        label.className = "model-label"
        header.appendChild(label)

        if (model.H) {
            var label = document.createElement("div")
            label.innerHTML = "H = "
            label.className = "input-label"
                    
            var input = document.createElement("input")
            input.type = "number"
            input.value = model.H
            input.step = 0.0001
            
            input.onchange = e => model.H = parseFloat(input.value)

            var spacer = document.createElement("div")
            spacer.innerHTML = "&nbsp;"//model.unitH
            spacer.className = "header-spacer"

            header.appendChild(spacer)
            header.appendChild(label)
            header.appendChild(input)

        }
            
        var details = model.div
        details.appendChild(header)
        
        model.canvas = document.createElement("canvas")
        model.canvas.onclick = () => {
            if (model.running || model.ran) {
                resetModel(model)
            }
            else {
                runModel(model)
            }
        }
        details.appendChild(model.canvas)
        details.appendChild(document.createElement("br"))

        model.ctx = model.canvas.getContext("2d")
        model.nextTarget = 0

        model.canvas.width = 700
        model.canvas.height = 30
        
        // make a target every 200 million light years until 20 billion
        model.targets = []
        for (var i = 200; i <= 7800; i+=200) {
            model.targets.push({label: i/1000, start: i, x: i})
        }

        model.ctx.font = "8px sans-serif"
        model.ctx.lineWidth = 3
        draw(model.ctx, model)

        models.push(model)
    }

    function stopModel(model) {
        clearInterval(model.handle)

        model.running = false
        model.ran = true
    }

    function resetModel(model) {
        
        stopModel(model)
    
        model.ran = false
        model.photon.x = model.photon.startX
        model.photon.d = 0
        model.photon.f = 6e5
        model.photon.dx = c
        model.photon.sourceX = model.photon.source_startX
        
        model.nextTarget = !model.backwards ? 0 : (model.targets.length - 1)
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
        })
    
        model.t = 0

        draw(model.ctx, model)
    }

    var offset = 40
        
    function draw(ctx, exp) {

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

        for (var i = 0; i < exp.targets.length; i++) {
            ctx.strokeStyle = exp.targets[i].hit ? exp.color : "#888888"
            ctx.beginPath()
            ctx.moveTo(offset + exp.targets[i].x * zoom, 0)
            ctx.lineTo(offset + exp.targets[i].x * zoom, ctx.canvas.height)
            //ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

            if (exp.targets[i].hit) {
                //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
                //ctx.fillText(exp.targets[i].hit, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            }

            ctx.stroke()
        }

        ctx.fillStyle = "yellow"
        ctx.fillRect(offset + exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
    }

    function runModel(model) {
        
        resetModel(model)
        
        model.running = true

        var x
        var i
        var batch = 10
        model.handle = setInterval(function () {
            for (i = 0; i < batch; i++) {
                if (model.targets[model.nextTarget]) {//&& model.t < 80000) {
                    model.t++
                    x = model.photon.x
                    x2 = model.targets[model.nextTarget].x
                    model.next()

                    if ((!model.backwards && model.targets[model.nextTarget].x <= model.photon.x)
                            || (model.backwards && model.targets[model.nextTarget].x >= model.photon.x)) {

                        model.targets[model.nextTarget].hit = model.t

                        model.targets[model.nextTarget].z = (model.photon.f_start - model.photon.f) / model.photon.f
                        model.targets[model.nextTarget].dx = model.expanding ? (1 - (model.targets[model.nextTarget].x - x2)) : (model.photon.x - x)
                        
                        model.nextTarget += !model.backwards ? 1 : -1
                    }
                    
                }
                else {
                    clearInterval(model.handle)
                    console.log("clearing")
                    model.running = false
                    model.ran = true
                    break
                }
            }
        }, 0)
    }


    setupModel({
        div: document.getElementById("details"),
        name: "Expanding, 74 km/s/Mpc",
        expanding: true,
        color: "blue", 
        H: 0.0756,
        unitH: "ly/y/Mly",
        photon: {x: 0, startX: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H / 1000
            }
        }
    })

    setupModel({
        div: document.getElementById("details"),
        name: "Expanding, 74 km/s/Mpc",
        expanding: true,
        color: "#880000", 
        H: 0.0756,
        unitH: "ly/y/Mly",
        photon: {x: 8000, startX: 8000},
        backwards: true,
        next: function () {
            this.photon.x -= c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H / 1000
            }
        }
    })

    setupModel({
        div: document.getElementById("details2"),
        name: "Expanding, 74 km/s/Mpc",
        expanding: true,
        color: "orange", 
        H: 0.0756,
        unitH: "ly/y/Mly",
        photon: {d: 0, x: 8000, startX: 8000, sourceX: 8000, source_startX: 8000},
        backwards: true,
        next: function () {
            this.photon.sourceX += this.photon.source_startX * this.H / 1000
            this.photon.d += c
            this.photon.x = this.photon.sourceX - this.photon.d
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H / 1000
            }
        }
    })

    setInterval(() => {
        for (var m = 0; m < models.length; m++) {
            if (models[m].running) {
                draw(models[m].ctx, models[m]) 
            }
        }

    }, 1000 / 60)

document.getElementById("startButton").onclick = e => models.forEach(model => runModel(model))
document.getElementById("stopButton").onclick = e => models.forEach(model => stopModel(model))


</script>

