<!DOCTYPE html>
<html>
    <head>
        <style>
            img {display:none;}
            body {margin: 0; padding: 0; overflow: hidden; background-color: black;}
            #hv-wiki {
                position:absolute;
                top:220px;
                left:30px;
            }
            #caption1 {
                position:absolute;
                top:20px;
                right:40px;
                color:white;
                font-family: Arial, Helvetica, sans-serif;
                font-size:3.3em;
                text-align: right;
            }
            #caption2 {
                position:absolute;
                bottom:20px;
                right:40px;
                color:white;
                font-family: Arial, Helvetica, sans-serif;
                font-size:2.3em;
                text-align: right;
            }
        </style>
    </head>
<body>
<canvas></canvas>
<img id="galaxy" src="galaxy.png">
<img id="hv-wiki" src="hubblevolumewiki.png">
<div id="caption1"></div>
<div id="caption2"></div>
<script>


    var step = 0
    var steps = [
        () => {
            galaxies.push({x: 250, y : 0})
            galaxies.forEach((g, i) => {
                g.origX = g.x
                g.origY = g.y
            })
        },
        () => {
            H_c = 0.0133

            setInterval(()=> {
                fire(g1)
            }, 1000)
        },
        () => {
            caption1.innerHTML = "<code>Program 3.A</code> <br> Light traveling from our galaxy <br> redshifting with distance"
            fire(g1)
        },
        () => {
            caption1.innerHTML = "<code>Program 3.B</code> <br> Light traveling to our galaxy <br> redshifting with distance"
            photons = []
            fadeOutContacts = 1
        },
        () => {
            galaxies.forEach((g, i) => {
                setTimeout(()=> {
                    fire(g)
                }, 1 * i)
            })
        },
        () => {
            caption1.innerHTML = "There's the Hubble Volume"
            drawHubble = true
        },
        () => {
            caption1.innerHTML = "There's the Hubble Volume<br>without expanding space."
        },
        () => {
            caption1.innerHTML = "There's the Hubble Volume<br>without expanding space.<br>And no useless trapped photons."
        },
        () => {
            caption2.innerHTML = '... and no dark energy, or inflation, blah blah blah' 
        }

    ]

    var pause = false
    document.onkeypress = function () {
        steps[step]()
        step++;
    }

    var t = 0
    var _H = 0.005
    var H = 0
    var H_c = 0
    var c = document.getElementsByTagName("canvas")[0];
    var ctx = c.getContext("2d")
    var gimg = document.getElementById("galaxy")
    var w, h, w2, h2

    var timewarp = 0.5
    var expansion = 1
    var dexpansion = 0
    var gsize = 10
    var g1size = 30
    var g1 = {x:0, y:0, origX:0, origY:0}

    var galaxies = []
    var photons = []
    var contacts = []
    var drawHubble = false
    var fadeOutContacts = 0
    var rewind = 0

    window.onload = function () {
        w = window.innerWidth
        h = window.innerHeight
        w2 = w / 2
        h2 = h / 2
        c.width = w
        c.height = h
        c.style.width = w + "px"
        c.style.height = h + "px"

        ctx.translate(w2/2, h2)

        draw()
        setInterval(run, 1000/60)
    }

    var draw = function () {
        ctx.fillStyle = "black"
        ctx.fillRect(-w2/2, -h2, w, h)
        
        //drawGridLines()        

        if (drawHubble) {
            ctx.globalAlpha = 0.5
            ctx.fillStyle = "#888888"
            ctx.beginPath()
            ctx.arc(0, 0, 295, 0, Math.PI * 2)
            ctx.closePath()
            ctx.fill()
            ctx.globalAlpha = 1
        }

        ctx.strokeStyle = "red"
        if (fadeOutContacts) {
            ctx.globalAlpha = fadeOutContacts
            fadeOutContacts -= 0.1
            if (fadeOutContacts <= 0) {
                contacts = []
                fadeOutContacts = 0
            }
        }
        contacts.forEach(function (p) {
            ctx.beginPath()
            ctx.moveTo(0, 0)
            ctx.lineTo(p.g.origX, p.g.origY)
            ctx.closePath()
            ctx.stroke()
        })
        ctx.globalAlpha = 0.8
        ctx.strokeStyle = "yellow"
        photons.forEach(function (p) {
            ctx.beginPath()
            ctx.arc(p.g.x * expansion, p.g.y * expansion, p.d, 0, Math.PI * 2)
            ctx.closePath()
            ctx.stroke()
        })
        ctx.globalAlpha = 1
        galaxies.forEach(function (g) {
            ctx.drawImage(gimg, expansion * g.x - gsize/2, 
                                expansion * g.y - gsize/2, gsize, gsize)
        })
        if (step > 0) {
            ctx.drawImage(gimg, 0 - g1size/2, 0 - g1size/2, g1size, g1size)
        }
    }

    var drawGridLines = function () {
        ctx.strokeStyle = "#808080"
        ctx.beginPath()
        for (var ix = -0.5; ix <= 1; ix+=0.1) {
            //ctx.moveTo(w * ix * expansion, -h2)
            //ctx.lineTo(w * ix * expansion, h)
            ctx.moveTo(w * ix, -h2)
            ctx.lineTo(w * ix, h)
        }
        for (var ix = -0.5; ix <= 1; ix+=0.1) {
            //ctx.moveTo(-w2, h * ix * expansion)
            //ctx.lineTo(w2, h * ix * expansion)
            ctx.moveTo(-w2, h * ix)
            ctx.lineTo(w, h * ix)
        }
        ctx.closePath()
        ctx.stroke()
    }

    var lastHit = 0
    var run = function () {
        if (pause) 
            return 

        if (rewind) {
            galaxies.forEach((g, i) => {
                g.x = g.x - (g.x - g.origX) * (1 - rewind)
                g.y = g.y - (g.y - g.origY) * (1 - rewind)
            })
            rewind -= 0.01
            if (rewind <= 0) {
                galaxies.forEach((g, i) => {
                    g.x = g.origX
                    g.y = g.origY
                })
                rewind = 0
            }
            //return
        }

        galaxies.forEach(function (galaxy) {
            //Hubble's Law, v = H * d
            galaxy.dx = galaxy.x * H
            galaxy.dy = galaxy.y * H
            galaxy.x += galaxy.dx * timewarp
            galaxy.y += galaxy.dy * timewarp
        })
        var d
        for (var i = 0; i < photons.length; i++) {
            var photon = photons[i]
            photon.speed = 4 - H_c * photon.d
            photon.d += photon.speed * timewarp
            if (photon.g !== g1) {
                d = Math.sqrt(Math.pow(photon.g.x, 2) + Math.pow(photon.g.y, 2))
                if (photon.d - d < 2 && photon.d - d > -2) {
                    photons.splice(i, 1)
                    i--
                    contacts.push(photon)
                }
            }
            else {
                galaxies.forEach(function (g) {
                    d = Math.sqrt(Math.pow(g.x, 2) + Math.pow(g.y, 2))
                    if (photon.d - d < 2 && photon.d - d > -2) {
                        console.log("pushing?")
                        
                        caption2.innerHTML = t - lastHit
                        lastHit = t
                        
                        photons.splice(i, 1)
                        i--

                    }
                })
            }
            if (photon.speed < 0.1) {
                photons.splice(i, 1)
                i--
            }
        }
        draw()
        t++
    }

    var fire = function (g) {
        photons.push({d: 10, speed: 4, g, color:"yellow"})
    }


</script>
