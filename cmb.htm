<!DOCTYPE html>
<html>
    <head>
        <style>
            body {
                background-color: #CCCCCC;
                color:black;
            }
            #graph {
                position:fixed;
                left:850px;
                top:10px;
                height:600px;
                width: 600px;
            }

            .text {
                background-color: white;
                max-width: 800px;
                font-family: Arial, Helvetica, sans-serif;
                padding: 15px;
            }
        </style>

    </head>
<body>

<!-- HELLO!!! Source code for the models at the bottom -->

<div class="text">
<h1>Doesn't the Cosmic Microwave Background confirm an expanding universe?</h1>

<p>The expanding universe theory predicts we observe the same background temperature in all directions.</p>

<p>This prediction seemed to hold until 2003 when anomalies appeared, which were confirmed in 2013:</p>

<img src="img/cmb.jpg">
<blockquote>
    Two Cosmic Microwave Background anomalous features hinted at by Planck's predecessor, NASA's Wilkinson Microwave Anisotropy Probe (WMAP), 
    are confirmed in the new high precision data from Planck.  One is an asymmetry in the average temperatures on opposite hemispheres of the 
    sky (indicated by the curved line), with slightly higher average temperatures in the southern ecliptic hemisphere and slightly lower 
    average temperatures in the northern ecliptic hemisphere. <b>This runs counter to the prediction made by the standard model that the Universe 
    should be broadly similar in any direction we look.</b> There is also a cold spot that extends over a patch of sky that is much larger 
    than expected (circled). In this image the anomalous regions have been enhanced with red and blue shading to make them more clearly visible.

    <br>
    <br>
    <a href="https://sci.esa.int/web/planck/-/51559-hemispheric-asymmetry-and-cold-spot-in-the-cosmic-microwave-background">
        https://sci.esa.int/web/planck/-/51559-hemispheric-asymmetry-and-cold-spot-in-the-cosmic-microwave-background</a>
</blockquote>

    
</ul>
<p>To understand why, imagine you have a laser, and you shoot a laser beam into space.</p>


</div>

<canvas id="graph" height="600" width="600"></canvas>

<script>

    var graph = document.getElementById("graph")
    var ctxG = graph.getContext("2d")
    var models = []
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per 1 million years
    // Hubble's Constant is in units of Mly^-1 

    var c = 1

    var zoom = 0.056
    var zoomG = zoom * 0.65
    var zoomGY = zoom * 0.18
    var offset = 20
    
    function drawGraph() {
        
        ctxG.fillStyle = "black"
        ctxG.fillRect(0, 0, graph.width, graph.height)

        ctxG.strokeStyle = "white" 
        ctxG.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)
        
        for (var m = 0; m < models.length; m++) {
            ctxG.fillStyle = models[m].color
            for (var i = 0; i < models[m].targets.length; i++) {
                if (models[m].targets[i].hit) {
                    //ctxG.fillRect(offset + models[m].targets[i].start * zoomG, -offset + graph.height - models[m].targets[i].hit * zoomGY, 5, 5)
                    ctxG.beginPath()
                    ctxG.arc(offset + models[m].targets[i].start * zoomG, -offset + graph.height - models[m].targets[i].hit * zoomGY, 3, 0, Math.PI * 2)
                    ctxG.fill()
                }
            }
            
        }

        ctxG.fillStyle = "white"
        ctxG.fillText("time to target (billion years)", offset + 5, offset)
        ctxG.fillText("starting distance to target (billion light years)", graph.width - 240, graph.height - 30)
        
        ctxG.beginPath()
        ctxG.arc(offset + 5500 * zoomG, graph.height - 11000 * zoomGY - offset, 6, 0, Math.PI * 2)
        ctxG.fill()
        ctxG.beginPath()
        ctxG.arc(offset + 13800 * zoomG, graph.height - 46660 * zoomGY - offset, 6, 0, Math.PI * 2)
        ctxG.fill()

        for (var i = 0; i < 80; i+=5) {
            ctxG.fillText(i, 4, -offset + graph.height - i * 1000 * zoomGY + 4)    
        }

        for (i = 0; i < 16; i+=2) {
            ctxG.fillText(i, offset + i * 1000 * zoomG, graph.height - 5)    
        }
    }

    function setupModel(model) {
        
        var playButton = document.createElement("button")
        playButton.innerHTML = "Click HERE to run"
        playButton.onclick = () => runModel(model)

        model.canvas = document.createElement("canvas")

        model.div.appendChild(playButton)
        model.div.appendChild(model.canvas)

        model.ctx = model.canvas.getContext("2d")
        model.nextTarget = 0

        model.canvas.width = 800
        model.canvas.height = 60
        
        // make a target every 200 million light years until 20 billion
        model.targets = []
        for (var i = 200; i <= 20000; i+=200) {
            model.targets.push({label: i/1000, start: i, x: i})
        }

        model.ctx.font = "8px sans-serif"
        draw(model.ctx, model)

        models.push(model)
    }

    function draw(ctx, exp) {

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

        for (var i = 0; i < exp.targets.length; i++) {
            ctx.fillStyle = exp.targets[i].hit ? exp.color : "#888888"

            ctx.fillRect(exp.targets[i].x * zoom, 0, 1, ctx.canvas.height)
            //ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

            if (exp.targets[i].hit) {
                //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
                //ctx.fillText(exp.targets[i].hit, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            }
        }

        ctx.fillStyle = "yellow"
        ctx.fillRect(exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
    }

    function runModel(model) {
        model.photon.x = 0
        model.photon.dx = c
        model.nextTarget = 0
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
        })
    
        model.t = 0
        model.running = true

        var i
        var batch = 100
        var handle = setInterval(function () {
            for (i = 0; i < batch; i++) {
                if (model.targets[model.nextTarget] && model.t < 80000) {
                    model.t++
                    model.next()

                    if (model.targets[model.nextTarget].x <= model.photon.x) {
                        model.targets[model.nextTarget].hit = model.t
                        model.nextTarget++
                    }
                }
                else {
                    clearInterval(handle)
                    model.running = false
                }
            }
        }, 0)
    }

    setupModel({
        div: document.getElementById("staticModel"),
        name: "Static",
        color: "red", 
        photon: {x: 0},
        next: function () {
            this.photon.x += c
        }
    })
    setupModel({
        div: document.getElementById("expandingFast"),
        name: "Expanding Fast",
        color: "orange", 
        H: 0.00009,
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H
            }
        }
    })
    setupModel({
        div: document.getElementById("expandingSlow"),
        name: "Expanding Slow",
        color: "blue", 
        H: 0.000051,
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H
            }
        }
    })
    setupModel({
        div: document.getElementById("redshift1"),
        name: "Redshift by distance",
        color: "green", 
        H: 0.000072,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c - this.H * this.photon.x
        }
    })
    setupModel({
        div: document.getElementById("redshift2"),
        name: "Redshift by distance 2",
        color: "magenta", 
        H: 0.00035,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c / (1 + this.H * this.photon.x)
        }
    })


    setInterval(() => {
        for (var m = 0; m < models.length; m++) {
            if (models[m].running) {
                draw(models[m].ctx, models[m]) 
            }
        }

        drawGraph()
    }, 1000 / 60)

</script>




