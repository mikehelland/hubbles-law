<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #right-side {
                left: 730px;
                top: 20px;
                position: absolute;
            
            }
            #graph {
                height:600px;
                width: 600px;
            }
            .model-label {
                margin: 4px 0;
                
                
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 80px;
            }

            .model-units {
                columns: #444444;
                font-size: 12px;
                padding-left:4px;
            }

            #details, #notes {
                width:700px;
            }
            #notes {
                margin-left: 20px;
            }

            .model-header {
                padding:4px;
                display:flex;
                align-items: center;
            }
            .header-spacer {
                flex-grow: 1
            }

            td, th {
                padding:4px 20px;
            }
        </style>
    </head>
<body>

<h3>Hubble's Law Testing Page </h3>

<p>
    Read more about the models being tested <a href="index.htm">on the home page.</a> 
</p>

<button id="startButton">Run All</button> <button id="stopButton">Stop</button>

<div id="details"></div>

<pre id="output"></pre>

<div id="notes">
    <hr>
    

    <a href="https://github.com/mikehelland/hubbles-law/blob/master/tolman.htm">Source code</a>
</notes>

<script>
var black = true

    var outputDiv = document.getElementById("output")
    var trunc = n => Math.trunc(n * 1000) / 1000
    var output = (model, photon) => {
        outputDiv.innerHTML += model.name + "\n" + 
                                "t=" + model.t.toString().padEnd(8) + " d=" + 
                                trunc(photon.x) + ", z=" + trunc(photon.z) + ", v=" + 
                                trunc(photon.dx) + ", f=" + trunc(photon.f) + 
                                ", w=" + trunc(299792460/photon.f) + "\n"
    }
    
    var details = document.getElementById("details")

    var models = []
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per million years
    
    // Hubble's Constant (H) is in units of Gly^-1 or ly/y/Gly, so it is divided by 1000  

    var c = 1
    var H = 0.0756

    var zoom = 0.056

    var targetDistance = 4000 // 4 billion light years

    function setupModel(model) {

        model.target = {x: targetDistance}

        var header = document.createElement("div")
        header.className = "model-header"


        label = document.createElement("div")
        label.innerHTML = model.name
        label.className = "model-label"
        header.appendChild(label)

        if (model.H) {
            var label = document.createElement("div")
            label.innerHTML = "H = "
            label.className = "input-label"
                    
            var input = document.createElement("input")
            input.type = "number"
            input.value = model.H
            input.step = 0.0001
            
            input.onchange = e => model.H = parseFloat(input.value)

            var spacer = document.createElement("div")
            spacer.innerHTML = "&nbsp;"//model.unitH
            spacer.className = "header-spacer"

            header.appendChild(spacer)
            header.appendChild(label)
            header.appendChild(input)

        }
            
        
        details.appendChild(header)
        
        model.canvas = document.createElement("canvas")
        model.canvas.onclick = () => {
            if (model.running || model.ran) {
                resetModel(model)
            }
            else {
                runModel(model)
            }
        }
        details.appendChild(model.canvas)

        model.hitCountDiv = document.createElement("input")
        details.appendChild(model.hitCountDiv)
        model.freqDiv = document.createElement("input")
        details.appendChild(model.freqDiv)


        details.appendChild(document.createElement("br"))

        model.ctx = model.canvas.getContext("2d")
        model.nextTarget = 0

        model.canvas.width = 700
        model.canvas.height = 30
        
        // make a target every 200 million light years until 20 billion
        model.targets = []
        for (var i = 200; i <= 20000; i+=200) {
            model.targets.push({label: i/1000, start: i, x: i})
        }

        model.ctx.lineWidth = 3
        draw(model.ctx, model)

        models.push(model)
    }

    function stopModel(model) {
        clearInterval(model.handle)
        clearInterval(model.fireHandle)

        model.running = false
        model.ran = true
    }

    function resetModel(model) {
        
        stopModel(model)
    
        model.ran = false
        model.photons = []
        model.nextTarget = 0
        model.target.x = targetDistance
        model.hitCount = 0
        model.hitCountDiv.value = ""
        model.t = 0
        model.first = 0

        draw(model.ctx, model)
    }

    function draw(ctx, exp) {

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

        ctx.fillStyle = "yellow"
        for (var i = 0; i < exp.photons.length; i++) {
            ctx.fillRect(exp.photons[i].x * zoom, ctx.canvas.height / 2, 5, 5)
        }

        ctx.strokeStyle = exp.color
        ctx.beginPath()
        ctx.moveTo(exp.target.x * zoom, 0)
        ctx.lineTo(exp.target.x * zoom, ctx.canvas.height)
        ctx.stroke()
        
    }

    function runModel(model) {
        
        resetModel(model)
        
        model.running = true
        
        var x
        var i
        var batch = 10
        model.handle = setInterval(function () {
            for (i = 0; i < batch; i++) {

                if (model.t % 1000 === 0) {
                    model.photons.push({x: 0})
                }

                model.t++
                model.next()

            }
        }, 0)
        //model.photons.push({x: 0})
    }


    function checkPhoton(model, i) {
        if (model.photons[i].x >= model.target.x) {
            model.hitCount++
            model.hitCountDiv.value = model.hitCount
            model.photons.splice(i, 1)
            
            if (model.first) {
                model.freqDiv.value = (model.hitCount - 1) / (model.t - model.first)
            }
            else {
                model.first = model.t
            }
            
        }
    }

    setupModel({
        name: "Static",
        color: "darkblue", 
        photons: [],
        next: function () {
            for (var i = this.photons.length - 1; i >= 0 ; i--) {
                this.photons[i].x += c

                checkPhoton(this, i)
            }
        }
    })

    details.appendChild(document.createElement("hr"))

    setupModel({
        name: "expanding",
        color: "gray", 
        photons: [],
        next: function () {
            this.target.x += targetDistance * (H/1000)
            for (var i = this.photons.length - 1; i >= 0 ; i--) {
                this.photons[i].x += c

                checkPhoton(this, i)
            }
        }
    })

    details.appendChild(document.createElement("hr"))

    setupModel({
        name: "hypothesis 1",
        color: "green", 
        photons: [],
        next: function () {
            for (var i = this.photons.length - 1; i >= 0 ; i--) {
                this.photons[i].x += c - H / 1000 * this.photons[i].x

                checkPhoton(this, i)
            }
        }
    })


    /*setupModel({
        div: document.getElementById("expandingFast"),
        name: "Expanding, 74 km/s/Mpc",
        expanding: true,
        color: "#888888", 
        H: 0.0756,
        unitH: "ly/y/Mly",
        photon: {x: 0},
        next: function () {
            updateModel(this)
        }
    })

    details.appendChild(document.createElement("hr"))
    
    setupModel({
        div: document.getElementById("redshift1"),
        name: "v<sub>light</sub> = c - H &times; D",
        color: "green", 
        H: 0.0688,
        unitH: "ly/y/Mly",
        photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
        //photon: {x: 0, dx: c, f: 1, w: 299792460, f_start: 1},
        next: function () {
            this.photon.dx = c - this.H / 1000 * this.photon.x
            this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
            this.photon.f = (this.photon.dx * 299792460 / this.photon.w) 
        }
    })*/

    setInterval(() => {
        for (var m = 0; m < models.length; m++) {
            if (models[m].running) {
                draw(models[m].ctx, models[m]) 
            }
        }
    }, 1000 / 60)

document.getElementById("startButton").onclick = e => models.forEach(model => runModel(model))
document.getElementById("stopButton").onclick = e => models.forEach(model => stopModel(model))


</script>

