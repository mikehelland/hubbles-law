<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #right-side {
                left: 630px;
                top: 220px;
                position: absolute;
            
            }
            #graph {
                height:600px;
                width: 600px;
            }
            .model-label {
                margin: 4px 0;
                
                
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 100px;
            }

            .model-units {
                columns: #444444;
                font-size: 12px;
                padding-left:4px;
            }

            #details, #notes {
                /*width:700px;*/
            }
            #notes {
                margin-left: 20px;
            }

            .model-header {
                padding:4px;
                display:flex;
                align-items: center;
            }
            .header-spacer {
                flex-grow: 1
            }

            td, th {
                padding:4px 20px;
            }
        </style>
        <title>Z Test</title>
    </head>
<body>

<h3>Hubble's Law Testing Page </h3>

<div id="details"></div>

<div >
    <button id="startButton">Run All</button> <button id="stopButton">Stop</button>
    <br>
    <br>
    X-axis: 
    <select id="graph-x-axis">
        <option>z redshift</option>
    </select>
    <br>    
    Y-axis: 
    <select id="graph-y-axis">
        <option>starting distance to target (billion light years)</option>
        <option>time to target (billions of years)</option>
        <option>velocity</option>

    </select>
    <br>
    <canvas id="graph" height="600" width="600"></canvas>
    <br>
    Zoom X: <input type="number" id="graph-zoom-x" value="1.0" step="0.01" min="0.01">
    Zoom Y: <input type="number" id="graph-zoom-y" value="1.0" step="0.01" min="0.01">

    <hr>
    <a href="https://github.com/mikehelland/hubbles-law/blob/master/test.htm">Source code</a>
</div>


<div id="right-side" id="notes">
    <p>Sample z's (white dots when y-axis is redshift) from wolfram alpha. See <a href="zdata_full" target="_out">full data set and sources</a></p>
    
    <pre id="output">
z           lookback      distance      velocity
---------------------------------------------------------------
</pre>

</div>


<script>

    var details = document.getElementById("details")
    var output = document.getElementById("output")
    var graph = document.getElementById("graph")
    var ctxG = graph.getContext("2d")
    var models = []
    
    var zs = [
        {z: 0.0000715, t:   0.992, d:  0.992      , v: 0.00007148}, 
        {z: 0.1,       t:   1290,  d:   1360      , v: 0.09502254}, 
        {z: 0.25,      t:   2930,  d:   3280      , v: 0.21951219}, 
        {z: 0.5,       t:   5050,  d:   6170      , v: 0.38461666}, 
        {z: 1,         t:   7770,  d:  10900      , v: 0.59999933}, 
        {z: 2,         t:  10400,  d:  17200      , v: 0.80000133}, 
        {z: 3,         t:  11500,  d:  21100      , v: 0.88235509}, 
        {z: 4,         t:  12100,  d:  23900      , v: 0.92307666}, 
        {z: 5,         t:  12500,  d:  26000      , v: 0.94594585}, 
        {z: 6,         t:  12800,  d:  27600      , v: 0.96000226}, 
        {z: 7,         t:  12900,  d:  28800      , v: 0.96923200}, 
        {z: 8,         t:  12900,  d:  28800      , v: 0.97560975}, 
        {z: 9,         t:  13200,  d:  30800      , v: 0.98019960}, 
        {z: 10,        t:  13200,  d:  31600      , v: 0.98360863}, 
        {z: 11,        t:  13300,  d:  32300      , v: 0.98620710}, 
        {z: 12,        t:  13300,  d:  32900      , v: 0.98823517}, 
        {z: 13,        t:  13400,  d:  33400      , v: 0.98823517}, 
        {z: 14,        t:  13400,  d:  33900      , v: 0.99115053}
    ]

    var zs2 = [
        {z: 0.0000715   , t: 1             , d: 1          , v:  1},             
        {z: 0.1         , t: 1423          , d: 1358       , v:  0.910155},
        {z: 0.25        , t: 3354          , d: 3007       , v:  0.800934},
        {z: 0.5         , t: 6108          , d: 5024       , v:  0.667446},
        {z: 1           , t: 10454         , d: 7544       , v:  0.500568},
        {z: 2           , t: 16578         , d: 10064      , v:  0.333726},
        {z: 3           , t: 20924         , d: 11325      , v:  0.250286},
        {z: 4           , t: 24294         , d: 12081      , v:  0.200237},
        {z: 5           , t: 27048         , d: 12585      , v:  0.166864},
        {z: 6           , t: 29377         , d: 12945      , v:  0.143022},
        {z: 7           , t: 31394         , d: 13215      , v:  0.125144},
        {z: 8           , t: 33173         , d: 13425      , v:  0.111240},
        {z: 9           , t: 34764         , d: 13593      , v:  0.100119},
        {z: 10          , t: 36204         , d: 13730      , v:  0.091016},
        {z: 11          , t: 37518         , d: 13845      , v:  0.083433},
        {z: 12          , t: 38728         , d: 13942      , v:  0.077010},
        {z: 13          , t: 39847         , d: 14025      , v:  0.071511},
        {z: 14          , t: 40889         , d: 14097      , v:  0.066745},
    ]


    for (var zz of zs) {
        output.innerHTML += zz.z.toString().padEnd(12) +
                            (zz.t).toString().padEnd(14) + 
                            (zz.d).toString().padEnd(14) + 
                            (zz.v).toString().padEnd(8) + "\n" 
    }

    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per million years
    
    // Hubble's Constant (H) is in units of Gly^-1 or ly/y/Gly, so it is divided by 1000  

    var c = 1

    var zoom = 0.056
    
    var zoomG = 1/15
    var zoomGY = 1/75

    var offset = 20
    
    var zoomz = 10000

    var drawx, drawy, dgt, dgm, dgi
    function drawGraph() {
        
        ctxG.lineWidth = 1
        ctxG.fillStyle = "black"
        ctxG.fillRect(0, 0, graph.width, graph.height)

        ctxG.strokeStyle = "white" 
        ctxG.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)
        
        ctxG.lineWidth = 2
        for (dgm of models) {
            ctxG.strokeStyle = dgm.color
            ctxG.beginPath()
            ctxG.moveTo(offset, graph.height - offset)
            for (dgt of dgm.ztargets) {
                if (dgt.hit) {

                    drawx = dgt.z

                    if (yAxis.selectedIndex === 0) {
                        drawy = dgt.x
                    }
                    else if (yAxis.selectedIndex === 1) {
                        drawy = dgt.hit
                    }
                    else if (yAxis.selectedIndex === 2) {
                        drawy = dgt.v * 5000
                    }

                    ctxG.lineTo(offset + drawx * graph.width * zoomG, -offset + graph.height - drawy * zoomGY)

                }
            }
            ctxG.stroke()
            
        }

        ctxG.fillStyle = "white"
        ctxG.fillText(yAxis.value, offset + 5, offset)
        ctxG.fillText(xAxis.value, graph.width - 240, graph.height - 30)
        
        for (dgi = 0; dgi <= 14; dgi+=1) {
            ctxG.fillText(dgi, offset + dgi * graph.width * zoomG + 4, graph.height - 5)    
        }

        for (dgi = 0; dgi < 80; dgi+=2) {
            ctxG.fillText(dgi, 4, -offset + graph.height - dgi * 1000 * zoomGY + 4)    
        }    
        

        for (dgi = 0; dgi < zs.length; dgi++) {
            ctxG.fillStyle = "white"
            ctxG.beginPath()
            ctxG.arc(offset + zs[dgi].z * graph.width * zoomG, -offset + graph.height - zs[dgi].t * zoomGY, 2, 0, Math.PI * 2)
            ctxG.fill()

            ctxG.fillStyle = "yellow"
            ctxG.beginPath()
            ctxG.arc(offset + zs[dgi].z * graph.width * zoomG, -offset + graph.height - zs[dgi].d * zoomGY, 2, 0, Math.PI * 2)
            ctxG.fill()

            ctxG.fillStyle = "orange"
            ctxG.beginPath()
            ctxG.arc(offset + zs[dgi].z * graph.width * zoomG, -offset + graph.height - zs[dgi].v * graph.height * zoomGY * 10, 2, 0, Math.PI * 2)
            ctxG.fill()
        }
    }

    function setupModel(model) {

        var header = document.createElement("div")
        header.className = "model-header"


        label = document.createElement("div")
        label.innerHTML = model.name
        label.className = "model-label"
        header.appendChild(label)

        if (model.H) {
            var label = document.createElement("div")
            label.innerHTML = "H = "
            label.className = "input-label"
                    
            var input = document.createElement("input")
            input.type = "number"
            input.value = model.H
            input.step = 0.0001
            
            input.onchange = e => model.H = parseFloat(input.value)

            var spacer = document.createElement("div")
            spacer.innerHTML = "&nbsp;"//model.unitH
            spacer.className = "header-spacer"

            header.appendChild(spacer)
            header.appendChild(label)
            header.appendChild(input)

        }
            
        
        details.appendChild(header)
        
        model.canvas = document.createElement("canvas")
        model.canvas.onclick = () => {
            if (model.running || model.ran) {
                resetModel(model)
            }
            else {
                runModel(model)
            }
        }
        details.appendChild(model.canvas)
        details.appendChild(document.createElement("br"))

        model.ctx = model.canvas.getContext("2d")
        model.nextTarget = 0

        model.canvas.width = 1400
        model.canvas.height = 30
        
        // make a target every 200 million light years until 20 billion
        model.targets = []
        for (var i = 200; i <= 20000; i+=200) {
            model.targets.push({label: i/1000, start: i, x: i})
        }

        model.ztargets = []
        for (i = 0; i < zs.length; i++) {
            model.ztargets.push({t: zs[i].t, z: zs[i].z, v: zs[i].v, d: zs[i].d})
        }
        model.nextz = 0

        model.ctx.font = "8px sans-serif"
        model.ctx.lineWidth = 3
        draw(model.ctx, model)

        models.push(model)
    }

    function stopModel(model) {
        clearInterval(model.handle)

        model.running = false
        model.ran = true
    }

    function resetModel(model) {
        
        stopModel(model)
    
        model.ran = false
        model.photon.x = 0
        model.photon.f = 6e5
        model.photon.dx = c
        model.nextTarget = 0
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
        })
    
        model.t = 0

        draw(model.ctx, model)
    }

    function draw(ctx, exp) {

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

        for (var i = 0; i < exp.targets.length; i++) {
            ctx.strokeStyle = exp.targets[i].hit ? exp.color : "#888888"
            ctx.beginPath()
            ctx.moveTo(exp.targets[i].x * zoom, 0)
            ctx.lineTo(exp.targets[i].x * zoom, ctx.canvas.height)
            //ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

            if (exp.targets[i].hit) {
                //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
                //ctx.fillText(exp.targets[i].hit, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            }

            ctx.stroke()
        }

        ctx.fillStyle = "yellow"
        ctx.fillRect(exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
    }

    function runModel(model) {
        
        resetModel(model)
        output.innerHTML += "\n" + model.name + "\n----\n"
        model.running = true

        var x
        var i
        var batch = 100
        model.handle = setInterval(function () {
            for (i = 0; i < batch; i++) {
                if (model.targets[model.nextTarget]) {//&& model.t < 80000) {
                    model.t++
                    x = model.photon.x
                    x2 = model.targets[model.nextTarget].x
                    
                    model.next()

                    var dx2 = model.targets[model.nextTarget].x - x2
                    var z
                    var hitZ = false
                    if (model.ztargets[model.nextz]) {
                        if (model.expanding) {
                            hitZ = model.photon.x >= model.ztargets[model.nextz].d
                            //hitZ = model.photon.x >= model.ztargets[model.nextz].t
                            
                        }
                        else {
                            z = (model.photon.f_start - model.photon.f) / model.photon.f
                            hitZ = z >= model.ztargets[model.nextz].z
                            if (hitZ) console.log(z, hitZ)
                        }
                    }

                    if (model.targets[model.nextTarget].x <= model.photon.x) {

                        z = (1 - dx2) / dx2
                        
                        /*while (model.expanding && model.ztargets[model.nextz] && model.photon.x >= model.ztargets[model.nextz].d) {
                            console.log(dx2, model.ztargets[model.nextz].v)
                            output.innerHTML += model.ztargets[model.nextz].z.toString().padEnd(12) +
                                            model.t.toString().padEnd(14) + 
                                            Math.trunc(model.photon.x).toString().padEnd(14) + 
                                            model.photon.dx.toString().padEnd(14) + 
                                            "\n" 
                            model.nextz++
                            //hitZ = true
                            //debugger
                        }*/


                        model.targets[model.nextTarget].hit = model.t

                        model.targets[model.nextTarget].z = z
                        model.targets[model.nextTarget].dx = model.expanding ? dx2 : (model.photon.x - x)
                        
                        model.nextTarget++
                    }
                    if (hitZ) {
                        model.ztargets[model.nextz].hit = model.t
                        model.ztargets[model.nextz].x = model.expanding ? model.targets[Math.max(0, model.nextTarget - 1)].start : model.photon.x
                        model.ztargets[model.nextz].dx = model.expanding ? model.targets[Math.max(0, model.nextTarget - 1)].dx : (model.photon.dx)

                        output.innerHTML += model.ztargets[model.nextz].z.toString().padEnd(12) +
                                            model.t.toString().padEnd(14) + 
                                            Math.trunc(model.photon.x).toString().padEnd(14) + 
                                            model.photon.dx.toString().padEnd(14) + 
                                            "\n" 
                        //console.log(z, model.t)

                        model.nextz++
                    }
                }
                else {
                    clearInterval(model.handle)
                    model.running = false
                    model.ran = true
                }
            }
        }, 0)
    }

    setupModel({
        div: document.getElementById("expandingFast"),
        name: "Expanding, 74 km/s/Mpc",
        expanding: true,
        color: "#888888", 
        H: 0.0662,
        unitH: "ly/y/Mly",
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H / 1000
            }
        }
    })

    setupModel({
        div: document.getElementById("redshift1"),
        name: "v<sub>light</sub> = c - H &times; D",
        color: "green", 
        H: 0.0662,
        unitH: "ly/y/Mly",
        //photon: {x: 0, dx: c},
        photon: {x: 0, dx: c, f: 6e5, w: 500.6, f_start: 6e5},
        next: function () {
            this.photon.dx = c - this.H / 1000 * this.photon.x
            this.photon.x += this.photon.dx //c - this.H / 1000 * this.photon.x
            this.photon.f = (this.photon.dx * 300000000 / this.photon.w) 
        }
    })

    setInterval(() => {
        for (var m = 0; m < models.length; m++) {
            if (models[m].running) {
                draw(models[m].ctx, models[m]) 
            }
        }

        drawGraph()
    }, 1000 / 60)

document.getElementById("startButton").onclick = e => models.forEach(model => runModel(model))
document.getElementById("stopButton").onclick = e => models.forEach(model => stopModel(model))

var zoomGY_init = zoomGY
document.getElementById("graph-zoom-x").onchange = e => {zoomG = zoom * zoom_gx * e.target.value}
document.getElementById("graph-zoom-y").onchange = e => {zoomGY = zoomGY_init * e.target.value}

var yAxis = document.getElementById("graph-y-axis")
var xAxis = document.getElementById("graph-x-axis")


setTimeout(() => {
    //models.forEach(model => runModel(model))
}, 500)

setTimeout(() => {
    //models.forEach(model => stopModel(model))
}, 10000)


</script>
