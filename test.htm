<html>
    <head>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            #right-side {
                left: 830px;
                top: 50px;
                position: fixed;
            
            }
            #graph {
                height:600px;
                width: 600px;
            }
            .model-label {
                margin: 4px 0;
                
                
            }

            hr {
                opacity: 0.1;
                margin:18px;
            }

            input {
                width: 100px;
            }
            .input-label {
            }

            .model-units {
                columns: #444444;
                font-size: 12px;
                padding-left:4px;
            }

            #details, #notes {
                width:800px;
            }

            .model-header {
                padding:4px;
                display:flex;
                align-items: center;
            }
            .header-spacer {
                flex-grow: 1
            };
        </style>
    </head>
<body>

<h3>Hubble's Law Testing Page </h3>

<p>
    Read more <a href="index.htm">on the home page.</a>
    <a href="https://github.com/mikehelland/hubbles-law/blob/master/test.htm">Source code</a>. 
</p>


<div id="right-side">
    <button id="startButton">Run All</button> <button id="stopButton">Stop</button>
    <br>
    <br>
    X-axis: 
    <select id="graph-x-axis">
        <option>starting distance to target (billion light years)</option>
        <option>time to target (billions of years)</option>
    </select>
    <br>    
    Y-axis: 
    <select id="graph-y-axis">
        <option>time to target (billions of years)</option>
        <option>time difference from static (billions of years)</option>
        <option>delayed time / static time - 1</option>
        <option>1 - static time / delayed time</option>
        <option>1 - v_light / c</option>
        <option>z redshift</option>
    </select>
    <br>
    <canvas id="graph" height="600" width="600"></canvas>
    <br>
    Zoom X: <input type="number" id="graph-zoom-x" value="1.0" step="0.01" min="0.01">
    Zoom Y: <input type="number" id="graph-zoom-y" value="1.0" step="0.01" min="0.01">

</div>

<p>Click a model to play or reset it.</p>

<div id="details"></div>

<div id="notes">
    <hr>
    <p>Units of H for input boxes:</p>

    <ul>
        <li>Inverse models:  Gly<sup>-1</sup></li>
        <li>Others: light year / year / Gly</li>
    </ul>

    <hr>
    <p>Sample z's from <a href="https://lco.global/spacebook/light/redshift/">https://lco.global/spacebook/light/redshift/</a></p>
    <table class="table is-fullwidth is-striped">
        <thead>
        <tr><th>z</th><th>Target distance</th></tr>
        </thead>
        <tbody>
        <tr><td>0.0000715</td><td>1 million years</td></tr>
        <tr><td>0.10</td><td>1.286 billion years</td></tr>
        <tr><td>0.25</td><td>2.916 billion years</td></tr>
        <tr><td>0.5</td><td>5.019 billion years</td></tr>
        <tr><td>1</td><td>7.731 billion years</td></tr>
        <tr><td>2</td><td>10.324 billion years</td></tr>
        <tr><td>3</td><td>11.476 billion years</td></tr>
        <tr><td>4</td><td>12.094 billion years</td></tr>
        <tr><td>5</td><td>12.469 billion years</td></tr>
        <tr><td>6</td><td>12.716 billion years</td></tr>
        <tr><td>7</td><td>12.888 billion years</td></tr>
        <tr><td>8</td><td>13.014 billion years</td></tr>
        <tr><td>9</td><td>13.110 billion years</td></tr>
        <tr><td>10</td><td>13.184 billion years</td></tr>
    </tbody>
    </table>
</notes>

<script>

    var details = document.getElementById("details")

    var graph = document.getElementById("graph")
    var ctxG = graph.getContext("2d")
    var models = []
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per million years
    
    // Hubble's Constant (H) is in units of Gly^-1 or ly/y/Gly, so it is divided by 1000  

    var c = 1

    var zoom = 0.056
    var zoom_gx = 0.65
    var zoom_gy = 0.18
    var zoomG = zoom * zoom_gx
    var zoomGY = zoom * zoom_gy
    var offset = 20
    
    var zoomz = 10000

    var drawx, drawy

    function drawGraph() {
        
        ctxG.lineWidth = 1
        ctxG.fillStyle = "black"
        ctxG.fillRect(0, 0, graph.width, graph.height)

        ctxG.strokeStyle = "white" 
        ctxG.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)
        
        ctxG.lineWidth = 2
        for (var m = 0; m < models.length; m++) {
            ctxG.strokeStyle = models[m].color
            ctxG.beginPath()
            ctxG.moveTo(offset, graph.height - offset)
            for (var i = 0; i < models[m].targets.length; i++) {
                if (models[m].targets[i].hit) {

                    if (xAxis.selectedIndex === 0) {
                        drawx = models[m].targets[i].start
                    }
                    else {
                        drawx = models[m].targets[i].hit
                    }

                    if (yAxis.selectedIndex === 0) {
                        drawy = models[m].targets[i].hit
                    }
                    else if (yAxis.selectedIndex === 1) {
                        // show the difference in time with a static model
                        drawy = models[m].targets[i].hit - models[m].targets[i].start
                    }
                    else if (yAxis.selectedIndex === 2) {
                        // show the ratio with a static model
                        drawy = (models[m].targets[i].hit / models[m].targets[i].start - 1) * 10000
                    }
                    else if (yAxis.selectedIndex === 3) {
                        // show the inverse ratio with a static model
                        drawy = (1 - models[m].targets[i].start / models[m].targets[i].hit) * 10000

                    }
                    else if (yAxis.selectedIndex === 4) {
                        // show its speed ratio inverted, is this z?
                        // 1 - v / c... c is 1, so, just 1 - v
                        drawy = (1 - models[m].targets[i].dx) * 10000

                    }
                    else if (yAxis.selectedIndex === 5) {
                        // z = (freq_emit - freq_observes) / freq_observer
                        drawy = (1 - models[m].targets[i].dx) / models[m].targets[i].dx * 10000

                    }

                    ctxG.lineTo(offset + drawx * zoomG, -offset + graph.height - drawy * zoomGY)

                }
            }
            ctxG.stroke()
            
        }

        ctxG.fillStyle = "white"
        ctxG.fillText(yAxis.value, offset + 5, offset)
        ctxG.fillText(xAxis.value, graph.width - 240, graph.height - 30)
        
        if (yAxis.selectedIndex < 2) {
            for (var i = 0; i < 80; i+=5) {
                ctxG.fillText(i, 4, -offset + graph.height - i * 1000 * zoomGY + 4)    
            }
        }
        else {
            for (var i = 0; i < 110; i+=2) {
                ctxG.fillText(i / 10, 4, -offset + graph.height - i / 10 * 10000 * zoomGY + 4)    
            }
        }

        for (i = 0; i < 16; i+=2) {
            ctxG.fillText(i, offset + i * 1000 * zoomG, graph.height - 5)    
        }

        if (yAxis.selectedIndex === 5) {
            for (i = 0; i < zs.length; i++) {
                ctxG.beginPath()
                ctxG.arc(offset + zs[i][1] * zoomG, -offset + graph.height - zs[i][0] * zoomGY * 10000, 2, 0, Math.PI * 2)
                ctxG.fill()
            }
        }
    }

    function setupModel(model) {

        var header = document.createElement("div")
        header.className = "model-header"


        label = document.createElement("div")
        label.innerHTML = model.name
        label.className = "model-label"
        header.appendChild(label)

        if (model.H) {
            var label = document.createElement("div")
            label.innerHTML = "H = "
            label.className = "input-label"
                    
            var input = document.createElement("input")
            input.type = "number"
            input.value = model.H
            input.step = 0.0001
            
            input.onchange = e => model.H = parseFloat(input.value)

            var spacer = document.createElement("div")
            spacer.innerHTML = "&nbsp;"//model.unitH
            spacer.className = "header-spacer"

            header.appendChild(spacer)
            header.appendChild(label)
            header.appendChild(input)

        }
            
        
        details.appendChild(header)
        
        model.canvas = document.createElement("canvas")
        model.canvas.onclick = () => {
            if (model.running || model.ran) {
                resetModel(model)
            }
            else {
                runModel(model)
            }
        }
        details.appendChild(model.canvas)
        details.appendChild(document.createElement("br"))

        model.ctx = model.canvas.getContext("2d")
        model.nextTarget = 0

        model.canvas.width = 800
        model.canvas.height = 40
        
        // make a target every 200 million light years until 20 billion
        model.targets = []
        for (var i = 200; i <= 20000; i+=200) {
            model.targets.push({label: i/1000, start: i, x: i})
        }

        model.ctx.font = "8px sans-serif"
        model.ctx.lineWidth = 3
        draw(model.ctx, model)

        models.push(model)
    }

    function stopModel(model) {
        clearInterval(model.handle)

        model.running = false
        model.ran = true
    }

    function resetModel(model) {
        
        stopModel(model)
    
        model.ran = false
        model.photon.x = 0
        model.photon.dx = c
        model.nextTarget = 0
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
        })
    
        model.t = 0

        draw(model.ctx, model)
    }

    function draw(ctx, exp) {

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

        for (var i = 0; i < exp.targets.length; i++) {
            ctx.strokeStyle = exp.targets[i].hit ? exp.color : "#888888"
            ctx.beginPath()
            ctx.moveTo(exp.targets[i].x * zoom, 0)
            ctx.lineTo(exp.targets[i].x * zoom, ctx.canvas.height)
            //ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

            if (exp.targets[i].hit) {
                //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
                //ctx.fillText(exp.targets[i].hit, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            }

            ctx.stroke()
        }

        ctx.fillStyle = "yellow"
        ctx.fillRect(exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
    }

    function runModel(model) {
        
        resetModel(model)
        
        model.running = true

        var x
        var i
        var batch = 100
        model.handle = setInterval(function () {
            for (i = 0; i < batch; i++) {
                if (model.targets[model.nextTarget]) {//&& model.t < 80000) {
                    model.t++
                    x = model.photon.x
                    x2 = model.targets[model.nextTarget].x
                    model.next()

                    if (model.targets[model.nextTarget].x <= model.photon.x) {
                        model.targets[model.nextTarget].hit = model.t
                        model.targets[model.nextTarget].dx = model.expanding ? (1 - (model.targets[model.nextTarget].x - x2)) : (model.photon.x - x)
                        model.nextTarget++
                    }
                }
                else {
                    clearInterval(model.handle)
                    model.running = false
                    model.ran = true
                }
            }
        }, 0)
    }

    setupModel({
        div: document.getElementById("staticModel"),
        name: "Static",
        color: "#888888", 
        photon: {x: 0},
        next: function () {
            this.photon.x += c
        }
    })

    details.appendChild(document.createElement("hr"))

    setupModel({
        div: document.getElementById("expandingFast"),
        name: "Expanding, 74 km/s/Mpc",
        expanding: true,
        color: "#888888", 
        H: 0.0756,
        unitH: "ly/y/Mly",
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H / 1000
            }
        }
    })
    setupModel({
        div: document.getElementById("expandingSlow"),
        name: "Expanding, 67 km/s/Mpc",
        expanding: true,
        color: "#888888", 
        H: 0.0688,
        unitH: "ly/y/Mly",
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H / 1000
            }
        }
    })
    setupModel({
        div: document.getElementById("expandingSlow"),
        name: "Expanding, 54 km/s/Mpc",
        expanding: true,
        color: "#888888", 
        H: 0.0556,
        unitH: "ly/y/Mly",
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H / 1000
            }
        }
    })

    details.appendChild(document.createElement("hr"))
    
    setupModel({
        div: document.getElementById("redshift1"),
        name: "v<sub>light</sub> = c - H &times; D",
        color: "green", 
        H: 0.072,
        unitH: "ly/y/Mly",
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c - this.H / 1000 * this.photon.x
        }
    })
    setupModel({
        div: document.getElementById("redshift2"),
        name: "v<sub>light</sub> = c / (1 + H &times; D)",
        color: "magenta", 
        H: 0.35,
        unitH: "Gly<sup>-1</sup>",
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c / (1 + this.H / 1000 * this.photon.x)
        }
    })
    setupModel({
        div: document.getElementById("redshift2"),
        name: "v<sub>light</sub> = c / (1 + H &times; D)<sup>2</sup>",
        color: "purple", 
        H: 0.15,
        unitH: "Gly<sup>-1</sup>",
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c / Math.pow(1 + this.H / 1000 * this.photon.x, 2)
        }
    })
    setupModel({
        div: document.getElementById("redshift2"),
        name: "v<sub>light</sub> = c / (1 + (H &times; D)<sup>2</sup>)",
        color: "red", 
        H: 0.26,
        unitH: "Gly<sup>-1</sup>",
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c / (1 + Math.pow(this.H / 1000 * this.photon.x, 2))
        }
    })
    setupModel({
        div: document.getElementById("redshift2"),
        name: "v<sub>light</sub> = c / sqrt(1 + (H &times; D)<sup>2</sup>)",
        color: "orange", 
        H: 0.26,
        unitH: "Gly<sup>-1</sup>",
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c / Math.sqrt(1 + Math.pow(this.H / 1000 * this.photon.x, 2))
        }
    })


    setInterval(() => {
        for (var m = 0; m < models.length; m++) {
            if (models[m].running) {
                draw(models[m].ctx, models[m]) 
            }
        }

        drawGraph()
    }, 1000 / 60)

document.getElementById("startButton").onclick = e => models.forEach(model => runModel(model))
document.getElementById("stopButton").onclick = e => models.forEach(model => stopModel(model))

document.getElementById("graph-zoom-x").onchange = e => {zoomG = zoom * zoom_gx * e.target.value}
document.getElementById("graph-zoom-y").onchange = e => {zoomGY = zoom * zoom_gy * e.target.value}

var yAxis = document.getElementById("graph-y-axis")
var xAxis = document.getElementById("graph-x-axis")

var zs = [
[0.0000715, 	1],
[0.10, 	        1286 ],
[0.25, 	        2916 ],
[0.5, 	        5019 ],
[1, 	        7731 ],
[2, 	        10324],
[3, 	        11476],
[4, 	        12094],
[5, 	        12469],
[6, 	        12716],
[7, 	        12888],
[8, 	        13014],
[9, 	        13110],
[10, 	        13184],
]

var ts = [
[1, 	1],
[1286  	 ,	1349 ],
[2916  	 ,	3260 ],
[5019 	 ,	5936 ],
[7731     ,	10147],
[10324    , 	15424],
[11476    , 	18594],
[12094    , 	20745],
[12469    , 	22322],
[12716    , 	23542],
[12888    , 	24521],
[13014    , 	25329],
[13110    , 	26011],
[13184     , 	26.596] 
]

setTimeout(() => {
    models.forEach(model => runModel(model))
}, 500)

setTimeout(() => {
    models.forEach(model => stopModel(model))
}, 10000)

</script>

