<html>
    <head>
        <style>
            body {
                background-color: #CCCCCC;
            }
            #right-side {
                left: 830px;
                position: fixed;
            
            }
            #graph {
                height:600px;
                width: 600px;
            }
            .model-label {
                margin: 4px 0;
                font-weight: bold;
            }

            hr {
                opacity: 0;;
                margin:18px;
            }

            input {
                width: 100px;
            }
        </style>
    </head>
<body>

<h3>Hubble's Law Testing Page. Read more <a href="index.htm">on the home page.</a></h3>

<button id="startButton">Run All</button> <button id="stopButton">Stop</button>
<br>

<div id="right-side">
    Y-axis: <select id="graph-y-axis">
        <option>time to target (billions of years)</option>
        <option>time difference from static (billions of years)</option>
        <option>delayed / static - 1</option>
        <option>1 - static / delayed</option>
    </select>
    <br>
    <canvas id="graph" height="600" width="600"></canvas>
    <br>
    Zoom X: <input type="number" id="graph-zoom-x" value="1.0" step="0.01" min="0.01">
    Zoom Y: <input type="number" id="graph-zoom-y" value="1.0" step="0.01" min="0.01">

</div>

<br>

<div id="details"></div>

<script>

    var details = document.getElementById("details")

    var graph = document.getElementById("graph")
    var ctxG = graph.getContext("2d")
    var models = []
    
    
    // the models advance by 1 million years each step
    // the units for distance are in Mly (million light years)

    // the speed of light is 1 million lightyears per 1 million years
    // Hubble's Constant is in units of Mly^-1 

    var c = 1

    var zoom = 0.056
    var zoom_gx = 0.65
    var zoom_gy = 0.18
    var zoomG = zoom * zoom_gx
    var zoomGY = zoom * zoom_gy
    var offset = 20
    
    function drawGraph() {
        
        ctxG.lineWidth = 1
        ctxG.fillStyle = "black"
        ctxG.fillRect(0, 0, graph.width, graph.height)

        ctxG.strokeStyle = "white" 
        ctxG.strokeRect(offset, -10, graph.width, graph.height + 10 - offset)
        
        ctxG.lineWidth = 2
        for (var m = 0; m < models.length; m++) {
            ctxG.strokeStyle = models[m].color
            ctxG.beginPath()
            ctxG.moveTo(offset, graph.height - offset)
            for (var i = 0; i < models[m].targets.length; i++) {
                if (models[m].targets[i].hit) {
                    if (yAxis.selectedIndex === 0) {
                        ctxG.lineTo(offset + models[m].targets[i].start * zoomG, 
                                    -offset + graph.height - models[m].targets[i].hit * zoomGY)
                    }
                    else if (yAxis.selectedIndex === 1) {
                        // show the difference in time with a static model
                        ctxG.lineTo(offset + models[m].targets[i].start * zoomG, -offset + graph.height - 
                            (models[m].targets[i].hit - models[m].targets[i].start) * zoomGY)
                    }
                    else if (yAxis.selectedIndex === 2) {
                        // show the difference in time with a static model
                        ctxG.lineTo(offset + models[m].targets[i].start * zoomG, -offset + graph.height - 
                            (models[m].targets[i].hit / models[m].targets[i].start - 1) * zoomGY * 10000)
                    }
                    else if (yAxis.selectedIndex === 3) {
                        // show the difference in time with a static model
                        ctxG.lineTo(offset + models[m].targets[i].start * zoomG, -offset + graph.height - 
                            (1 - models[m].targets[i].start / models[m].targets[i].hit) * zoomGY * 50000)
                    }
                }
            }
            ctxG.stroke()
            
        }

        ctxG.fillStyle = "white"
        ctxG.fillText(yAxis.value, offset + 5, offset)
        ctxG.fillText("starting distance to target (billion light years)", graph.width - 240, graph.height - 30)
        
        if (yAxis.selectedIndex < 2) {
            for (var i = 0; i < 80; i+=5) {
                ctxG.fillText(i, 4, -offset + graph.height - i * 1000 * zoomGY + 4)    
            }
        }
        else {
            for (var i = 0; i < 11; i++) {
                ctxG.fillText(i / 10, 4, -offset + graph.height - i / 10 * 50000 * zoomGY + 4)    
            }
        }

        for (i = 0; i < 16; i+=2) {
            ctxG.fillText(i, offset + i * 1000 * zoomG, graph.height - 5)    
        }
    }

    function setupModel(model) {

        if (model.H) {
            var label = document.createElement("span")
            label.innerHTML = "H = "
            label.className = "model-label"
            details.appendChild(label)
                    
            var input = document.createElement("input")
            input.type = "number"
            input.value = model.H
            input.step = 0.00001
            details.appendChild(input)

            input.onchange = e => model.H = parseFloat(input.value)
        }
            
        label = document.createElement("span")
        label.innerHTML = " " + model.name
        label.className = "model-label"
        details.appendChild(label)

        details.appendChild(document.createElement("br"))
        
        model.canvas = document.createElement("canvas")
        model.canvas.onclick = () => {
            if (model.running || model.ran) {
                resetModel(model)
            }
            else {
                runModel(model)
            }
        }
        details.appendChild(model.canvas)
        details.appendChild(document.createElement("br"))

        model.ctx = model.canvas.getContext("2d")
        model.nextTarget = 0

        model.canvas.width = 800
        model.canvas.height = 40
        
        // make a target every 200 million light years until 20 billion
        model.targets = []
        for (var i = 200; i <= 20000; i+=200) {
            model.targets.push({label: i/1000, start: i, x: i})
        }

        model.ctx.font = "8px sans-serif"
        model.ctx.lineWidth = 3
        draw(model.ctx, model)

        models.push(model)
    }

    function stopModel(model) {
        clearInterval(model.handle)

        model.running = false
        model.ran = true
    }

    function resetModel(model) {
        
        stopModel(model)
    
        model.ran = false
        model.photon.x = 0
        model.photon.dx = c
        model.nextTarget = 0
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
        })
    
        model.t = 0

        draw(model.ctx, model)
    }

    function draw(ctx, exp) {

        ctx.fillStyle = "black"
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

        for (var i = 0; i < exp.targets.length; i++) {
            ctx.strokeStyle = exp.targets[i].hit ? exp.color : "#888888"
            ctx.beginPath()
            ctx.moveTo(exp.targets[i].x * zoom, 0)
            ctx.lineTo(exp.targets[i].x * zoom, ctx.canvas.height)
            //ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

            if (exp.targets[i].hit) {
                //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
                //ctx.fillText(exp.targets[i].hit, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            }

            ctx.stroke()
        }

        ctx.fillStyle = "yellow"
        ctx.fillRect(exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
    }

    function runModel(model) {
        
        resetModel(model)
        
        model.running = true

        var i
        var batch = 100
        model.handle = setInterval(function () {
            for (i = 0; i < batch; i++) {
                if (model.targets[model.nextTarget]) {//&& model.t < 80000) {
                    model.t++
                    model.next()

                    if (model.targets[model.nextTarget].x <= model.photon.x) {
                        model.targets[model.nextTarget].hit = model.t
                        model.nextTarget++
                    }
                }
                else {
                    clearInterval(model.handle)
                    model.running = false
                    model.ran = true
                }
            }
        }, 0)
    }

    setupModel({
        div: document.getElementById("staticModel"),
        name: "Static",
        color: "#888888", 
        photon: {x: 0},
        next: function () {
            this.photon.x += c
        }
    })

    details.appendChild(document.createElement("hr"))

    setupModel({
        div: document.getElementById("expandingFast"),
        name: "Expanding, H = 74",
        color: "#888888", 
        H: 0.0000756,
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H
            }
        }
    })
    setupModel({
        div: document.getElementById("expandingSlow"),
        name: "Expanding, H = 67",
        color: "#888888", 
        H: 0.0000688,
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H
            }
        }
    })
    setupModel({
        div: document.getElementById("expandingSlow"),
        name: "Expanding, H = 54",
        color: "#888888", 
        H: 0.0000556,
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H
            }
        }
    })

    details.appendChild(document.createElement("hr"))
    
    setupModel({
        div: document.getElementById("redshift1"),
        name: "v_light = c - H &times; D",
        color: "green", 
        H: 0.000072,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c - this.H * this.photon.x
        }
    })
    setupModel({
        div: document.getElementById("redshift2"),
        name: "v_light = c / (1 + H &times; D)",
        color: "magenta", 
        H: 0.00035,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c / (1 + this.H * this.photon.x)
        }
    })
    setupModel({
        div: document.getElementById("redshift2"),
        name: "v_light = c / (1 + H &times; D)^2",
        color: "purple", 
        H: 0.00015,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c / Math.pow(1 + this.H * this.photon.x, 2)
        }
    })
    setupModel({
        div: document.getElementById("redshift2"),
        name: "v_light = c / (1 + (H &times; D)^2)",
        color: "red", 
        //H: 0.00035,
        H: 0.00025,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += c / (1 + Math.pow(this.H * this.photon.x, 2))
        }
    })


    setInterval(() => {
        for (var m = 0; m < models.length; m++) {
            if (models[m].running) {
                draw(models[m].ctx, models[m]) 
            }
        }

        drawGraph()
    }, 1000 / 60)

document.getElementById("startButton").onclick = e => models.forEach(model => runModel(model))
document.getElementById("stopButton").onclick = e => models.forEach(model => stopModel(model))

document.getElementById("graph-zoom-x").onchange = e => {zoomG = zoom * zoom_gx * e.target.value}
document.getElementById("graph-zoom-y").onchange = e => {zoomGY = zoom * zoom_gy * e.target.value}

var yAxis = document.getElementById("graph-y-axis")
</script>




