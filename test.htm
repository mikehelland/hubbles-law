<html>
    <head>
        <style>
            body {
                background-color: #CCCCCC;
            }
            #graph {
                height:600px;
                width: 600px;
            }
        </style>
    </head>
<body>

<h3>Hubble's Law Testing Page. Read more <a href="index.htm">on the home page.</a></h3>


<canvas id="graph" height="600" width="600"></canvas>
<br>
<button id="startButton">Start</button> <button id="pauseButton">Pause</button>
<script>

var ctxG = graph.getContext("2d")

//var H = 0.0000265
var H = 0.00005
var c = 1

var zoom = 0.125
var wait = 0
var batch = 100

var models = [
    {
        name: "Static",
        color: "red", 
        photon: {x: 0},
        next: function () {
            this.photon.x += c
        }
    },
    {
        name: "Expanding Fast",
        color: "blue", 
        H: 0.00009,
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H
            }
        }
    },
    {
        name: "Expanding Slow",
        color: "dark blue", 
        H: 0.000051,
        photon: {x: 0},
        next: function () {
            this.photon.x += c
            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += this.targets[i].start * this.H
            }
        }
    },
    {
        name: "Redshift by distance",
        color: "green", 
        H: 0.000072,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += this.photon.dx
            this.photon.dx = c - this.H * this.photon.x
        }
    },
    /*{
        name: "Redshift by time",
        color: "yellow", 
        H: 0.000036,
        photon: {x: 0, dx: c},
        next: function () {
            if (this.photon.dx > 0) {
                this.photon.x += this.photon.dx
                this.photon.dx -= this.H
            }
        }
    },
    {
        name: "Redshift by time 2",
        color: "purple", 
        H: 0.0002,
        photon: {x: 0, dx: c},
        next: function () {
            if (this.photon.dx > 0) {
                this.photon.x += this.photon.dx
                this.photon.dx = c / (1 + this.H * t) 
            }
        }
    },*/
    {
        name: "Redshift by distance 2",
        color: "magenta", 
        H: 0.00035,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += this.photon.dx
            this.photon.dx = c / (1 + this.H * this.photon.x) 
        }
    },
    {
        name: "Expanding 2",
        color: "orange", 
        H: 0.000035,
        photon: {x: 0, dx: c},
        next: function () {
            this.photon.x += this.photon.dx

            for (var i = 0; i < this.targets.length; i++) {
                this.targets[i].x += c - c / (1 + this.H * this.targets[i].start) 
            }
            this.photon.dx = c / (1 + this.H * this.photon.x) 
        }
    }
]


models.forEach(model => {

    var div = document.createElement("div")
    div.innerHTML = model.name + ": H = "
    document.body.appendChild(div)

    var hIinput = document.createElement("input")
    hIinput.value = model.H
    div.appendChild(hIinput)
    hIinput.onchange = e => model.H = parseFloat(hIinput.value)

    model.canvas = document.createElement("canvas")
    model.ctx = model.canvas.getContext("2d")
    model.nextTarget = 0

    model.canvas.width = 1800
    model.canvas.height = 60
    document.body.appendChild(model.canvas)

    // make a target every 200 million light years until 14 billion
    model.targets = []
    for (var i = 1000; i <= 14000; i+=200) {
        model.targets.push({label: i/1000, start: i, x: i})
    }

})



function draw(ctx, exp) {

    ctx.fillStyle = "black"
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)

    for (var i = 0; i < exp.targets.length; i++) {
        ctx.fillStyle = exp.targets[i].hit ? exp.color : "#888888"
    
        ctx.fillRect(exp.targets[i].x * zoom, 0, 1, ctx.canvas.height)
        ctx.fillText(exp.targets[i].label, exp.targets[i].x * zoom + 2, 20)

        if (exp.targets[i].hit) {
            //ctx.fillText(Math.trunc(exp.targets[i].x / 10) / 100, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
            ctx.fillText(exp.targets[i].hit, exp.targets[i].x * zoom + 2, ctx.canvas.height - 10)
        }
    }

    ctx.fillStyle = "yellow"
    ctx.fillRect(exp.photon.x * zoom, ctx.canvas.height / 2, 5, 5)
}

var zoomG = zoom * 0.3
var zoomGY = zoom * 0.05
function drawGraph() {

    ctxG.fillStyle = "black"
    ctxG.fillRect(0, 0, graph.width, graph.height)

    for (var m = 0; m < models.length; m++) {
        ctxG.fillStyle = models[m].color
        for (var i = 0; i < models[m].targets.length; i++) {
            if (models[m].targets[i].hit) {
                ctxG.fillRect(models[m].targets[i].start * zoomG, graph.height - models[m].targets[i].hit * zoomGY, 5, 5)
            }
        }
    }

    ctxG.fillStyle = "white"
    ctxG.fillRect(5500 * zoomG, graph.height - 11000 * zoomGY, 5, 5)
    ctxG.fillRect(13800 * zoomG, graph.height - 46600 * zoomGY, 5, 5)
}

var t = 0
var paused = true

function start() {
    models.forEach(model => {
        model.photon.x = 0
        model.photon.dx = c
        model.nextTarget = 0
        model.targets.forEach(target => {
            target.x = target.start
            target.hit = 0
            //target.tdT.innerHTML = "-"
        })
    })

    paused = false
    t = 0
}

setInterval(() => {
    for (var ii = 0; ii < batch; ii++) {
        
        if (paused) return
        t++

        for (var m = 0; m < models.length; m++) {
            if (models[m].targets[models[m].nextTarget]) {
                models[m].next()

                if (models[m].targets[models[m].nextTarget].x <= models[m].photon.x) {
                    models[m].targets[models[m].nextTarget].hit = t
                    models[m].nextTarget++
                }
            }
        }
    }
}, wait)


setInterval(() => {
    for (var m = 0; m < models.length; m++) {
        draw(models[m].ctx, models[m]) 
    }

    drawGraph()
}, 1000 / 60)

pauseButton.onclick = e => paused = !paused
startButton.onclick = start
</script>




